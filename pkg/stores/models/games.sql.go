// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: games.sql

package models

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
	"github.com/woogles-io/liwords/pkg/entity"
)

const createGame = `-- name: CreateGame :exec
INSERT INTO games (
    created_at, updated_at, uuid, player0_id, player1_id, timers,
    started, game_end_reason, winner_idx, loser_idx, request,
    history, stats, quickdata, tournament_data, tournament_id,
    ready_flag, meta_events, type)
VALUES (
    $1, $2, $3, $4, $5, $6,
    $7, $8, $9, $10, $11,
    $12, $13, $14, $15, $16,
    $17, $18, $19)
RETURNING id
`

type CreateGameParams struct {
	CreatedAt      pgtype.Timestamptz
	UpdatedAt      pgtype.Timestamptz
	Uuid           pgtype.Text
	Player0ID      pgtype.Int4
	Player1ID      pgtype.Int4
	Timers         entity.Timers
	Started        pgtype.Bool
	GameEndReason  pgtype.Int4
	WinnerIdx      pgtype.Int4
	LoserIdx       pgtype.Int4
	Request        entity.GameRequest
	History        []byte
	Stats          entity.Stats
	Quickdata      entity.Quickdata
	TournamentData entity.TournamentData
	TournamentID   pgtype.Text
	ReadyFlag      pgtype.Int8
	MetaEvents     entity.MetaEventData
	Type           pgtype.Int4
}

func (q *Queries) CreateGame(ctx context.Context, arg CreateGameParams) error {
	_, err := q.db.Exec(ctx, createGame,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Uuid,
		arg.Player0ID,
		arg.Player1ID,
		arg.Timers,
		arg.Started,
		arg.GameEndReason,
		arg.WinnerIdx,
		arg.LoserIdx,
		arg.Request,
		arg.History,
		arg.Stats,
		arg.Quickdata,
		arg.TournamentData,
		arg.TournamentID,
		arg.ReadyFlag,
		arg.MetaEvents,
		arg.Type,
	)
	return err
}

const createRawGame = `-- name: CreateRawGame :exec
INSERT INTO games(uuid, request, history, quickdata, timers,
			game_end_reason, type)
VALUES($1, $2, $3, $4, $5,
            $6, $7)
`

type CreateRawGameParams struct {
	Uuid          pgtype.Text
	Request       entity.GameRequest
	History       []byte
	Quickdata     entity.Quickdata
	Timers        entity.Timers
	GameEndReason pgtype.Int4
	Type          pgtype.Int4
}

func (q *Queries) CreateRawGame(ctx context.Context, arg CreateRawGameParams) error {
	_, err := q.db.Exec(ctx, createRawGame,
		arg.Uuid,
		arg.Request,
		arg.History,
		arg.Quickdata,
		arg.Timers,
		arg.GameEndReason,
		arg.Type,
	)
	return err
}

const getGameOwner = `-- name: GetGameOwner :one
SELECT
    agm.creator_uuid,
    u.username
FROM annotated_game_metadata agm
JOIN users u ON agm.creator_uuid = u.uuid
WHERE agm.game_uuid = $1
`

type GetGameOwnerRow struct {
	CreatorUuid string
	Username    pgtype.Text
}

func (q *Queries) GetGameOwner(ctx context.Context, gameUuid string) (GetGameOwnerRow, error) {
	row := q.db.QueryRow(ctx, getGameOwner, gameUuid)
	var i GetGameOwnerRow
	err := row.Scan(&i.CreatorUuid, &i.Username)
	return i, err
}

const getHistory = `-- name: GetHistory :one
SELECT history FROM games
WHERE uuid = $1
`

func (q *Queries) GetHistory(ctx context.Context, uuid pgtype.Text) ([]byte, error) {
	row := q.db.QueryRow(ctx, getHistory, uuid)
	var history []byte
	err := row.Scan(&history)
	return history, err
}

const getLiveGame = `-- name: GetLiveGame :one
SELECT id, created_at, updated_at, deleted_at, uuid, player0_id, player1_id, timers, started, game_end_reason, winner_idx, loser_idx, request, history, stats, quickdata, tournament_data, tournament_id, ready_flag, meta_events, type, game_request, history_in_s3 FROM games WHERE uuid = $1
`

func (q *Queries) GetLiveGame(ctx context.Context, uuid pgtype.Text) (Game, error) {
	row := q.db.QueryRow(ctx, getLiveGame, uuid)
	var i Game
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Uuid,
		&i.Player0ID,
		&i.Player1ID,
		&i.Timers,
		&i.Started,
		&i.GameEndReason,
		&i.WinnerIdx,
		&i.LoserIdx,
		&i.Request,
		&i.History,
		&i.Stats,
		&i.Quickdata,
		&i.TournamentData,
		&i.TournamentID,
		&i.ReadyFlag,
		&i.MetaEvents,
		&i.Type,
		&i.GameRequest,
		&i.HistoryInS3,
	)
	return i, err
}

const getLiveGameMetadata = `-- name: GetLiveGameMetadata :one
SELECT quickdata, game_end_reason, winner_idx, request, created_at, updated_at,
        tournament_data, tournament_id, type
FROM games
WHERE uuid = $1
`

type GetLiveGameMetadataRow struct {
	Quickdata      entity.Quickdata
	GameEndReason  pgtype.Int4
	WinnerIdx      pgtype.Int4
	Request        entity.GameRequest
	CreatedAt      pgtype.Timestamptz
	UpdatedAt      pgtype.Timestamptz
	TournamentData entity.TournamentData
	TournamentID   pgtype.Text
	Type           pgtype.Int4
}

func (q *Queries) GetLiveGameMetadata(ctx context.Context, uuid pgtype.Text) (GetLiveGameMetadataRow, error) {
	row := q.db.QueryRow(ctx, getLiveGameMetadata, uuid)
	var i GetLiveGameMetadataRow
	err := row.Scan(
		&i.Quickdata,
		&i.GameEndReason,
		&i.WinnerIdx,
		&i.Request,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.TournamentData,
		&i.TournamentID,
		&i.Type,
	)
	return i, err
}

const getPastGame = `-- name: GetPastGame :one
SELECT gid, created_at, game_end_reason, winner_idx, game_request, game_document, stats, quickdata, type, tournament_data FROM past_games WHERE gid = $1 AND created_at = $2
`

type GetPastGameParams struct {
	Gid       string
	CreatedAt pgtype.Timestamptz
}

func (q *Queries) GetPastGame(ctx context.Context, arg GetPastGameParams) (PastGame, error) {
	row := q.db.QueryRow(ctx, getPastGame, arg.Gid, arg.CreatedAt)
	var i PastGame
	err := row.Scan(
		&i.Gid,
		&i.CreatedAt,
		&i.GameEndReason,
		&i.WinnerIdx,
		&i.GameRequest,
		&i.GameDocument,
		&i.Stats,
		&i.Quickdata,
		&i.Type,
		&i.TournamentData,
	)
	return i, err
}

const getPastGameMetadata = `-- name: GetPastGameMetadata :one
SELECT game_end_reason, winner_idx, game_request, quickdata, type, tournament_data
FROM past_games
WHERE gid = $1 AND created_at = $2
`

type GetPastGameMetadataParams struct {
	Gid       string
	CreatedAt pgtype.Timestamptz
}

type GetPastGameMetadataRow struct {
	GameEndReason  int16
	WinnerIdx      pgtype.Int2
	GameRequest    entity.GameRequest
	Quickdata      entity.Quickdata
	Type           int16
	TournamentData *entity.TournamentData
}

func (q *Queries) GetPastGameMetadata(ctx context.Context, arg GetPastGameMetadataParams) (GetPastGameMetadataRow, error) {
	row := q.db.QueryRow(ctx, getPastGameMetadata, arg.Gid, arg.CreatedAt)
	var i GetPastGameMetadataRow
	err := row.Scan(
		&i.GameEndReason,
		&i.WinnerIdx,
		&i.GameRequest,
		&i.Quickdata,
		&i.Type,
		&i.TournamentData,
	)
	return i, err
}

const getRematchStreak = `-- name: GetRematchStreak :many
SELECT gid, winner_idx, quickdata FROM past_games
    WHERE quickdata->>'o' = $1::text
	AND game_end_reason <> 5  -- no aborted games
    -- note that cancelled games aren't saved in this table
    -- and neither are ongoing games.
    ORDER BY created_at desc
`

type GetRematchStreakRow struct {
	Gid       string
	WinnerIdx pgtype.Int2
	Quickdata entity.Quickdata
}

func (q *Queries) GetRematchStreak(ctx context.Context, origReqID string) ([]GetRematchStreakRow, error) {
	rows, err := q.db.Query(ctx, getRematchStreak, origReqID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetRematchStreakRow
	for rows.Next() {
		var i GetRematchStreakRow
		if err := rows.Scan(&i.Gid, &i.WinnerIdx, &i.Quickdata); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listActiveGames = `-- name: ListActiveGames :many
SELECT quickdata, request, uuid, started, tournament_data
FROM games
WHERE game_end_reason = 0
`

type ListActiveGamesRow struct {
	Quickdata      entity.Quickdata
	Request        entity.GameRequest
	Uuid           pgtype.Text
	Started        pgtype.Bool
	TournamentData entity.TournamentData
}

func (q *Queries) ListActiveGames(ctx context.Context) ([]ListActiveGamesRow, error) {
	rows, err := q.db.Query(ctx, listActiveGames)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListActiveGamesRow
	for rows.Next() {
		var i ListActiveGamesRow
		if err := rows.Scan(
			&i.Quickdata,
			&i.Request,
			&i.Uuid,
			&i.Started,
			&i.TournamentData,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listActiveTournamentGames = `-- name: ListActiveTournamentGames :many
SELECT quickdata, request, uuid, started, tournament_data
FROM games
WHERE game_end_reason = 0
AND tournament_id = $1
`

type ListActiveTournamentGamesRow struct {
	Quickdata      entity.Quickdata
	Request        entity.GameRequest
	Uuid           pgtype.Text
	Started        pgtype.Bool
	TournamentData entity.TournamentData
}

func (q *Queries) ListActiveTournamentGames(ctx context.Context, tournamentID pgtype.Text) ([]ListActiveTournamentGamesRow, error) {
	rows, err := q.db.Query(ctx, listActiveTournamentGames, tournamentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListActiveTournamentGamesRow
	for rows.Next() {
		var i ListActiveTournamentGamesRow
		if err := rows.Scan(
			&i.Quickdata,
			&i.Request,
			&i.Uuid,
			&i.Started,
			&i.TournamentData,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAllIDs = `-- name: ListAllIDs :many
SELECT uuid FROM games
ORDER BY created_at ASC
`

func (q *Queries) ListAllIDs(ctx context.Context) ([]pgtype.Text, error) {
	rows, err := q.db.Query(ctx, listAllIDs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []pgtype.Text
	for rows.Next() {
		var uuid pgtype.Text
		if err := rows.Scan(&uuid); err != nil {
			return nil, err
		}
		items = append(items, uuid)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setReady = `-- name: SetReady :one
UPDATE games SET ready_flag = ready_flag | (1 << $1::integer)
WHERE uuid = $2
AND ready_flag & (1 << $1::integer) = 0
RETURNING ready_flag
`

type SetReadyParams struct {
	PlayerIdx int32
	Uuid      pgtype.Text
}

func (q *Queries) SetReady(ctx context.Context, arg SetReadyParams) (pgtype.Int8, error) {
	row := q.db.QueryRow(ctx, setReady, arg.PlayerIdx, arg.Uuid)
	var ready_flag pgtype.Int8
	err := row.Scan(&ready_flag)
	return ready_flag, err
}

const updateGame = `-- name: UpdateGame :exec
UPDATE games
SET updated_at = $1,
    player0_id = $2,
    player1_id = $3,
    timers = $4,
    started = $5,
    game_end_reason = $6,
    winner_idx = $7,
    loser_idx = $8,
    request = $9,
    history = $10,
    stats = $11,
    quickdata = $12,
    tournament_data = $13,
    tournament_id = $14,
    ready_flag = $15,
    meta_events = $16
WHERE uuid = $17
`

type UpdateGameParams struct {
	UpdatedAt      pgtype.Timestamptz
	Player0ID      pgtype.Int4
	Player1ID      pgtype.Int4
	Timers         entity.Timers
	Started        pgtype.Bool
	GameEndReason  pgtype.Int4
	WinnerIdx      pgtype.Int4
	LoserIdx       pgtype.Int4
	Request        entity.GameRequest
	History        []byte
	Stats          entity.Stats
	Quickdata      entity.Quickdata
	TournamentData entity.TournamentData
	TournamentID   pgtype.Text
	ReadyFlag      pgtype.Int8
	MetaEvents     entity.MetaEventData
	Uuid           pgtype.Text
}

func (q *Queries) UpdateGame(ctx context.Context, arg UpdateGameParams) error {
	_, err := q.db.Exec(ctx, updateGame,
		arg.UpdatedAt,
		arg.Player0ID,
		arg.Player1ID,
		arg.Timers,
		arg.Started,
		arg.GameEndReason,
		arg.WinnerIdx,
		arg.LoserIdx,
		arg.Request,
		arg.History,
		arg.Stats,
		arg.Quickdata,
		arg.TournamentData,
		arg.TournamentID,
		arg.ReadyFlag,
		arg.MetaEvents,
		arg.Uuid,
	)
	return err
}
