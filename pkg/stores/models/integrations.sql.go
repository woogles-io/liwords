// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: integrations.sql

package models

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const addOrUpdateGlobalIntegration = `-- name: AddOrUpdateGlobalIntegration :exec
INSERT INTO integrations_global(integration_name, data)
VALUES ($1, $2)
ON CONFLICT (integration_name)
DO UPDATE SET data = EXCLUDED.data, last_updated = CURRENT_TIMESTAMP
`

type AddOrUpdateGlobalIntegrationParams struct {
	IntegrationName string
	Data            []byte
}

func (q *Queries) AddOrUpdateGlobalIntegration(ctx context.Context, arg AddOrUpdateGlobalIntegrationParams) error {
	_, err := q.db.Exec(ctx, addOrUpdateGlobalIntegration, arg.IntegrationName, arg.Data)
	return err
}

const addOrUpdateIntegration = `-- name: AddOrUpdateIntegration :one
INSERT INTO integrations(user_id, integration_name, data)
VALUES (
  (SELECT id FROM users WHERE users.uuid = $3),
  $1,
  $2
)
ON CONFLICT (user_id, integration_name)
DO UPDATE SET data = EXCLUDED.data, last_updated = CURRENT_TIMESTAMP
RETURNING integrations.uuid
`

type AddOrUpdateIntegrationParams struct {
	IntegrationName string
	Data            []byte
	UserUuid        pgtype.Text
}

func (q *Queries) AddOrUpdateIntegration(ctx context.Context, arg AddOrUpdateIntegrationParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, addOrUpdateIntegration, arg.IntegrationName, arg.Data, arg.UserUuid)
	var uuid uuid.UUID
	err := row.Scan(&uuid)
	return uuid, err
}

const deleteIntegration = `-- name: DeleteIntegration :exec
DELETE FROM integrations
WHERE integrations.uuid = $1 and user_id = (SELECT id FROM users WHERE users.uuid = $2)
`

type DeleteIntegrationParams struct {
	IntegrationUuid uuid.UUID
	UserUuid        pgtype.Text
}

func (q *Queries) DeleteIntegration(ctx context.Context, arg DeleteIntegrationParams) error {
	_, err := q.db.Exec(ctx, deleteIntegration, arg.IntegrationUuid, arg.UserUuid)
	return err
}

const getExpiringGlobalPatreonIntegration = `-- name: GetExpiringGlobalPatreonIntegration :one
SELECT data
FROM integrations_global
WHERE integration_name = 'patreon'
AND last_updated + COALESCE((data->>'expires_in')::interval, INTERVAL '0 seconds') <= CURRENT_TIMESTAMP + INTERVAL '14 days'
`

func (q *Queries) GetExpiringGlobalPatreonIntegration(ctx context.Context) ([]byte, error) {
	row := q.db.QueryRow(ctx, getExpiringGlobalPatreonIntegration)
	var data []byte
	err := row.Scan(&data)
	return data, err
}

const getExpiringPatreonIntegrations = `-- name: GetExpiringPatreonIntegrations :many
SELECT uuid, integration_name, data
FROM integrations
WHERE integration_name = 'patreon'
AND last_updated + COALESCE((data->>'expires_in')::interval, INTERVAL '0 seconds') <= CURRENT_TIMESTAMP + INTERVAL '14 days'
`

type GetExpiringPatreonIntegrationsRow struct {
	Uuid            uuid.UUID
	IntegrationName string
	Data            []byte
}

func (q *Queries) GetExpiringPatreonIntegrations(ctx context.Context) ([]GetExpiringPatreonIntegrationsRow, error) {
	rows, err := q.db.Query(ctx, getExpiringPatreonIntegrations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetExpiringPatreonIntegrationsRow
	for rows.Next() {
		var i GetExpiringPatreonIntegrationsRow
		if err := rows.Scan(&i.Uuid, &i.IntegrationName, &i.Data); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGlobalIntegrationData = `-- name: GetGlobalIntegrationData :one
SELECT data FROM integrations_global WHERE integration_name = $1
`

func (q *Queries) GetGlobalIntegrationData(ctx context.Context, integrationName string) ([]byte, error) {
	row := q.db.QueryRow(ctx, getGlobalIntegrationData, integrationName)
	var data []byte
	err := row.Scan(&data)
	return data, err
}

const getIntegrationData = `-- name: GetIntegrationData :one
SELECT uuid, data FROM integrations
WHERE user_id = (SELECT id from users where users.uuid = $2)
AND integration_name = $1
`

type GetIntegrationDataParams struct {
	IntegrationName string
	UserUuid        pgtype.Text
}

type GetIntegrationDataRow struct {
	Uuid uuid.UUID
	Data []byte
}

func (q *Queries) GetIntegrationData(ctx context.Context, arg GetIntegrationDataParams) (GetIntegrationDataRow, error) {
	row := q.db.QueryRow(ctx, getIntegrationData, arg.IntegrationName, arg.UserUuid)
	var i GetIntegrationDataRow
	err := row.Scan(&i.Uuid, &i.Data)
	return i, err
}

const getIntegrations = `-- name: GetIntegrations :many
SELECT uuid, integration_name, data FROM integrations
WHERE user_id = (SELECT id from users where users.uuid = $1)
`

type GetIntegrationsRow struct {
	Uuid            uuid.UUID
	IntegrationName string
	Data            []byte
}

func (q *Queries) GetIntegrations(ctx context.Context, userUuid pgtype.Text) ([]GetIntegrationsRow, error) {
	rows, err := q.db.Query(ctx, getIntegrations, userUuid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetIntegrationsRow
	for rows.Next() {
		var i GetIntegrationsRow
		if err := rows.Scan(&i.Uuid, &i.IntegrationName, &i.Data); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPatreonIntegrations = `-- name: GetPatreonIntegrations :many
SELECT integrations.uuid as integ_uuid, integration_name, data, users.uuid as user_uuid,
    users.username as username
FROM integrations
JOIN users on users.id = integrations.user_id
WHERE integration_name = 'patreon'
`

type GetPatreonIntegrationsRow struct {
	IntegUuid       uuid.UUID
	IntegrationName string
	Data            []byte
	UserUuid        pgtype.Text
	Username        pgtype.Text
}

func (q *Queries) GetPatreonIntegrations(ctx context.Context) ([]GetPatreonIntegrationsRow, error) {
	rows, err := q.db.Query(ctx, getPatreonIntegrations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPatreonIntegrationsRow
	for rows.Next() {
		var i GetPatreonIntegrationsRow
		if err := rows.Scan(
			&i.IntegUuid,
			&i.IntegrationName,
			&i.Data,
			&i.UserUuid,
			&i.Username,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateIntegrationData = `-- name: UpdateIntegrationData :exec
UPDATE integrations
SET data = data || $2::jsonb, last_updated = CURRENT_TIMESTAMP
WHERE uuid = $1
`

type UpdateIntegrationDataParams struct {
	Uuid uuid.UUID
	Data []byte
}

func (q *Queries) UpdateIntegrationData(ctx context.Context, arg UpdateIntegrationDataParams) error {
	_, err := q.db.Exec(ctx, updateIntegrationData, arg.Uuid, arg.Data)
	return err
}
