// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package gamestate

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Board struct {
	_tab flatbuffers.Table
}

func GetRootAsBoard(buf []byte, offset flatbuffers.UOffsetT) *Board {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Board{}
	x.Init(buf, n+offset)
	return x
}

func FinishBoardBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsBoard(buf []byte, offset flatbuffers.UOffsetT) *Board {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Board{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedBoardBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *Board) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Board) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Board) BoardType() BoardType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return BoardType(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 1
}

func (rcv *Board) MutateBoardType(n BoardType) bool {
	return rcv._tab.MutateInt8Slot(4, int8(n))
}

func (rcv *Board) IsEmpty() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return true
}

func (rcv *Board) MutateIsEmpty(n bool) bool {
	return rcv._tab.MutateBoolSlot(6, n)
}

func (rcv *Board) Tiles(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *Board) TilesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Board) TilesBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Board) MutateTiles(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func (rcv *Board) NumRows() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 15
}

func (rcv *Board) MutateNumRows(n byte) bool {
	return rcv._tab.MutateByteSlot(10, n)
}

func (rcv *Board) NumCols() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 15
}

func (rcv *Board) MutateNumCols(n byte) bool {
	return rcv._tab.MutateByteSlot(12, n)
}

func BoardStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func BoardAddBoardType(builder *flatbuffers.Builder, boardType BoardType) {
	builder.PrependInt8Slot(0, int8(boardType), 1)
}
func BoardAddIsEmpty(builder *flatbuffers.Builder, isEmpty bool) {
	builder.PrependBoolSlot(1, isEmpty, true)
}
func BoardAddTiles(builder *flatbuffers.Builder, tiles flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(tiles), 0)
}
func BoardStartTilesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func BoardAddNumRows(builder *flatbuffers.Builder, numRows byte) {
	builder.PrependByteSlot(3, numRows, 15)
}
func BoardAddNumCols(builder *flatbuffers.Builder, numCols byte) {
	builder.PrependByteSlot(4, numCols, 15)
}
func BoardEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
