// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package gamestate

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Timers struct {
	_tab flatbuffers.Table
}

func GetRootAsTimers(buf []byte, offset flatbuffers.UOffsetT) *Timers {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Timers{}
	x.Init(buf, n+offset)
	return x
}

func FinishTimersBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsTimers(buf []byte, offset flatbuffers.UOffsetT) *Timers {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Timers{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedTimersBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *Timers) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Timers) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Timers) TimeOfLastUpdateMs() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Timers) MutateTimeOfLastUpdateMs(n uint64) bool {
	return rcv._tab.MutateUint64Slot(4, n)
}

func (rcv *Timers) TimeStartedMs() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Timers) MutateTimeStartedMs(n uint64) bool {
	return rcv._tab.MutateUint64Slot(6, n)
}

func (rcv *Timers) TimeRemainingMs(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *Timers) TimeRemainingMsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Timers) MutateTimeRemainingMs(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *Timers) MaxOvertimeMinutes() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Timers) MutateMaxOvertimeMinutes(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

func (rcv *Timers) IncrementSeconds() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Timers) MutateIncrementSeconds(n int32) bool {
	return rcv._tab.MutateInt32Slot(12, n)
}

func (rcv *Timers) ResetToIncrementAfterTurn() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *Timers) MutateResetToIncrementAfterTurn(n bool) bool {
	return rcv._tab.MutateBoolSlot(14, n)
}

func (rcv *Timers) TimeBankSeconds() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Timers) MutateTimeBankSeconds(n uint64) bool {
	return rcv._tab.MutateUint64Slot(16, n)
}

func TimersStart(builder *flatbuffers.Builder) {
	builder.StartObject(7)
}
func TimersAddTimeOfLastUpdateMs(builder *flatbuffers.Builder, timeOfLastUpdateMs uint64) {
	builder.PrependUint64Slot(0, timeOfLastUpdateMs, 0)
}
func TimersAddTimeStartedMs(builder *flatbuffers.Builder, timeStartedMs uint64) {
	builder.PrependUint64Slot(1, timeStartedMs, 0)
}
func TimersAddTimeRemainingMs(builder *flatbuffers.Builder, timeRemainingMs flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(timeRemainingMs), 0)
}
func TimersStartTimeRemainingMsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func TimersAddMaxOvertimeMinutes(builder *flatbuffers.Builder, maxOvertimeMinutes int32) {
	builder.PrependInt32Slot(3, maxOvertimeMinutes, 0)
}
func TimersAddIncrementSeconds(builder *flatbuffers.Builder, incrementSeconds int32) {
	builder.PrependInt32Slot(4, incrementSeconds, 0)
}
func TimersAddResetToIncrementAfterTurn(builder *flatbuffers.Builder, resetToIncrementAfterTurn bool) {
	builder.PrependBoolSlot(5, resetToIncrementAfterTurn, false)
}
func TimersAddTimeBankSeconds(builder *flatbuffers.Builder, timeBankSeconds uint64) {
	builder.PrependUint64Slot(6, timeBankSeconds, 0)
}
func TimersEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
