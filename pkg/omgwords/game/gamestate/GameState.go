// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package gamestate

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type GameState struct {
	_tab flatbuffers.Table
}

func GetRootAsGameState(buf []byte, offset flatbuffers.UOffsetT) *GameState {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &GameState{}
	x.Init(buf, n+offset)
	return x
}

func FinishGameStateBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsGameState(buf []byte, offset flatbuffers.UOffsetT) *GameState {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &GameState{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedGameStateBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *GameState) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *GameState) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *GameState) NumPlayers() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 2
}

func (rcv *GameState) MutateNumPlayers(n byte) bool {
	return rcv._tab.MutateByteSlot(4, n)
}

func (rcv *GameState) MaxTilesOnRack() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 7
}

func (rcv *GameState) MutateMaxTilesOnRack(n byte) bool {
	return rcv._tab.MutateByteSlot(6, n)
}

func (rcv *GameState) ConsecutiveScorelessTurns() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GameState) MutateConsecutiveScorelessTurns(n byte) bool {
	return rcv._tab.MutateByteSlot(8, n)
}

func (rcv *GameState) PlayerOnTurn() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GameState) MutatePlayerOnTurn(n byte) bool {
	return rcv._tab.MutateByteSlot(10, n)
}

func (rcv *GameState) Board(obj *Board) *Board {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Board)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *GameState) Racks(obj *Rack, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *GameState) RacksLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *GameState) PlayerScores(j int) int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *GameState) PlayerScoresLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *GameState) MutatePlayerScores(j int, n int32) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), n)
	}
	return false
}

func (rcv *GameState) Bag(obj *TileBag) *TileBag {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(TileBag)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *GameState) Timers(obj *Timers) *Timers {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Timers)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func GameStateStart(builder *flatbuffers.Builder) {
	builder.StartObject(9)
}
func GameStateAddNumPlayers(builder *flatbuffers.Builder, numPlayers byte) {
	builder.PrependByteSlot(0, numPlayers, 2)
}
func GameStateAddMaxTilesOnRack(builder *flatbuffers.Builder, maxTilesOnRack byte) {
	builder.PrependByteSlot(1, maxTilesOnRack, 7)
}
func GameStateAddConsecutiveScorelessTurns(builder *flatbuffers.Builder, consecutiveScorelessTurns byte) {
	builder.PrependByteSlot(2, consecutiveScorelessTurns, 0)
}
func GameStateAddPlayerOnTurn(builder *flatbuffers.Builder, playerOnTurn byte) {
	builder.PrependByteSlot(3, playerOnTurn, 0)
}
func GameStateAddBoard(builder *flatbuffers.Builder, board flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(board), 0)
}
func GameStateAddRacks(builder *flatbuffers.Builder, racks flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(racks), 0)
}
func GameStateStartRacksVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func GameStateAddPlayerScores(builder *flatbuffers.Builder, playerScores flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(playerScores), 0)
}
func GameStateStartPlayerScoresVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func GameStateAddBag(builder *flatbuffers.Builder, bag flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(bag), 0)
}
func GameStateAddTimers(builder *flatbuffers.Builder, timers flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(timers), 0)
}
func GameStateEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
