// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package gamestate

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type GameState struct {
	_tab flatbuffers.Table
}

func GetRootAsGameState(buf []byte, offset flatbuffers.UOffsetT) *GameState {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &GameState{}
	x.Init(buf, n+offset)
	return x
}

func FinishGameStateBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsGameState(buf []byte, offset flatbuffers.UOffsetT) *GameState {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &GameState{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedGameStateBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *GameState) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *GameState) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *GameState) BoardType() BoardType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return BoardType(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 1
}

func (rcv *GameState) MutateBoardType(n BoardType) bool {
	return rcv._tab.MutateInt8Slot(4, int8(n))
}

func (rcv *GameState) BoardIsEmpty() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return true
}

func (rcv *GameState) MutateBoardIsEmpty(n bool) bool {
	return rcv._tab.MutateBoolSlot(6, n)
}

func (rcv *GameState) NumPlayers() int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt8(o + rcv._tab.Pos)
	}
	return 2
}

func (rcv *GameState) MutateNumPlayers(n int8) bool {
	return rcv._tab.MutateInt8Slot(8, n)
}

func (rcv *GameState) MaxTilesOnRack() int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt8(o + rcv._tab.Pos)
	}
	return 7
}

func (rcv *GameState) MutateMaxTilesOnRack(n int8) bool {
	return rcv._tab.MutateInt8Slot(10, n)
}

func (rcv *GameState) NumBoardRows() int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt8(o + rcv._tab.Pos)
	}
	return 15
}

func (rcv *GameState) MutateNumBoardRows(n int8) bool {
	return rcv._tab.MutateInt8Slot(12, n)
}

func (rcv *GameState) NumBoardCols() int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt8(o + rcv._tab.Pos)
	}
	return 15
}

func (rcv *GameState) MutateNumBoardCols(n int8) bool {
	return rcv._tab.MutateInt8Slot(14, n)
}

func (rcv *GameState) Board(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *GameState) BoardLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *GameState) BoardBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *GameState) MutateBoard(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func (rcv *GameState) Racks(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *GameState) RacksLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *GameState) RacksBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *GameState) MutateRacks(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func (rcv *GameState) ConsecutiveScorelessTurns() int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetInt8(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GameState) MutateConsecutiveScorelessTurns(n int8) bool {
	return rcv._tab.MutateInt8Slot(20, n)
}

func (rcv *GameState) PlayerScores(j int) int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *GameState) PlayerScoresLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *GameState) MutatePlayerScores(j int, n int32) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), n)
	}
	return false
}

func (rcv *GameState) PlayerOnTurn() int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetInt8(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GameState) MutatePlayerOnTurn(n int8) bool {
	return rcv._tab.MutateInt8Slot(24, n)
}

func (rcv *GameState) Bag(obj *TileBag) *TileBag {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(TileBag)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func GameStateStart(builder *flatbuffers.Builder) {
	builder.StartObject(12)
}
func GameStateAddBoardType(builder *flatbuffers.Builder, boardType BoardType) {
	builder.PrependInt8Slot(0, int8(boardType), 1)
}
func GameStateAddBoardIsEmpty(builder *flatbuffers.Builder, boardIsEmpty bool) {
	builder.PrependBoolSlot(1, boardIsEmpty, true)
}
func GameStateAddNumPlayers(builder *flatbuffers.Builder, numPlayers int8) {
	builder.PrependInt8Slot(2, numPlayers, 2)
}
func GameStateAddMaxTilesOnRack(builder *flatbuffers.Builder, maxTilesOnRack int8) {
	builder.PrependInt8Slot(3, maxTilesOnRack, 7)
}
func GameStateAddNumBoardRows(builder *flatbuffers.Builder, numBoardRows int8) {
	builder.PrependInt8Slot(4, numBoardRows, 15)
}
func GameStateAddNumBoardCols(builder *flatbuffers.Builder, numBoardCols int8) {
	builder.PrependInt8Slot(5, numBoardCols, 15)
}
func GameStateAddBoard(builder *flatbuffers.Builder, board flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(board), 0)
}
func GameStateStartBoardVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func GameStateAddRacks(builder *flatbuffers.Builder, racks flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(racks), 0)
}
func GameStateStartRacksVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func GameStateAddConsecutiveScorelessTurns(builder *flatbuffers.Builder, consecutiveScorelessTurns int8) {
	builder.PrependInt8Slot(8, consecutiveScorelessTurns, 0)
}
func GameStateAddPlayerScores(builder *flatbuffers.Builder, playerScores flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(playerScores), 0)
}
func GameStateStartPlayerScoresVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func GameStateAddPlayerOnTurn(builder *flatbuffers.Builder, playerOnTurn int8) {
	builder.PrependInt8Slot(10, playerOnTurn, 0)
}
func GameStateAddBag(builder *flatbuffers.Builder, bag flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(bag), 0)
}
func GameStateEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
