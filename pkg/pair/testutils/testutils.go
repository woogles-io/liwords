package testutils

import (
	"strconv"
	"strings"

	pb "github.com/woogles-io/liwords/rpc/api/proto/ipc"
)

func AddRoundPairings(request *pb.PairRequest, pairings []int32) {
	roundPairings := &pb.RoundPairings{}
	roundPairings.Pairings = append(roundPairings.Pairings, pairings...)
	request.DivisionPairings = append(request.DivisionPairings, roundPairings)
}

func AddRoundPairingsStr(request *pb.PairRequest, pairingsStr string) {
	pairings := strings.Fields(pairingsStr)
	roundPairings := &pb.RoundPairings{}
	for _, pairing := range pairings {
		pairingInt, err := strconv.Atoi(pairing)
		if err != nil {
			panic(err)
		}
		roundPairings.Pairings = append(roundPairings.Pairings, int32(pairingInt))
	}
	request.DivisionPairings = append(request.DivisionPairings, roundPairings)
}

func AddRoundResultsStr(request *pb.PairRequest, resultsStr string) {
	results := strings.Fields(resultsStr)
	roundResults := &pb.RoundResults{}
	for _, result := range results {
		resultInt, err := strconv.Atoi(result)
		if err != nil {
			panic(err)
		}
		roundResults.Results = append(roundResults.Results, int32(resultInt))
	}
	request.DivisionResults = append(request.DivisionResults, roundResults)
}

func AddRoundResultsAndPairingsStr(request *pb.PairRequest, combinedStr string) {
	fields := strings.Fields(combinedStr)

	roundPairings := &pb.RoundPairings{}
	roundResults := &pb.RoundResults{}

	if len(fields)%2 != 0 {
		panic("Input string must contain pairs of <opp_index> <player_score>")
	}

	for i := 0; i < len(fields); i += 2 {
		oppIndex, err := strconv.Atoi(fields[i])
		if err != nil {
			panic(err)
		}
		playerScore, err := strconv.Atoi(fields[i+1])
		if err != nil {
			panic(err)
		}

		roundPairings.Pairings = append(roundPairings.Pairings, int32(oppIndex))
		roundResults.Results = append(roundResults.Results, int32(playerScore))
	}

	request.DivisionPairings = append(request.DivisionPairings, roundPairings)
	request.DivisionResults = append(request.DivisionResults, roundResults)
}

func CreateDefaultPairRequest() *pb.PairRequest {
	request := &pb.PairRequest{
		PairMethod:                 pb.PairMethod_COP,
		PlayerNames:                []string{"Alice", "Bob", "Charlie", "Dave", "Eric", "Frank", "Grace", "Holly"},
		DivisionPairings:           []*pb.RoundPairings{},
		DivisionResults:            []*pb.RoundResults{},
		PlayerClasses:              []int32{0, 0, 0, 0, 0, 0, 0, 0},
		ClassPrizes:                []int32{2},
		GibsonSpread:               200,
		ControlLossThreshold:       0.25,
		HopefulnessThreshold:       0.02,
		AllPlayers:                 8,
		ValidPlayers:               8,
		Rounds:                     10,
		PlacePrizes:                2,
		DivisionSims:               1000,
		ControlLossSims:            1000,
		ControlLossActivationRound: 10,
		AllowRepeatByes:            false,
	}
	return request
}

func CreateDefaultOddPairRequest() *pb.PairRequest {
	request := &pb.PairRequest{
		PairMethod:                 pb.PairMethod_COP,
		PlayerNames:                []string{"Alice", "Bob", "Charlie", "Dave", "Eric", "Frank", "Grace"},
		DivisionPairings:           []*pb.RoundPairings{},
		DivisionResults:            []*pb.RoundResults{},
		PlayerClasses:              []int32{0, 0, 0, 0, 0, 0, 0},
		ClassPrizes:                []int32{2},
		GibsonSpread:               200,
		ControlLossThreshold:       0.25,
		HopefulnessThreshold:       0.02,
		AllPlayers:                 7,
		ValidPlayers:               7,
		Rounds:                     10,
		PlacePrizes:                2,
		DivisionSims:               1000,
		ControlLossSims:            1000,
		ControlLossActivationRound: 10,
		AllowRepeatByes:            false,
	}
	return request
}

func CreateKingston2023AfterRound15PairRequest() *pb.PairRequest {
	request := &pb.PairRequest{
		PairMethod:   pb.PairMethod_COP,
		AllPlayers:   26,
		ValidPlayers: 26,
		Rounds:       23,
		PlayerNames:  []string{"Jackson Smylie", "Joshua Sokol", "Arie Sinke", "Michael Fagen", "Max Panitch", "Lou Cornelis", "Eric Goldstein", "Jason Li", "Christopher Sykes", "Chloe Fatsis", "Deen Hergott", "Stefan Fatsis", "Noah Kalus", "Steve Ozorio", "Anna Miransky", "Lydia Keras", "Andre Popadynec", "Marcela Kadanka", "Agnes Kramer", "Richard Kirsch", "Joan Buma", "Gregg Bigourdin", "Sharmaine Farini", "Lilla Sinanan", "Mad Palazzo", "Trevor Sealy"},
		DivisionPairings: []*pb.RoundPairings{
			{Pairings: []int32{20, 22, 23, 25, 21, 24, 10, 14, 16, 15, 6, 17, 19, 18, 7, 9, 8, 11, 13, 12, 0, 4, 1, 2, 5, 3}},
			{Pairings: []int32{16, 13, 17, 19, 14, 15, 18, 21, 20, 24, 22, 23, 25, 1, 4, 5, 0, 2, 6, 3, 8, 7, 10, 11, 9, 12}},
			{Pairings: []int32{8, 6, 11, 12, 7, 9, 1, 4, 0, 5, 13, 2, 3, 10, 21, 24, 20, 23, 22, 25, 16, 14, 18, 17, 15, 19}},
			{Pairings: []int32{3, 18, 10, 0, 19, 7, 14, 5, 24, 16, 2, 22, 21, 20, 6, 23, 9, 25, 1, 4, 13, 12, 11, 15, 8, 17}},
			{Pairings: []int32{10, 7, 3, 2, 24, 18, 21, 1, 19, 25, 0, 15, 14, 22, 12, 11, 17, 16, 5, 8, 23, 6, 13, 20, 4, 9}},
			{Pairings: []int32{11, 19, 4, 15, 2, 14, 24, 8, 7, 13, 12, 0, 10, 9, 5, 3, 22, 18, 17, 1, 21, 20, 16, 25, 6, 23}},
			{Pairings: []int32{19, 12, 5, 14, 18, 2, 13, 17, 10, 11, 8, 9, 1, 6, 3, 22, 25, 7, 4, 0, 24, 23, 15, 21, 20, 16}},
			{Pairings: []int32{2, 17, 0, 4, 3, 19, 9, 10, 12, 6, 7, 20, 8, 15, 16, 13, 14, 1, 21, 5, 11, 18, 23, 22, 25, 24}},
			{Pairings: []int32{1, 0, 7, 17, 6, 8, 4, 2, 5, 12, 23, 18, 9, 19, 24, 16, 15, 3, 11, 13, 22, 25, 20, 10, 14, 21}},
			{Pairings: []int32{5, 8, 12, 9, 16, 0, 17, 13, 1, 3, 20, 21, 2, 7, 23, 19, 4, 6, 24, 15, 10, 11, 25, 14, 18, 22}},
			{Pairings: []int32{4, 3, 9, 1, 0, 17, 8, 18, 6, 2, 15, 13, 16, 11, 22, 10, 12, 5, 7, 23, 25, 24, 14, 19, 21, 20}},
			{Pairings: []int32{7, 9, 8, 11, 12, 6, 5, 0, 2, 1, 19, 3, 4, 25, 17, 20, 21, 14, 23, 10, 15, 16, 24, 18, 22, 13}},
			{Pairings: []int32{14, 5, 6, 21, 17, 1, 2, 16, 9, 8, 24, 12, 11, 23, 0, 25, 7, 4, 20, 22, 18, 3, 19, 13, 10, 15}},
			{Pairings: []int32{6, 2, 1, 8, 5, 4, 0, 9, 3, 7, 25, 14, 24, 17, 11, 18, 23, 13, 15, 20, 19, 22, 21, 16, 12, 10}},
			{Pairings: []int32{8, 6, 19, 9, 22, 11, 1, 12, 0, 3, 18, 5, 7, 16, 25, 21, 13, 20, 10, 2, 17, 15, 4, 24, 23, 14}},
		},
		DivisionResults: []*pb.RoundResults{
			{Results: []int32{572, 430, 504, 392, 413, 401, 427, 322, 422, 449, 376, 332, 355, 416, 438, 367, 224, 475, 389, 435, 324, 408, 397, 307, 355, 378}},
			{Results: []int32{395, 465, 502, 382, 440, 416, 445, 483, 530, 449, 420, 347, 533, 302, 287, 336, 329, 301, 300, 361, 316, 320, 379, 343, 341, 336}},
			{Results: []int32{388, 484, 494, 334, 396, 450, 467, 378, 352, 396, 409, 353, 392, 398, 364, 267, 477, 419, 551, 332, 347, 410, 289, 309, 398, 408}},
			{Results: []int32{402, 437, 441, 503, 340, 361, 456, 452, 421, 415, 301, 366, 404, 471, 420, 407, 267, 419, 413, 452, 403, 355, 314, 280, 414, 373}},
			{Results: []int32{378, 415, 407, 412, 568, 374, 453, 384, 412, 464, 444, 381, 339, 408, 479, 315, 388, 456, 417, 334, 457, 351, 402, 344, 324, 354}},
			{Results: []int32{460, 449, 417, 406, 379, 441, 332, 377, 455, 387, 405, 262, 469, 351, 345, 393, 467, 418, 360, 400, 381, 418, 256, 352, 482, 358}},
			{Results: []int32{342, 395, 414, 437, 393, 529, 494, 466, 392, 535, 356, 333, 426, 370, 406, 388, 353, 363, 419, 344, 404, 390, 286, 343, 409, 330}},
			{Results: []int32{513, 448, 413, 354, 498, 471, 458, 469, 486, 246, 341, 593, 328, 381, 308, 286, 425, 493, 379, 394, 344, 570, 378, 342, 427, 334}},
			{Results: []int32{410, 531, 476, 489, 353, 380, 433, 350, 385, 454, 314, 403, 425, 388, 380, 383, 387, 375, 503, 334, 401, 344, 404, 454, 327, 349}},
			{Results: []int32{434, 393, 479, 478, 459, 410, 433, 498, 387, 484, 430, 473, 329, 340, 566, 322, 440, 319, 414, 365, 312, 407, 393, 311, 431, 345}},
			{Results: []int32{453, 439, 405, 359, 386, 450, 327, 414, 488, 369, 496, 423, 452, 187, 446, 350, 387, 226, 316, 418, 359, 455, 389, 380, 394, 448}},
			{Results: []int32{436, 360, 386, 384, 444, 358, 433, 423, 445, 470, 330, 378, 452, 333, 380, 435, 407, 358, 448, 344, 376, 372, 243, 437, 437, 406}},
			{Results: []int32{470, 444, 353, 340, 381, 350, 432, 413, 435, 301, 378, 439, 367, 523, 367, 378, 370, 442, 442, 343, 331, 328, 329, 322, 365, 314}},
			{Results: []int32{400, 482, 374, 451, 409, 424, 442, 510, 413, 323, 514, 356, 414, 326, 359, 382, 496, 370, 326, 444, 414, 293, 445, 324, 355, 282}},
			{Results: []int32{442, 414, 477, 469, 360, 537, 504, 382, 400, 431, 386, 249, 405, 428, 402, 358, 267, 325, 428, 404, 408, 481, 356, 427, 368, 378}},
		},
		PlayerClasses:              []int32{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		ClassPrizes:                []int32{2},
		GibsonSpread:               200,
		ControlLossThreshold:       0.25,
		HopefulnessThreshold:       0.02,
		PlacePrizes:                2,
		DivisionSims:               1000,
		ControlLossSims:            1000,
		ControlLossActivationRound: 23,
		AllowRepeatByes:            false,
	}
	return request
}

func CreateAlbanyjuly4th2024AfterRound21PairRequest() *pb.PairRequest {
	request := &pb.PairRequest{
		PairMethod:   pb.PairMethod_COP,
		AllPlayers:   30,
		ValidPlayers: 30,
		Rounds:       27,
		PlayerNames:  []string{"Wellington Jighere", "Adam Logan", "Will Anderson", "Dennis Ikekeregor", "Austin Shin", "Matthew O'Connor", "Chris Lipe", "Joshua Castellano", "Josh Sokol", "Jason Keller", "Ben Schoenbrun", "Erickson Smith", "Bright Idahosa", "Robert Linn", "Jason Ubeika", "Tim Weiss", "Richard Buck", "Anthony Ikolo", "Daniel Blake", "Terry Kang", "Carmel Dodd", "Niel Gan", "Steve Ozorio", "Thomas Stumpf", "Joe Roberdeau", "Cheryl Melvin", "Iliana Filby", "Ivan Sentongo", "Edgar Odongkara", "Mohamed Kamara"},
		DivisionPairings: []*pb.RoundPairings{
			{Pairings: []int32{25, 20, 26, 22, 21, 13, 23, 24, 27, 29, 15, 17, 19, 5, 18, 10, 28, 11, 14, 12, 1, 4, 3, 6, 7, 0, 2, 8, 16, 9}},
			{Pairings: []int32{29, 19, 14, 16, 17, 18, 15, 27, 24, 25, 23, 21, 20, 26, 2, 6, 3, 4, 5, 1, 12, 11, 28, 10, 8, 9, 13, 7, 22, 0}},
			{Pairings: []int32{9, 12, 5, 28, 11, 2, 10, 8, 7, 0, 6, 4, 1, 14, 13, 23, 22, 21, 26, 20, 19, 17, 16, 15, 27, 29, 18, 24, 3, 25}},
			{Pairings: []int32{4, 13, 28, 17, 0, 16, 7, 6, 12, 10, 9, 18, 8, 1, 24, 26, 5, 3, 11, 27, 29, 25, 23, 22, 14, 21, 15, 19, 2, 20}},
			{Pairings: []int32{11, 2, 1, 9, 20, 28, 17, 23, 10, 3, 8, 0, 22, 18, 16, 29, 14, 6, 13, 24, 4, 27, 12, 7, 19, 26, 25, 21, 5, 15}},
			{Pairings: []int32{3, 10, 8, 0, 23, 6, 5, 17, 2, 11, 1, 9, 24, 20, 25, 27, 26, 7, 28, 29, 13, 22, 21, 4, 12, 14, 16, 15, 18, 19}},
			{Pairings: []int32{1, 0, 7, 10, 18, 23, 8, 2, 6, 28, 3, 12, 11, 17, 26, 20, 25, 13, 4, 21, 15, 19, 24, 5, 22, 16, 14, 29, 9, 27}},
			{Pairings: []int32{6, 3, 11, 1, 28, 29, 0, 10, 20, 19, 7, 2, 14, 23, 12, 21, 24, 18, 17, 9, 8, 15, 26, 13, 16, 27, 22, 25, 4, 5}},
			{Pairings: []int32{10, 6, 4, 7, 2, 19, 1, 3, 14, 12, 0, 28, 9, 24, 8, 18, 23, 29, 15, 5, 21, 20, 25, 16, 13, 22, 27, 26, 11, 17}},
			{Pairings: []int32{7, 28, 12, 6, 8, 21, 3, 0, 4, 15, 11, 10, 2, 16, 29, 9, 13, 20, 19, 18, 17, 5, 27, 26, 25, 24, 23, 22, 1, 14}},
			{Pairings: []int32{12, 8, 17, 11, 6, 27, 4, 15, 1, 14, 28, 3, 0, 19, 9, 7, 20, 2, 21, 13, 16, 18, 29, 25, 26, 23, 24, 5, 10, 22}},
			{Pairings: []int32{15, 11, 20, 4, 3, 22, 28, 29, 17, 13, 12, 1, 10, 9, 27, 0, 18, 8, 16, 25, 2, 26, 5, 24, 23, 19, 21, 14, 6, 7}},
			{Pairings: []int32{28, 15, 29, 12, 10, 25, 11, 13, 9, 8, 4, 6, 3, 7, 23, 1, 17, 16, 22, 26, 27, 24, 18, 14, 21, 5, 19, 20, 0, 2}},
			{Pairings: []int32{8, 16, 3, 2, 7, 11, 20, 4, 0, 24, 17, 5, 13, 12, 22, 19, 1, 10, 25, 15, 6, 23, 14, 21, 9, 18, 29, 28, 27, 26}},
			{Pairings: []int32{2, 17, 0, 13, 15, 7, 9, 5, 11, 6, 20, 8, 16, 3, 28, 4, 12, 1, 24, 22, 10, 29, 19, 27, 18, 26, 25, 23, 14, 21}},
			{Pairings: []int32{13, 7, 10, 29, 27, 17, 28, 1, 16, 26, 2, 22, 15, 0, 21, 12, 8, 5, 20, 23, 18, 14, 11, 19, 25, 24, 9, 4, 6, 3}},
			{Pairings: []int32{5, 20, 6, 18, 10, 0, 2, 11, 29, 22, 4, 7, 28, 21, 19, 16, 15, 27, 3, 14, 1, 13, 9, 25, 26, 23, 24, 17, 12, 8}},
			{Pairings: []int32{10, 4, 27, 14, 1, 12, 20, 28, 15, 17, 0, 19, 5, 25, 3, 8, 21, 9, 23, 11, 6, 16, 26, 18, 29, 13, 22, 2, 7, 24}},
			{Pairings: []int32{20, 2, 1, 24, 9, 26, 27, 10, 18, 4, 7, 14, 17, 22, 11, 28, 19, 12, 8, 16, 0, 25, 13, 29, 3, 21, 5, 6, 15, 23}},
			{Pairings: []int32{17, 9, 10, 21, 12, 14, 18, 20, 13, 1, 2, 24, 4, 8, 5, 22, 27, 0, 6, 25, 7, 3, 15, 26, 11, 19, 23, 16, 29, 28}},
			{Pairings: []int32{18, 5, 9, 23, 7, 1, 12, 4, 10, 2, 8, 27, 6, 28, 20, 24, 29, 19, 0, 17, 14, 26, 25, 3, 15, 22, 21, 11, 13, 16}},
		},
		DivisionResults: []*pb.RoundResults{
			{Results: []int32{509, 431, 503, 426, 438, 454, 452, 533, 466, 506, 443, 219, 413, 487, 373, 399, 382, 503, 552, 404, 366, 379, 392, 405, 327, 356, 371, 356, 437, 345}},
			{Results: []int32{533, 428, 521, 423, 479, 503, 444, 435, 514, 526, 453, 459, 397, 554, 321, 427, 423, 405, 406, 352, 392, 431, 408, 382, 389, 325, 437, 353, 421, 356}},
			{Results: []int32{400, 486, 448, 432, 363, 406, 420, 407, 469, 506, 483, 495, 358, 409, 426, 370, 397, 401, 424, 421, 474, 309, 440, 388, 385, 349, 411, 451, 394, 506}},
			{Results: []int32{429, 493, 491, 397, 329, 515, 424, 390, 527, 356, 415, 578, 344, 392, 417, 464, 350, 305, 342, 474, 520, 498, 381, 458, 462, 246, 354, 402, 364, 421}},
			{Results: []int32{595, 439, 375, 494, 436, 349, 564, 523, 361, 462, 595, 408, 460, 465, 485, 415, 389, 466, 490, 480, 355, 493, 416, 272, 325, 304, 396, 253, 436, 338}},
			{Results: []int32{481, 368, 475, 361, 497, 340, 497, 448, 426, 422, 474, 469, 494, 357, 552, 437, 460, 414, 431, 379, 436, 419, 397, 446, 360, 412, 369, 423, 531, 465}},
			{Results: []int32{481, 503, 423, 575, 467, 556, 444, 478, 413, 380, 346, 425, 337, 391, 444, 410, 499, 505, 294, 407, 442, 395, 323, 296, 414, 372, 367, 421, 497, 489}},
			{Results: []int32{436, 409, 326, 342, 365, 411, 378, 425, 447, 482, 428, 506, 443, 400, 314, 505, 564, 523, 380, 461, 378, 372, 415, 358, 448, 442, 351, 483, 494, 523}},
			{Results: []int32{405, 454, 389, 436, 494, 321, 392, 422, 553, 426, 492, 522, 443, 461, 419, 545, 429, 482, 374, 471, 422, 319, 404, 364, 283, 367, 393, 490, 469, 338}},
			{Results: []int32{521, 327, 439, 395, 506, 424, 474, 479, 466, 410, 519, 360, 469, 412, 494, 430, 449, 472, 469, 440, 317, 368, 340, 352, 463, 277, 490, 450, 564, 422}},
			{Results: []int32{423, 447, 474, 470, 393, 436, 452, 333, 362, 407, 404, 364, 430, 474, 391, 387, 316, 417, 411, 327, 562, 366, 353, 416, 433, 448, 420, 598, 390, 445}},
			{Results: []int32{430, 495, 374, 386, 487, 481, 473, 554, 434, 350, 518, 343, 387, 379, 401, 386, 469, 442, 391, 441, 396, 448, 382, 419, 358, 377, 304, 408, 456, 353}},
			{Results: []int32{430, 476, 427, 383, 524, 480, 333, 466, 399, 460, 410, 473, 535, 441, 525, 311, 415, 424, 395, 479, 418, 427, 375, 367, 367, 264, 397, 409, 399, 406}},
			{Results: []int32{351, 490, 491, 481, 376, 524, 375, 537, 475, 420, 570, 409, 474, 492, 308, 572, 337, 375, 410, 343, 395, 364, 481, 369, 414, 373, 320, 456, 404, 428}},
			{Results: []int32{436, 362, 459, 442, 421, 389, 536, 437, 470, 401, 484, 364, 395, 401, 417, 412, 336, 513, 396, 382, 330, 310, 396, 409, 401, 402, 472, 511, 570, 499}},
			{Results: []int32{586, 581, 449, 399, 473, 383, 466, 312, 535, 537, 559, 499, 493, 327, 419, 437, 398, 381, 459, 424, 369, 377, 412, 363, 421, 372, 267, 377, 427, 441}},
			{Results: []int32{454, 412, 424, 373, 477, 383, 399, 475, 505, 465, 378, 392, 443, 416, 458, 398, 485, 487, 447, 440, 453, 315, 367, 370, 470, 414, 373, 493, 492, 292}},
			{Results: []int32{492, 325, 503, 503, 466, 429, 519, 355, 514, 494, 492, 460, 387, 545, 383, 375, 410, 326, 469, 422, 415, 413, 378, 404, 352, 303, 403, 373, 500, 496}},
			{Results: []int32{459, 450, 451, 397, 489, 594, 470, 451, 455, 438, 422, 357, 421, 360, 484, 449, 396, 435, 479, 569, 442, 533, 356, 420, 400, 321, 287, 341, 401, 487}},
			{Results: []int32{480, 469, 445, 476, 460, 407, 409, 437, 503, 498, 466, 507, 377, 401, 403, 375, 352, 313, 406, 465, 485, 330, 436, 410, 319, 379, 434, 438, 514, 422}},
			{Results: []int32{497, 390, 296, 585, 419, 417, 327, 438, 443, 595, 449, 337, 517, 526, 538, 379, 374, 338, 421, 326, 421, 507, 465, 333, 411, 398, 374, 502, 357, 426}},
		},
		PlayerClasses:              []int32{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		ClassPrizes:                []int32{2},
		GibsonSpread:               200,
		ControlLossThreshold:       0.25,
		HopefulnessThreshold:       0.02,
		PlacePrizes:                2,
		DivisionSims:               1000,
		ControlLossSims:            1000,
		ControlLossActivationRound: 27,
		AllowRepeatByes:            false,
	}
	return request
}

func CreateLakeGeorgeAfterRound13PairRequest() *pb.PairRequest {
	request := &pb.PairRequest{
		PairMethod:   pb.PairMethod_COP,
		AllPlayers:   28,
		ValidPlayers: 28,
		Rounds:       15,
		PlayerNames:  []string{"Mack Meller", "Joey Mallick", "Cesar Del Solar", "Jackson Smylie", "Chloe Fatsis", "Arie Sinke", "Zachary Ansell", "Michael Fagen", "Seth Lipkin", "Eric Goldstein", "Jason Li", "Lisa Odom", "Karl Higby", "Jeremy Hall", "Morris Greenberg", "Rick Julian", "Matthew Zeleznik", "David Spargo", "Wallace Schultz", "Jeff Cook", "Jeffrey Nelson", "John Stardom", "Ed Liebfried", "Froilan Mendoza", "Jonathan Lindh", "David Weisberg", "Deen Hergott", "Wes Eddings"},
		DivisionPairings: []*pb.RoundPairings{
			{Pairings: []int32{25, 21, 24, 23, 27, 26, 22, 14, 18, 15, 19, 16, 17, 20, 7, 9, 11, 12, 8, 10, 13, 1, 6, 3, 2, 0, 5, 4}},
			{Pairings: []int32{15, 18, 16, 14, 19, 20, 17, 23, 21, 25, 27, 24, 22, 26, 3, 0, 2, 6, 1, 4, 5, 8, 12, 7, 11, 9, 13, 10}},
			{Pairings: []int32{9, 8, 11, 7, 10, 13, 12, 3, 1, 0, 4, 2, 6, 5, 23, 25, 24, 22, 21, 27, 26, 18, 17, 14, 16, 15, 20, 19}},
			{Pairings: []int32{27, 20, 9, 22, 8, 21, 23, 18, 4, 2, 24, 25, 14, 15, 12, 13, 26, 19, 7, 17, 1, 5, 3, 6, 10, 11, 16, 0}},
			{Pairings: []int32{5, 3, 21, 1, 7, 0, 18, 4, 14, 24, 11, 10, 19, 16, 8, 26, 13, 23, 6, 12, 22, 2, 20, 17, 9, 27, 15, 25}},
			{Pairings: []int32{22, 24, 10, 20, 23, 6, 5, 17, 12, 18, 2, 21, 8, 14, 13, 16, 15, 7, 9, 25, 3, 11, 0, 4, 1, 19, 27, 26}},
			{Pairings: []int32{20, 25, 18, 21, 6, 12, 4, 13, 19, 10, 9, 22, 5, 7, 16, 23, 14, 26, 2, 8, 0, 3, 11, 15, 27, 1, 17, 24}},
			{Pairings: []int32{18, 2, 1, 25, 17, 24, 8, 12, 6, 20, 16, 27, 7, 23, 15, 14, 10, 4, 0, 26, 9, 22, 21, 13, 5, 3, 19, 11}},
			{Pairings: []int32{17, 22, 27, 5, 20, 3, 10, 15, 11, 23, 6, 8, 18, 19, 26, 7, 21, 0, 12, 13, 4, 16, 1, 9, 25, 24, 14, 2}},
			{Pairings: []int32{10, 11, 22, 27, 18, 17, 13, 26, 9, 8, 0, 1, 16, 6, 24, 20, 12, 5, 4, 23, 15, 25, 2, 19, 14, 21, 7, 3}},
			{Pairings: []int32{4, 9, 12, 8, 0, 7, 14, 5, 3, 1, 17, 20, 2, 25, 6, 24, 22, 10, 19, 18, 11, 27, 16, 26, 15, 13, 23, 21}},
			{Pairings: []int32{2, 5, 0, 10, 25, 1, 15, 21, 20, 26, 3, 18, 27, 17, 19, 6, 23, 13, 11, 14, 8, 7, 24, 16, 22, 4, 9, 12}},
			{Pairings: []int32{21, 4, 3, 2, 1, 22, 26, 11, 16, 14, 18, 7, 24, 27, 9, 19, 8, 20, 10, 15, 17, 0, 5, 25, 12, 23, 6, 13}},
		},
		DivisionResults: []*pb.RoundResults{
			{Results: []int32{331, 415, 387, 353, 403, 573, 391, 367, 335, 462, 427, 387, 360, 404, 462, 373, 336, 398, 525, 327, 433, 457, 476, 320, 481, 423, 408, 434}},
			{Results: []int32{496, 404, 442, 478, 342, 382, 414, 431, 491, 469, 512, 474, 375, 381, 265, 301, 423, 409, 358, 356, 485, 337, 392, 424, 359, 457, 388, 421}},
			{Results: []int32{385, 506, 512, 499, 450, 437, 418, 430, 346, 344, 359, 340, 485, 416, 286, 410, 405, 425, 377, 316, 598, 397, 447, 512, 412, 463, 406, 440}},
			{Results: []int32{463, 395, 547, 411, 331, 360, 504, 340, 418, 391, 423, 501, 405, 337, 383, 351, 311, 356, 456, 366, 463, 417, 414, 470, 361, 371, 508, 298}},
			{Results: []int32{489, 374, 384, 408, 364, 330, 386, 362, 562, 437, 402, 485, 365, 406, 368, 448, 442, 400, 453, 422, 318, 428, 445, 384, 416, 418, 402, 272}},
			{Results: []int32{451, 356, 550, 388, 458, 473, 383, 413, 315, 407, 386, 365, 470, 396, 460, 398, 419, 434, 408, 381, 364, 349, 413, 349, 402, 414, 397, 441}},
			{Results: []int32{452, 472, 530, 493, 335, 409, 453, 480, 372, 435, 448, 478, 405, 341, 406, 327, 420, 444, 328, 366, 304, 340, 436, 467, 360, 338, 343, 452}},
			{Results: []int32{368, 412, 366, 412, 426, 400, 390, 364, 436, 438, 441, 332, 380, 466, 341, 413, 410, 266, 484, 484, 357, 557, 337, 387, 383, 400, 405, 474}},
			{Results: []int32{344, 487, 440, 412, 462, 338, 364, 466, 419, 341, 496, 373, 460, 475, 433, 411, 411, 529, 416, 363, 460, 441, 426, 398, 444, 335, 426, 370}},
			{Results: []int32{389, 534, 392, 481, 438, 463, 378, 553, 439, 434, 515, 382, 299, 478, 392, 380, 464, 422, 436, 365, 465, 350, 394, 365, 359, 422, 326, 412}},
			{Results: []int32{430, 582, 470, 460, 436, 395, 417, 426, 385, 327, 513, 473, 327, 321, 356, 368, 437, 341, 398, 398, 341, 415, 374, 385, 379, 297, 365, 350}},
			{Results: []int32{383, 465, 392, 458, 415, 385, 448, 458, 459, 443, 328, 395, 441, 480, 578, 324, 437, 431, 423, 387, 419, 412, 391, 335, 414, 341, 386, 384}},
			{Results: []int32{526, 429, 340, 437, 478, 398, 325, 357, 529, 491, 465, 299, 435, 364, 429, 429, 385, 442, 434, 319, 362, 306, 510, 347, 338, 368, 421, 301}},
		},
		PlayerClasses:              []int32{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		ClassPrizes:                []int32{2},
		GibsonSpread:               200,
		ControlLossThreshold:       0.25,
		HopefulnessThreshold:       0.02,
		PlacePrizes:                2,
		DivisionSims:               1000,
		ControlLossSims:            1000,
		ControlLossActivationRound: 15,
		AllowRepeatByes:            false,
	}
	return request
}

func CreateAlbanyCSWAfterRound24PairRequest() *pb.PairRequest {
	request := &pb.PairRequest{
		PairMethod:   pb.PairMethod_COP,
		AllPlayers:   30,
		ValidPlayers: 30,
		Rounds:       27,
		PlayerNames:  []string{"Wellington Jighere", "Adam Logan", "Will Anderson", "Dennis Ikekeregor", "Austin Shin", "Matthew O'Connor", "Chris Lipe", "Joshua Castellano", "Josh Sokol", "Jason Keller", "Ben Schoenbrun", "Erickson Smith", "Bright Idahosa", "Robert Linn", "Jason Ubeika", "Tim Weiss", "Richard Buck", "Anthony Ikolo", "Daniel Blake", "Terry Kang", "Carmel Dodd", "Niel Gan", "Steve Ozorio", "Thomas Stumpf", "Joe Roberdeau", "Cheryl Melvin", "Iliana Filby", "Ivan Sentongo", "Edgar Odongkara", "Mohamed Kamara"},
		DivisionPairings: []*pb.RoundPairings{
			{Pairings: []int32{25, 20, 26, 22, 21, 13, 23, 24, 27, 29, 15, 17, 19, 5, 18, 10, 28, 11, 14, 12, 1, 4, 3, 6, 7, 0, 2, 8, 16, 9}},
			{Pairings: []int32{29, 19, 14, 16, 17, 18, 15, 27, 24, 25, 23, 21, 20, 26, 2, 6, 3, 4, 5, 1, 12, 11, 28, 10, 8, 9, 13, 7, 22, 0}},
			{Pairings: []int32{9, 12, 5, 28, 11, 2, 10, 8, 7, 0, 6, 4, 1, 14, 13, 23, 22, 21, 26, 20, 19, 17, 16, 15, 27, 29, 18, 24, 3, 25}},
			{Pairings: []int32{4, 13, 28, 17, 0, 16, 7, 6, 12, 10, 9, 18, 8, 1, 24, 26, 5, 3, 11, 27, 29, 25, 23, 22, 14, 21, 15, 19, 2, 20}},
			{Pairings: []int32{11, 2, 1, 9, 20, 28, 17, 23, 10, 3, 8, 0, 22, 18, 16, 29, 14, 6, 13, 24, 4, 27, 12, 7, 19, 26, 25, 21, 5, 15}},
			{Pairings: []int32{3, 10, 8, 0, 23, 6, 5, 17, 2, 11, 1, 9, 24, 20, 25, 27, 26, 7, 28, 29, 13, 22, 21, 4, 12, 14, 16, 15, 18, 19}},
			{Pairings: []int32{1, 0, 7, 10, 18, 23, 8, 2, 6, 28, 3, 12, 11, 17, 26, 20, 25, 13, 4, 21, 15, 19, 24, 5, 22, 16, 14, 29, 9, 27}},
			{Pairings: []int32{6, 3, 11, 1, 28, 29, 0, 10, 20, 19, 7, 2, 14, 23, 12, 21, 24, 18, 17, 9, 8, 15, 26, 13, 16, 27, 22, 25, 4, 5}},
			{Pairings: []int32{10, 6, 4, 7, 2, 19, 1, 3, 14, 12, 0, 28, 9, 24, 8, 18, 23, 29, 15, 5, 21, 20, 25, 16, 13, 22, 27, 26, 11, 17}},
			{Pairings: []int32{7, 28, 12, 6, 8, 21, 3, 0, 4, 15, 11, 10, 2, 16, 29, 9, 13, 20, 19, 18, 17, 5, 27, 26, 25, 24, 23, 22, 1, 14}},
			{Pairings: []int32{12, 8, 17, 11, 6, 27, 4, 15, 1, 14, 28, 3, 0, 19, 9, 7, 20, 2, 21, 13, 16, 18, 29, 25, 26, 23, 24, 5, 10, 22}},
			{Pairings: []int32{15, 11, 20, 4, 3, 22, 28, 29, 17, 13, 12, 1, 10, 9, 27, 0, 18, 8, 16, 25, 2, 26, 5, 24, 23, 19, 21, 14, 6, 7}},
			{Pairings: []int32{28, 15, 29, 12, 10, 25, 11, 13, 9, 8, 4, 6, 3, 7, 23, 1, 17, 16, 22, 26, 27, 24, 18, 14, 21, 5, 19, 20, 0, 2}},
			{Pairings: []int32{8, 16, 3, 2, 7, 11, 20, 4, 0, 24, 17, 5, 13, 12, 22, 19, 1, 10, 25, 15, 6, 23, 14, 21, 9, 18, 29, 28, 27, 26}},
			{Pairings: []int32{2, 17, 0, 13, 15, 7, 9, 5, 11, 6, 20, 8, 16, 3, 28, 4, 12, 1, 24, 22, 10, 29, 19, 27, 18, 26, 25, 23, 14, 21}},
			{Pairings: []int32{13, 7, 10, 29, 27, 17, 28, 1, 16, 26, 2, 22, 15, 0, 21, 12, 8, 5, 20, 23, 18, 14, 11, 19, 25, 24, 9, 4, 6, 3}},
			{Pairings: []int32{5, 20, 6, 18, 10, 0, 2, 11, 29, 22, 4, 7, 28, 21, 19, 16, 15, 27, 3, 14, 1, 13, 9, 25, 26, 23, 24, 17, 12, 8}},
			{Pairings: []int32{10, 4, 27, 14, 1, 12, 20, 28, 15, 17, 0, 19, 5, 25, 3, 8, 21, 9, 23, 11, 6, 16, 26, 18, 29, 13, 22, 2, 7, 24}},
			{Pairings: []int32{20, 2, 1, 24, 9, 26, 27, 10, 18, 4, 7, 14, 17, 22, 11, 28, 19, 12, 8, 16, 0, 25, 13, 29, 3, 21, 5, 6, 15, 23}},
			{Pairings: []int32{17, 9, 10, 21, 12, 14, 18, 20, 13, 1, 2, 24, 4, 8, 5, 22, 27, 0, 6, 25, 7, 3, 15, 26, 11, 19, 23, 16, 29, 28}},
			{Pairings: []int32{18, 5, 9, 23, 7, 1, 12, 4, 10, 2, 8, 27, 6, 28, 20, 24, 29, 19, 0, 17, 14, 26, 25, 3, 15, 22, 21, 11, 13, 16}},
			{Pairings: []int32{4, 10, 18, 19, 0, 8, 7, 6, 5, 27, 1, 13, 29, 11, 17, 25, 26, 14, 2, 3, 28, 24, 23, 22, 21, 15, 16, 9, 20, 12}},
			{Pairings: []int32{1, 0, 13, 20, 5, 4, 10, 9, 28, 7, 6, 26, 27, 2, 15, 14, 25, 24, 29, 23, 3, 22, 21, 19, 17, 16, 11, 12, 8, 18}},
			{Pairings: []int32{6, 18, 14, 27, 10, 9, 0, 12, 21, 5, 4, 29, 7, 15, 2, 13, 23, 28, 1, 26, 25, 8, 24, 16, 22, 20, 19, 3, 17, 11}},
		},
		DivisionResults: []*pb.RoundResults{
			{Results: []int32{509, 431, 503, 426, 438, 454, 152, 533, 466, 506, 443, 219, 413, 487, 373, 399, 382, 503, 552, 404, 366, 379, 392, 405, 327, 356, 371, 356, 437, 345}},
			{Results: []int32{533, 428, 521, 423, 479, 503, 444, 435, 514, 526, 453, 459, 397, 554, 321, 427, 423, 405, 406, 352, 392, 431, 408, 382, 389, 325, 437, 353, 421, 356}},
			{Results: []int32{600, 486, 448, 432, 363, 406, 420, 407, 469, 506, 483, 495, 358, 409, 426, 370, 397, 401, 424, 421, 474, 309, 440, 388, 385, 349, 411, 451, 394, 506}},
			{Results: []int32{429, 493, 491, 397, 329, 515, 424, 390, 527, 356, 415, 578, 344, 392, 417, 464, 350, 305, 342, 474, 520, 498, 381, 458, 462, 246, 354, 402, 364, 421}},
			{Results: []int32{595, 439, 375, 494, 436, 349, 564, 523, 361, 462, 595, 408, 460, 465, 485, 415, 389, 466, 490, 480, 355, 493, 416, 272, 325, 304, 396, 253, 436, 338}},
			{Results: []int32{481, 368, 475, 361, 497, 340, 497, 448, 426, 422, 474, 469, 494, 357, 552, 437, 460, 414, 431, 379, 436, 419, 397, 446, 360, 412, 369, 423, 531, 465}},
			{Results: []int32{681, 503, 423, 575, 467, 556, 444, 478, 413, 380, 646, 425, 337, 391, 444, 410, 499, 505, 294, 407, 442, 395, 323, 296, 414, 372, 367, 421, 497, 489}},
			{Results: []int32{436, 409, 326, 342, 365, 411, 378, 425, 447, 482, 428, 506, 443, 400, 314, 505, 564, 523, 380, 461, 378, 372, 415, 358, 448, 442, 351, 483, 494, 523}},
			{Results: []int32{405, 454, 389, 436, 494, 321, 392, 422, 553, 426, 492, 522, 443, 461, 419, 545, 429, 482, 374, 471, 422, 319, 404, 364, 283, 367, 393, 490, 469, 338}},
			{Results: []int32{521, 327, 439, 395, 506, 424, 474, 479, 466, 410, 519, 360, 469, 412, 494, 430, 449, 472, 469, 440, 317, 368, 340, 352, 463, 277, 490, 450, 564, 422}},
			{Results: []int32{523, 447, 474, 470, 393, 436, 452, 333, 362, 407, 404, 364, 430, 474, 391, 387, 316, 417, 411, 327, 562, 366, 353, 416, 433, 448, 420, 598, 390, 445}},
			{Results: []int32{430, 495, 374, 386, 487, 481, 473, 554, 434, 350, 518, 343, 387, 379, 401, 386, 469, 442, 391, 441, 396, 448, 382, 419, 358, 377, 304, 408, 456, 353}},
			{Results: []int32{430, 476, 427, 383, 524, 480, 333, 466, 399, 460, 610, 473, 535, 441, 525, 311, 415, 424, 395, 479, 418, 427, 375, 367, 367, 264, 397, 409, 399, 406}},
			{Results: []int32{651, 490, 491, 481, 376, 524, 375, 537, 475, 420, 570, 409, 474, 492, 308, 572, 337, 375, 410, 343, 395, 364, 481, 369, 414, 373, 320, 456, 404, 428}},
			{Results: []int32{436, 362, 459, 442, 421, 389, 536, 437, 470, 401, 484, 364, 395, 401, 417, 412, 336, 513, 396, 382, 330, 310, 396, 409, 401, 402, 472, 511, 570, 499}},
			{Results: []int32{586, 581, 449, 399, 473, 383, 466, 312, 535, 537, 559, 499, 493, 327, 419, 437, 398, 381, 459, 424, 369, 377, 412, 363, 421, 372, 267, 377, 427, 441}},
			{Results: []int32{454, 412, 424, 373, 477, 383, 399, 475, 505, 465, 378, 392, 443, 416, 458, 398, 485, 487, 447, 440, 453, 315, 367, 370, 470, 414, 373, 493, 492, 292}},
			{Results: []int32{592, 325, 503, 503, 466, 429, 519, 355, 514, 494, 492, 460, 387, 545, 383, 375, 410, 326, 469, 422, 415, 413, 378, 404, 352, 303, 403, 373, 500, 496}},
			{Results: []int32{459, 450, 451, 397, 489, 594, 470, 451, 455, 438, 422, 357, 421, 360, 484, 449, 396, 435, 479, 569, 442, 533, 356, 420, 400, 321, 287, 341, 401, 487}},
			{Results: []int32{480, 469, 445, 476, 460, 407, 409, 437, 503, 498, 466, 507, 377, 401, 403, 375, 352, 313, 406, 465, 485, 330, 436, 410, 319, 379, 434, 438, 514, 422}},
			{Results: []int32{497, 390, 296, 585, 419, 417, 327, 438, 443, 595, 449, 337, 517, 526, 538, 379, 374, 338, 421, 326, 421, 507, 465, 333, 411, 398, 374, 502, 357, 426}},
			{Results: []int32{550, 376, 513, 596, 372, 473, 431, 366, 399, 422, 557, 457, 434, 364, 296, 396, 371, 538, 436, 354, 408, 509, 477, 350, 420, 313, 379, 306, 449, 386}},
			{Results: []int32{487, 288, 391, 407, 354, 429, 528, 542, 392, 464, 416, 482, 425, 400, 453, 337, 450, 458, 565, 479, 459, 463, 436, 339, 384, 341, 383, 400, 466, 308}},
			{Results: []int32{568, 492, 451, 482, 715, 403, 414, 464, 318, 393, 347, 443, 306, 334, 415, 499, 450, 320, 395, 410, 384, 417, 243, 293, 422, 386, 447, 464, 411, 430}},
		},
		PlayerClasses:              []int32{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		ClassPrizes:                []int32{2},
		GibsonSpread:               200,
		ControlLossThreshold:       0.25,
		HopefulnessThreshold:       0.02,
		PlacePrizes:                2,
		DivisionSims:               1000,
		ControlLossSims:            1000,
		ControlLossActivationRound: 27,
		AllowRepeatByes:            false,
	}
	return request
}

func CreateAlbanyCSWAfterRound24OddPairRequest() *pb.PairRequest {
	request := &pb.PairRequest{
		PairMethod:   pb.PairMethod_COP,
		AllPlayers:   30,
		ValidPlayers: 29,
		Rounds:       27,
		PlayerNames:  []string{"Wellington Jighere", "Adam Logan", "Will Anderson", "Dennis Ikekeregor", "Austin Shin", "Matthew O'Connor", "Chris Lipe", "Joshua Castellano", "Josh Sokol", "Jason Keller", "Ben Schoenbrun", "Erickson Smith", "Bright Idahosa", "Robert Linn", "Jason Ubeika", "Tim Weiss", "Richard Buck", "Anthony Ikolo", "Daniel Blake", "Terry Kang", "Carmel Dodd", "Niel Gan", "Steve Ozorio", "Thomas Stumpf", "Joe Roberdeau", "Cheryl Melvin", "Iliana Filby", "Ivan Sentongo", "Edgar Odongkara", "Mohamed Kamara"},
		DivisionPairings: []*pb.RoundPairings{
			{Pairings: []int32{25, 20, 26, 22, 21, 13, 23, 24, 27, 29, 15, 17, 19, 5, 18, 10, 28, 11, 14, 12, 1, 4, 3, 6, 7, 0, 2, 8, 16, 9}},
			{Pairings: []int32{29, 19, 14, 16, 17, 18, 15, 27, 24, 25, 23, 21, 20, 26, 2, 6, 3, 4, 5, 1, 12, 11, 28, 10, 8, 9, 13, 7, 22, 0}},
			{Pairings: []int32{9, 12, 5, 28, 11, 2, 10, 8, 7, 0, 6, 4, 1, 14, 13, 23, 22, 21, 26, 20, 19, 17, 16, 15, 27, 29, 18, 24, 3, 25}},
			{Pairings: []int32{4, 13, 28, 17, 0, 16, 7, 6, 12, 10, 9, 18, 8, 1, 24, 26, 5, 3, 11, 27, 29, 25, 23, 22, 14, 21, 15, 19, 2, 20}},
			{Pairings: []int32{11, 2, 1, 9, 20, 28, 17, 23, 10, 3, 8, 0, 22, 18, 16, 29, 14, 6, 13, 24, 4, 27, 12, 7, 19, 26, 25, 21, 5, 15}},
			{Pairings: []int32{3, 10, 8, 0, 23, 6, 5, 17, 2, 11, 1, 9, 24, 20, 25, 27, 26, 7, 28, 29, 13, 22, 21, 4, 12, 14, 16, 15, 18, 19}},
			{Pairings: []int32{1, 0, 7, 10, 18, 23, 8, 2, 6, 28, 3, 12, 11, 17, 26, 20, 25, 13, 4, 21, 15, 19, 24, 5, 22, 16, 14, 29, 9, 27}},
			{Pairings: []int32{6, 3, 11, 1, 28, 29, 0, 10, 20, 19, 7, 2, 14, 23, 12, 21, 24, 18, 17, 9, 8, 15, 26, 13, 16, 27, 22, 25, 4, 5}},
			{Pairings: []int32{10, 6, 4, 7, 2, 19, 1, 3, 14, 12, 0, 28, 9, 24, 8, 18, 23, 29, 15, 5, 21, 20, 25, 16, 13, 22, 27, 26, 11, 17}},
			{Pairings: []int32{7, 28, 12, 6, 8, 21, 3, 0, 4, 15, 11, 10, 2, 16, 29, 9, 13, 20, 19, 18, 17, 5, 27, 26, 25, 24, 23, 22, 1, 14}},
			{Pairings: []int32{12, 8, 17, 11, 6, 27, 4, 15, 1, 14, 28, 3, 0, 19, 9, 7, 20, 2, 21, 13, 16, 18, 29, 25, 26, 23, 24, 5, 10, 22}},
			{Pairings: []int32{15, 11, 20, 4, 3, 22, 28, 29, 17, 13, 12, 1, 10, 9, 27, 0, 18, 8, 16, 25, 2, 26, 5, 24, 23, 19, 21, 14, 6, 7}},
			{Pairings: []int32{28, 15, 29, 12, 10, 25, 11, 13, 9, 8, 4, 6, 3, 7, 23, 1, 17, 16, 22, 26, 27, 24, 18, 14, 21, 5, 19, 20, 0, 2}},
			{Pairings: []int32{8, 16, 3, 2, 7, 11, 20, 4, 0, 24, 17, 5, 13, 12, 22, 19, 1, 10, 25, 15, 6, 23, 14, 21, 9, 18, 29, 28, 27, 26}},
			{Pairings: []int32{2, 17, 0, 13, 15, 7, 9, 5, 11, 6, 20, 8, 16, 3, 28, 4, 12, 1, 24, 22, 10, 29, 19, 27, 18, 26, 25, 23, 14, 21}},
			{Pairings: []int32{13, 7, 10, 29, 27, 17, 28, 1, 16, 26, 2, 22, 15, 0, 21, 12, 8, 5, 20, 23, 18, 14, 11, 19, 25, 24, 9, 4, 6, 3}},
			{Pairings: []int32{5, 20, 6, 18, 10, 0, 2, 11, 29, 22, 4, 7, 28, 21, 19, 16, 15, 27, 3, 14, 1, 13, 9, 25, 26, 23, 24, 17, 12, 8}},
			{Pairings: []int32{10, 4, 27, 14, 1, 12, 20, 28, 15, 17, 0, 19, 5, 25, 3, 8, 21, 9, 23, 11, 6, 16, 26, 18, 29, 13, 22, 2, 7, 24}},
			{Pairings: []int32{20, 2, 1, 24, 9, 26, 27, 10, 18, 4, 7, 14, 17, 22, 11, 28, 19, 12, 8, 16, 0, 25, 13, 29, 3, 21, 5, 6, 15, 23}},
			{Pairings: []int32{17, 9, 10, 21, 12, 14, 18, 20, 13, 1, 2, 24, 4, 8, 5, 22, 27, 0, 6, 25, 7, 3, 15, 26, 11, 19, 23, 16, 29, 28}},
			{Pairings: []int32{18, 5, 9, 23, 7, 1, 12, 4, 10, 2, 8, 27, 6, 28, 20, 24, 29, 19, 0, 17, 14, 26, 25, 3, 15, 22, 21, 11, 13, 16}},
			{Pairings: []int32{4, 10, 18, 19, 0, 8, 7, 6, 5, 27, 1, 13, 29, 11, 17, 25, 26, 14, 2, 3, 28, 24, 23, 22, 21, 15, 16, 9, 20, 12}},
			{Pairings: []int32{1, 0, 13, 20, 5, 4, 10, 9, 28, 7, 6, 26, 27, 2, 15, 14, 25, 24, 29, 23, 3, 22, 21, 19, 17, 16, 11, 12, 8, 18}},
			{Pairings: []int32{6, 18, 14, 27, 10, 9, 0, 12, 21, 5, 4, 29, 7, 15, 2, 13, 23, 28, 1, 26, 25, 8, 24, 16, 22, 20, 19, 3, 17, 11}},
		},
		DivisionResults: []*pb.RoundResults{
			{Results: []int32{509, 431, 503, 426, 438, 454, 152, 533, 466, 506, 443, 219, 413, 487, 373, 399, 382, 503, 552, 404, 366, 379, 392, 405, 327, 356, 371, 356, 437, 345}},
			{Results: []int32{533, 428, 521, 423, 479, 503, 444, 435, 514, 526, 453, 459, 397, 554, 321, 427, 423, 405, 406, 352, 392, 431, 408, 382, 389, 325, 437, 353, 421, 356}},
			{Results: []int32{600, 486, 448, 432, 363, 406, 420, 407, 469, 506, 483, 495, 358, 409, 426, 370, 397, 401, 424, 421, 474, 309, 440, 388, 385, 349, 411, 451, 394, 506}},
			{Results: []int32{429, 493, 491, 397, 329, 515, 424, 390, 527, 356, 415, 578, 344, 392, 417, 464, 350, 305, 342, 474, 520, 498, 381, 458, 462, 246, 354, 402, 364, 421}},
			{Results: []int32{595, 439, 375, 494, 436, 349, 564, 523, 361, 462, 595, 408, 460, 465, 485, 415, 389, 466, 490, 480, 355, 493, 416, 272, 325, 304, 396, 253, 436, 338}},
			{Results: []int32{481, 368, 475, 361, 497, 340, 497, 448, 426, 422, 474, 469, 494, 357, 552, 437, 460, 414, 431, 379, 436, 419, 397, 446, 360, 412, 369, 423, 531, 465}},
			{Results: []int32{681, 503, 423, 575, 467, 556, 444, 478, 413, 380, 646, 425, 337, 391, 444, 410, 499, 505, 294, 407, 442, 395, 323, 296, 414, 372, 367, 421, 497, 489}},
			{Results: []int32{436, 409, 326, 342, 365, 411, 378, 425, 447, 482, 428, 506, 443, 400, 314, 505, 564, 523, 380, 461, 378, 372, 415, 358, 448, 442, 351, 483, 494, 523}},
			{Results: []int32{405, 454, 389, 436, 494, 321, 392, 422, 553, 426, 492, 522, 443, 461, 419, 545, 429, 482, 374, 471, 422, 319, 404, 364, 283, 367, 393, 490, 469, 338}},
			{Results: []int32{521, 327, 439, 395, 506, 424, 474, 479, 466, 410, 519, 360, 469, 412, 494, 430, 449, 472, 469, 440, 317, 368, 340, 352, 463, 277, 490, 450, 564, 422}},
			{Results: []int32{523, 447, 474, 470, 393, 436, 452, 333, 362, 407, 404, 364, 430, 474, 391, 387, 316, 417, 411, 327, 562, 366, 353, 416, 433, 448, 420, 598, 390, 445}},
			{Results: []int32{430, 495, 374, 386, 487, 481, 473, 554, 434, 350, 518, 343, 387, 379, 401, 386, 469, 442, 391, 441, 396, 448, 382, 419, 358, 377, 304, 408, 456, 353}},
			{Results: []int32{430, 476, 427, 383, 524, 480, 333, 466, 399, 460, 610, 473, 535, 441, 525, 311, 415, 424, 395, 479, 418, 427, 375, 367, 367, 264, 397, 409, 399, 406}},
			{Results: []int32{651, 490, 491, 481, 376, 524, 375, 537, 475, 420, 570, 409, 474, 492, 308, 572, 337, 375, 410, 343, 395, 364, 481, 369, 414, 373, 320, 456, 404, 428}},
			{Results: []int32{436, 362, 459, 442, 421, 389, 536, 437, 470, 401, 484, 364, 395, 401, 417, 412, 336, 513, 396, 382, 330, 310, 396, 409, 401, 402, 472, 511, 570, 499}},
			{Results: []int32{586, 581, 449, 399, 473, 383, 466, 312, 535, 537, 559, 499, 493, 327, 419, 437, 398, 381, 459, 424, 369, 377, 412, 363, 421, 372, 267, 377, 427, 441}},
			{Results: []int32{454, 412, 424, 373, 477, 383, 399, 475, 505, 465, 378, 392, 443, 416, 458, 398, 485, 487, 447, 440, 453, 315, 367, 370, 470, 414, 373, 493, 492, 292}},
			{Results: []int32{592, 325, 503, 503, 466, 429, 519, 355, 514, 494, 492, 460, 387, 545, 383, 375, 410, 326, 469, 422, 415, 413, 378, 404, 352, 303, 403, 373, 500, 496}},
			{Results: []int32{459, 450, 451, 397, 489, 594, 470, 451, 455, 438, 422, 357, 421, 360, 484, 449, 396, 435, 479, 569, 442, 533, 356, 420, 400, 321, 287, 341, 401, 487}},
			{Results: []int32{480, 469, 445, 476, 460, 407, 409, 437, 503, 498, 466, 507, 377, 401, 403, 375, 352, 313, 406, 465, 485, 330, 436, 410, 319, 379, 434, 438, 514, 422}},
			{Results: []int32{497, 390, 296, 585, 419, 417, 327, 438, 443, 595, 449, 337, 517, 526, 538, 379, 374, 338, 421, 326, 421, 507, 465, 333, 411, 398, 374, 502, 357, 426}},
			{Results: []int32{550, 376, 513, 596, 372, 473, 431, 366, 399, 422, 557, 457, 434, 364, 296, 396, 371, 538, 436, 354, 408, 509, 477, 350, 420, 313, 379, 306, 449, 386}},
			{Results: []int32{487, 288, 391, 407, 354, 429, 528, 542, 392, 464, 416, 482, 425, 400, 453, 337, 450, 458, 565, 479, 459, 463, 436, 339, 384, 341, 383, 400, 466, 308}},
			{Results: []int32{568, 492, 451, 482, 715, 403, 414, 464, 318, 393, 347, 443, 306, 334, 415, 499, 450, 320, 395, 410, 384, 417, 243, 293, 422, 386, 447, 464, 411, 430}},
		},
		PlayerClasses:              []int32{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		ClassPrizes:                []int32{2},
		GibsonSpread:               200,
		ControlLossThreshold:       0.25,
		HopefulnessThreshold:       0.02,
		PlacePrizes:                2,
		DivisionSims:               1000,
		ControlLossSims:            1000,
		ControlLossActivationRound: 27,
		AllowRepeatByes:            false,
		RemovedPlayers:             []int32{0},
	}
	return request
}

func CreateAlbany3rdGibsonizedAfterRound25PairRequest() *pb.PairRequest {
	request := &pb.PairRequest{
		PairMethod:   pb.PairMethod_COP,
		AllPlayers:   24,
		ValidPlayers: 23,
		Rounds:       27,
		PlayerNames:  []string{"Joey Krafchick", "Christopher Sykes", "Andy Hoang", "Robin Pollock Daniel", "Zachary Ansell", "Billy Nakamura", "David Spargo", "Wes Eddings", "Wallace Schultz", "Eric Goldstein", "Jonathan Lindh", "Chris Kulig", "Annette Obrestad", "Joel Horn", "Michael Ecsedy", "Richard Popper", "Edwin Roth", "Michael Fleck", "David Firstman", "Noah Kalus", "Noah Goldstein", "Carol McDonald", "David Postal", "Vera Bigall"},
		DivisionPairings: []*pb.RoundPairings{
			{Pairings: []int32{23, 2, 1, 4, 3, 6, 5, 8, 7, 10, 9, 12, 11, 14, 13, 16, 15, 18, 17, 20, 19, 22, 21, 0}},
			{Pairings: []int32{22, 3, 5, 1, 7, 2, 9, 4, 11, 6, 13, 8, 15, 10, 17, 12, 19, 14, 21, 16, 23, 18, 0, 20}},
			{Pairings: []int32{21, 6, 4, 8, 2, 10, 1, 12, 3, 14, 5, 16, 7, 18, 9, 20, 11, 22, 13, 23, 15, 0, 17, 19}},
			{Pairings: []int32{20, 7, 9, 5, 11, 3, 13, 1, 15, 2, 17, 4, 19, 6, 21, 8, 23, 10, 22, 12, 0, 14, 18, 16}},
			{Pairings: []int32{19, 10, 8, 12, 6, 14, 4, 16, 2, 18, 1, 20, 3, 22, 5, 23, 7, 21, 9, 0, 11, 17, 13, 15}},
			{Pairings: []int32{18, 11, 13, 9, 15, 7, 17, 5, 19, 3, 21, 1, 23, 2, 22, 4, 20, 6, 0, 8, 16, 10, 14, 12}},
			{Pairings: []int32{17, 14, 12, 16, 10, 18, 8, 20, 6, 22, 4, 23, 2, 21, 1, 19, 3, 0, 5, 15, 7, 13, 9, 11}},
			{Pairings: []int32{16, 15, 17, 13, 19, 11, 21, 9, 23, 7, 22, 5, 20, 3, 18, 1, 0, 2, 14, 4, 12, 6, 10, 8}},
			{Pairings: []int32{15, 18, 16, 20, 14, 22, 12, 23, 10, 21, 8, 19, 6, 17, 4, 0, 2, 13, 1, 11, 3, 9, 5, 7}},
			{Pairings: []int32{14, 19, 21, 17, 23, 15, 22, 13, 20, 9, 18, 11, 16, 7, 0, 5, 12, 3, 10, 1, 8, 2, 6, 4}},
			{Pairings: []int32{13, 22, 20, 23, 18, 21, 16, 19, 14, 17, 12, 11, 10, 0, 8, 15, 6, 9, 4, 7, 2, 5, 1, 3}},
			{Pairings: []int32{12, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 11, 0, 13, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1}},
			{Pairings: []int32{0, 21, 23, 19, 22, 17, 20, 15, 18, 13, 16, 11, 14, 9, 12, 7, 10, 5, 8, 3, 6, 1, 4, 2}},
			{Pairings: []int32{10, 20, 18, 22, 16, 23, 14, 21, 12, 19, 0, 11, 8, 15, 6, 13, 4, 17, 2, 9, 1, 7, 3, 5}},
			{Pairings: []int32{9, 17, 19, 15, 21, 13, 23, 7, 22, 0, 20, 11, 18, 5, 16, 3, 14, 1, 12, 2, 10, 4, 8, 6}},
			{Pairings: []int32{8, 16, 14, 18, 12, 20, 10, 7, 0, 23, 6, 11, 4, 19, 2, 17, 1, 15, 3, 13, 5, 21, 22, 9}},
			{Pairings: []int32{0, 13, 15, 3, 17, 9, 19, 7, 21, 5, 23, 11, 22, 1, 20, 2, 18, 4, 16, 6, 14, 8, 12, 10}},
			{Pairings: []int32{6, 12, 10, 14, 8, 16, 0, 7, 4, 20, 2, 11, 1, 23, 3, 21, 5, 19, 18, 17, 9, 15, 22, 13}},
			{Pairings: []int32{5, 9, 2, 7, 13, 0, 15, 3, 17, 1, 19, 11, 21, 4, 23, 6, 22, 8, 20, 10, 18, 12, 16, 14}},
			{Pairings: []int32{4, 8, 6, 10, 0, 12, 2, 14, 1, 16, 3, 11, 5, 20, 7, 22, 9, 23, 18, 21, 13, 19, 15, 17}},
			{Pairings: []int32{3, 5, 7, 0, 9, 1, 6, 2, 13, 4, 15, 11, 17, 8, 19, 10, 21, 12, 23, 14, 22, 16, 20, 18}},
			{Pairings: []int32{2, 4, 0, 6, 1, 8, 3, 10, 5, 12, 7, 11, 9, 16, 14, 18, 13, 20, 15, 22, 17, 23, 19, 21}},
			{Pairings: []int32{1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 10, 11, 13, 12, 15, 14, 17, 16, 19, 18, 21, 20, 23, 22}},
			{Pairings: []int32{2, 4, 0, 22, 1, 8, 12, 18, 5, 15, 16, 11, 6, 14, 13, 9, 10, 19, 7, 17, 20, 23, 3, 21}},
			{Pairings: []int32{1, 0, 4, 14, 2, 9, 15, 22, 12, 5, 13, 11, 8, 10, 3, 6, 18, 23, 16, 19, 21, 20, 7, 17}},
		},
		DivisionResults: []*pb.RoundResults{
			{Results: []int32{471, 394, 302, 395, 411, 428, 477, 354, 476, 359, 536, 392, 432, 396, 351, 332, 461, 414, 404, 271, 418, 428, 358, 284}},
			{Results: []int32{501, 451, 504, 431, 442, 360, 361, 354, 387, 465, 410, 362, 434, 399, 503, 412, 536, 356, 368, 305, 374, 429, 269, 410}},
			{Results: []int32{428, 418, 405, 435, 511, 378, 339, 382, 445, 434, 360, 400, 392, 414, 349, 428, 411, 569, 444, 398, 359, 307, 290, 306}},
			{Results: []int32{382, 443, 374, 390, 558, 431, 410, 313, 421, 367, 393, 365, 447, 290, 388, 436, 402, 280, 433, 303, 337, 316, 349, 378}},
			{Results: []int32{527, 452, 374, 471, 412, 361, 374, 470, 416, 448, 378, 344, 380, 339, 462, 404, 405, 385, 356, 327, 491, 369, 423, 401}},
			{Results: []int32{428, 475, 495, 459, 470, 432, 416, 432, 395, 411, 438, 319, 384, 311, 447, 341, 358, 336, 399, 439, 380, 332, 273, 446}},
			{Results: []int32{460, 527, 381, 422, 376, 347, 453, 278, 349, 422, 374, 435, 422, 400, 331, 430, 363, 283, 328, 412, 444, 464, 404, 352}},
			{Results: []int32{937, 389, 431, 324, 401, 525, 424, 402, 431, 437, 391, 319, 472, 381, 378, 381, 417, 284, 364, 370, 317, 360, 365, 388}},
			{Results: []int32{449, 368, 505, 403, 479, 374, 419, 411, 405, 480, 384, 265, 446, 387, 322, 411, 375, 393, 360, 480, 314, 363, 351, 442}},
			{Results: []int32{587, 581, 406, 429, 435, 437, 315, 425, 430, 50, 412, -50, 400, 414, 354, 316, 414, 389, 431, 201, 356, 401, 450, 285}},
			{Results: []int32{416, 500, 427, 435, 328, 357, 427, 453, 380, 469, 314, -50, 489, 389, 378, 50, 355, 293, 427, 436, 335, 379, 387, 291}},
			{Results: []int32{542, 399, 178, 464, 422, 491, 456, 474, 464, 430, 417, -50, 315, 50, 383, 509, 369, 284, 334, 312, 411, 335, 465, 383}},
			{Results: []int32{50, 454, 464, 453, 374, 451, 395, 414, 397, 392, 447, -50, 504, 345, 309, 422, 363, 385, 456, 429, 528, 315, 418, 390}},
			{Results: []int32{395, 406, 184, 330, 523, 370, 460, 439, 524, 414, 361, -50, 253, 405, 485, 572, 312, 50, 369, 395, 367, 390, 379, 419}},
			{Results: []int32{607, 484, 425, 393, 431, 401, 414, 50, 430, 347, 410, -50, 360, 370, 324, 490, 522, 290, 438, 402, 372, 372, 444, 377}},
			{Results: []int32{457, 404, 419, 368, 499, 396, 534, -50, 418, 442, 346, -50, 336, 432, 358, 420, 473, 405, 373, 287, 331, 50, 50, 431}},
			{Results: []int32{50, 355, 457, 50, 510, 399, 448, -50, 418, 374, 402, -50, 377, 312, 417, 354, 479, 263, 436, 421, 387, 373, 365, 418}},
			{Results: []int32{364, 443, 419, 410, 574, 420, 462, -50, 301, 403, 321, -50, 436, 443, 371, 386, 298, 399, 50, 421, 348, 355, 50, 346}},
			{Results: []int32{509, 408, 50, 335, 358, 345, 295, 546, 302, 297, 514, -50, 493, 329, 370, 397, 352, 501, 406, 308, 387, 424, 424, 461}},
			{Results: []int32{450, 348, 167, 432, 451, 656, 390, 256, 415, 389, 442, -50, 324, 437, 432, 387, 372, 398, 50, 418, 408, 415, 404, 280}},
			{Results: []int32{403, 438, 498, 304, 366, 350, 50, 374, 480, 416, 432, -50, 503, 317, 377, 373, 458, 429, 398, 345, 305, 399, 378, 321}},
			{Results: []int32{430, 467, 345, 378, 372, 350, 432, 363, 423, 372, 500, -50, 391, 448, 50, 498, 241, 389, 402, 431, 418, 452, 397, 384}},
			{Results: []int32{380, 445, 423, 396, 447, 418, 463, 531, 381, 456, 50, -50, 473, 337, 388, 410, 405, 367, 329, 392, 292, 450, 359, 498}},
			{Results: []int32{461, 556, 379, 379, 403, 450, 338, 465, 342, 431, 398, -50, 355, 421, 327, 366, 452, 439, 343, 365, 50, 360, 471, 530}},
			{Results: []int32{418, 346, 452, 480, 414, 320, 386, 319, 420, 481, 359, -50, 437, 398, 395, 451, 398, 475, 270, 50, 351, 423, 607, 371}},
		},
		PlayerClasses:              []int32{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		ClassPrizes:                []int32{2},
		GibsonSpread:               200,
		ControlLossThreshold:       0.25,
		HopefulnessThreshold:       0.02,
		PlacePrizes:                5,
		DivisionSims:               1000,
		ControlLossSims:            1000,
		ControlLossActivationRound: 27,
		AllowRepeatByes:            false,
		RemovedPlayers:             []int32{11},
	}
	return request
}

func CreateAlbany4thGibsonizedAfterRound25PairRequest() *pb.PairRequest {
	request := &pb.PairRequest{
		PairMethod:   pb.PairMethod_COP,
		AllPlayers:   24,
		ValidPlayers: 23,
		Rounds:       27,
		PlayerNames:  []string{"Joey Krafchick", "Christopher Sykes", "Andy Hoang", "Robin Pollock Daniel", "Zachary Ansell", "Billy Nakamura", "David Spargo", "Wes Eddings", "Wallace Schultz", "Eric Goldstein", "Jonathan Lindh", "Chris Kulig", "Annette Obrestad", "Joel Horn", "Michael Ecsedy", "Richard Popper", "Edwin Roth", "Michael Fleck", "David Firstman", "Noah Kalus", "Noah Goldstein", "Carol McDonald", "David Postal", "Vera Bigall"},
		DivisionPairings: []*pb.RoundPairings{
			{Pairings: []int32{23, 2, 1, 4, 3, 6, 5, 8, 7, 10, 9, 12, 11, 14, 13, 16, 15, 18, 17, 20, 19, 22, 21, 0}},
			{Pairings: []int32{22, 3, 5, 1, 7, 2, 9, 4, 11, 6, 13, 8, 15, 10, 17, 12, 19, 14, 21, 16, 23, 18, 0, 20}},
			{Pairings: []int32{21, 6, 4, 8, 2, 10, 1, 12, 3, 14, 5, 16, 7, 18, 9, 20, 11, 22, 13, 23, 15, 0, 17, 19}},
			{Pairings: []int32{20, 7, 9, 5, 11, 3, 13, 1, 15, 2, 17, 4, 19, 6, 21, 8, 23, 10, 22, 12, 0, 14, 18, 16}},
			{Pairings: []int32{19, 10, 8, 12, 6, 14, 4, 16, 2, 18, 1, 20, 3, 22, 5, 23, 7, 21, 9, 0, 11, 17, 13, 15}},
			{Pairings: []int32{18, 11, 13, 9, 15, 7, 17, 5, 19, 3, 21, 1, 23, 2, 22, 4, 20, 6, 0, 8, 16, 10, 14, 12}},
			{Pairings: []int32{17, 14, 12, 16, 10, 18, 8, 20, 6, 22, 4, 23, 2, 21, 1, 19, 3, 0, 5, 15, 7, 13, 9, 11}},
			{Pairings: []int32{16, 15, 17, 13, 19, 11, 21, 9, 23, 7, 22, 5, 20, 3, 18, 1, 0, 2, 14, 4, 12, 6, 10, 8}},
			{Pairings: []int32{15, 18, 16, 20, 14, 22, 12, 23, 10, 21, 8, 19, 6, 17, 4, 0, 2, 13, 1, 11, 3, 9, 5, 7}},
			{Pairings: []int32{14, 19, 21, 17, 23, 15, 22, 13, 20, 9, 18, 11, 16, 7, 0, 5, 12, 3, 10, 1, 8, 2, 6, 4}},
			{Pairings: []int32{13, 22, 20, 23, 18, 21, 16, 19, 14, 17, 12, 11, 10, 0, 8, 15, 6, 9, 4, 7, 2, 5, 1, 3}},
			{Pairings: []int32{12, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 11, 0, 13, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1}},
			{Pairings: []int32{0, 21, 23, 19, 22, 17, 20, 15, 18, 13, 16, 11, 14, 9, 12, 7, 10, 5, 8, 3, 6, 1, 4, 2}},
			{Pairings: []int32{10, 20, 18, 22, 16, 23, 14, 21, 12, 19, 0, 11, 8, 15, 6, 13, 4, 17, 2, 9, 1, 7, 3, 5}},
			{Pairings: []int32{9, 17, 19, 15, 21, 13, 23, 7, 22, 0, 20, 11, 18, 5, 16, 3, 14, 1, 12, 2, 10, 4, 8, 6}},
			{Pairings: []int32{8, 16, 14, 18, 12, 20, 10, 7, 0, 23, 6, 11, 4, 19, 2, 17, 1, 15, 3, 13, 5, 21, 22, 9}},
			{Pairings: []int32{0, 13, 15, 3, 17, 9, 19, 7, 21, 5, 23, 11, 22, 1, 20, 2, 18, 4, 16, 6, 14, 8, 12, 10}},
			{Pairings: []int32{6, 12, 10, 14, 8, 16, 0, 7, 4, 20, 2, 11, 1, 23, 3, 21, 5, 19, 18, 17, 9, 15, 22, 13}},
			{Pairings: []int32{5, 9, 2, 7, 13, 0, 15, 3, 17, 1, 19, 11, 21, 4, 23, 6, 22, 8, 20, 10, 18, 12, 16, 14}},
			{Pairings: []int32{4, 8, 6, 10, 0, 12, 2, 14, 1, 16, 3, 11, 5, 20, 7, 22, 9, 23, 18, 21, 13, 19, 15, 17}},
			{Pairings: []int32{3, 5, 7, 0, 9, 1, 6, 2, 13, 4, 15, 11, 17, 8, 19, 10, 21, 12, 23, 14, 22, 16, 20, 18}},
			{Pairings: []int32{2, 4, 0, 6, 1, 8, 3, 10, 5, 12, 7, 11, 9, 16, 14, 18, 13, 20, 15, 22, 17, 23, 19, 21}},
			{Pairings: []int32{1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 10, 11, 13, 12, 15, 14, 17, 16, 19, 18, 21, 20, 23, 22}},
			{Pairings: []int32{2, 4, 0, 22, 1, 8, 12, 18, 5, 15, 16, 11, 6, 14, 13, 9, 10, 19, 7, 17, 20, 23, 3, 21}},
			{Pairings: []int32{1, 0, 4, 14, 2, 9, 15, 22, 12, 5, 13, 11, 8, 10, 3, 6, 18, 23, 16, 19, 21, 20, 7, 17}},
		},
		DivisionResults: []*pb.RoundResults{
			{Results: []int32{471, 394, 302, 395, 411, 428, 477, 354, 476, 359, 536, 392, 432, 396, 351, 332, 461, 414, 404, 271, 418, 428, 358, 284}},
			{Results: []int32{501, 451, 504, 431, 442, 360, 361, 354, 387, 465, 410, 362, 434, 399, 503, 412, 536, 356, 368, 305, 374, 429, 269, 410}},
			{Results: []int32{428, 418, 405, 435, 511, 378, 339, 382, 445, 434, 360, 400, 392, 414, 349, 428, 411, 569, 444, 398, 359, 307, 290, 306}},
			{Results: []int32{382, 443, 374, 390, 558, 431, 410, 313, 421, 367, 393, 365, 447, 290, 388, 436, 402, 280, 433, 303, 337, 316, 349, 378}},
			{Results: []int32{527, 452, 374, 471, 412, 361, 374, 470, 416, 448, 378, 344, 380, 339, 462, 404, 405, 385, 356, 327, 491, 369, 423, 401}},
			{Results: []int32{428, 475, 495, 459, 470, 432, 416, 432, 395, 411, 438, 319, 384, 311, 447, 41, 358, 336, 399, 439, 380, 332, 273, 446}},
			{Results: []int32{460, 527, 381, 422, 376, 347, 453, 278, 149, 422, 374, 435, 422, 400, 331, 430, 363, 283, 328, 412, 444, 464, 404, 352}},
			{Results: []int32{337, 389, 431, 324, 401, 525, 424, 402, 431, 437, 391, 319, 272, 381, 378, 81, 417, 284, 364, 370, 317, 360, 365, 388}},
			{Results: []int32{449, 368, 505, 403, 479, 374, 419, 411, 405, 280, 384, 265, 446, 387, 322, 411, 375, 393, 360, 480, 314, 363, 351, 442}},
			{Results: []int32{587, 581, 406, 429, 435, 437, 315, 425, 430, 50, 412, -50, 400, 414, 354, 316, 414, 389, 431, 201, 356, 401, 450, 285}},
			{Results: []int32{416, 500, 427, 435, 828, 357, 427, 453, 180, 269, 314, -50, 489, 389, 378, 50, 355, 293, 427, 436, 335, 379, 387, 291}},
			{Results: []int32{542, 399, 378, 464, 422, 491, 456, 474, 464, 430, 417, -50, 315, 50, 383, 509, 369, 284, 334, 312, 411, 335, 465, 383}},
			{Results: []int32{50, 454, 464, 453, 874, 451, 395, 414, 397, 392, 447, -50, 504, 345, 309, 422, 363, 385, 456, 429, 528, 315, 418, 390}},
			{Results: []int32{395, 406, 384, 330, 523, 370, 460, 439, 524, 414, 361, -50, 253, 405, 485, 572, 312, 50, 369, 395, 367, 390, 379, 419}},
			{Results: []int32{607, 484, 425, 393, 431, 401, 414, 50, 430, 347, 410, -50, 360, 370, 324, 490, 522, 290, 438, 402, 372, 372, 444, 377}},
			{Results: []int32{457, 404, 419, 368, 499, 396, 534, -50, 418, 442, 346, -50, 336, 432, 358, 420, 473, 405, 373, 287, 331, 50, 50, 431}},
			{Results: []int32{50, 355, 457, 50, 510, 399, 448, -50, 418, 374, 402, -50, 377, 312, 417, 354, 479, 263, 436, 421, 387, 373, 365, 418}},
			{Results: []int32{364, 443, 419, 410, 574, 420, 462, -50, 301, 403, 321, -50, 436, 443, 371, 386, 298, 399, 50, 421, 348, 355, 50, 346}},
			{Results: []int32{509, 408, 50, 335, 358, 345, 295, 546, 302, 297, 514, -50, 493, 329, 370, 397, 352, 501, 406, 308, 387, 424, 424, 461}},
			{Results: []int32{450, 348, 367, 432, 451, 656, 390, 256, 415, 389, 442, -50, 324, 437, 432, 387, 372, 398, 50, 418, 408, 415, 404, 280}},
			{Results: []int32{403, 438, 498, 304, 366, 350, 50, 374, 480, 416, 432, -50, 503, 317, 377, 373, 458, 429, 398, 345, 305, 399, 378, 321}},
			{Results: []int32{430, 467, 345, 378, 372, 350, 432, 363, 423, 372, 500, -50, 391, 448, 50, 498, 241, 389, 402, 431, 418, 452, 397, 384}},
			{Results: []int32{380, 445, 423, 396, 447, 418, 463, 531, 381, 256, 50, -50, 473, 337, 388, 410, 405, 367, 329, 392, 292, 450, 359, 498}},
			{Results: []int32{461, 556, 379, 379, 403, 450, 338, 465, 342, 431, 398, -50, 355, 421, 327, 366, 452, 439, 343, 365, 50, 360, 471, 530}},
			{Results: []int32{418, 346, 452, 480, 414, 320, 386, 319, 420, 481, 359, -50, 437, 398, 395, 451, 398, 475, 270, 50, 351, 423, 607, 371}},
		},
		PlayerClasses:              []int32{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		ClassPrizes:                []int32{2},
		GibsonSpread:               200,
		ControlLossThreshold:       0.25,
		HopefulnessThreshold:       0.02,
		PlacePrizes:                6,
		DivisionSims:               1000,
		ControlLossSims:            1000,
		ControlLossActivationRound: 27,
		AllowRepeatByes:            false,
		RemovedPlayers:             []int32{11},
	}
	return request
}

func CreateAlbany1stAnd4thGibsonizedAfterRound25PairRequest() *pb.PairRequest {
	request := &pb.PairRequest{
		PairMethod:   pb.PairMethod_COP,
		AllPlayers:   24,
		ValidPlayers: 23,
		Rounds:       27,
		PlayerNames:  []string{"Joey Krafchick", "Christopher Sykes", "Andy Hoang", "Robin Pollock Daniel", "Zachary Ansell", "Billy Nakamura", "David Spargo", "Wes Eddings", "Wallace Schultz", "Eric Goldstein", "Jonathan Lindh", "Chris Kulig", "Annette Obrestad", "Joel Horn", "Michael Ecsedy", "Richard Popper", "Edwin Roth", "Michael Fleck", "David Firstman", "Noah Kalus", "Noah Goldstein", "Carol McDonald", "David Postal", "Vera Bigall"},
		DivisionPairings: []*pb.RoundPairings{
			{Pairings: []int32{23, 2, 1, 4, 3, 6, 5, 8, 7, 10, 9, 12, 11, 14, 13, 16, 15, 18, 17, 20, 19, 22, 21, 0}},
			{Pairings: []int32{22, 3, 5, 1, 7, 2, 9, 4, 11, 6, 13, 8, 15, 10, 17, 12, 19, 14, 21, 16, 23, 18, 0, 20}},
			{Pairings: []int32{21, 6, 4, 8, 2, 10, 1, 12, 3, 14, 5, 16, 7, 18, 9, 20, 11, 22, 13, 23, 15, 0, 17, 19}},
			{Pairings: []int32{20, 7, 9, 5, 11, 3, 13, 1, 15, 2, 17, 4, 19, 6, 21, 8, 23, 10, 22, 12, 0, 14, 18, 16}},
			{Pairings: []int32{19, 10, 8, 12, 6, 14, 4, 16, 2, 18, 1, 20, 3, 22, 5, 23, 7, 21, 9, 0, 11, 17, 13, 15}},
			{Pairings: []int32{18, 11, 13, 9, 15, 7, 17, 5, 19, 3, 21, 1, 23, 2, 22, 4, 20, 6, 0, 8, 16, 10, 14, 12}},
			{Pairings: []int32{17, 14, 12, 16, 10, 18, 8, 20, 6, 22, 4, 23, 2, 21, 1, 19, 3, 0, 5, 15, 7, 13, 9, 11}},
			{Pairings: []int32{16, 15, 17, 13, 19, 11, 21, 9, 23, 7, 22, 5, 20, 3, 18, 1, 0, 2, 14, 4, 12, 6, 10, 8}},
			{Pairings: []int32{15, 18, 16, 20, 14, 22, 12, 23, 10, 21, 8, 19, 6, 17, 4, 0, 2, 13, 1, 11, 3, 9, 5, 7}},
			{Pairings: []int32{14, 19, 21, 17, 23, 15, 22, 13, 20, 9, 18, 11, 16, 7, 0, 5, 12, 3, 10, 1, 8, 2, 6, 4}},
			{Pairings: []int32{13, 22, 20, 23, 18, 21, 16, 19, 14, 17, 12, 11, 10, 0, 8, 15, 6, 9, 4, 7, 2, 5, 1, 3}},
			{Pairings: []int32{12, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 11, 0, 13, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1}},
			{Pairings: []int32{0, 21, 23, 19, 22, 17, 20, 15, 18, 13, 16, 11, 14, 9, 12, 7, 10, 5, 8, 3, 6, 1, 4, 2}},
			{Pairings: []int32{10, 20, 18, 22, 16, 23, 14, 21, 12, 19, 0, 11, 8, 15, 6, 13, 4, 17, 2, 9, 1, 7, 3, 5}},
			{Pairings: []int32{9, 17, 19, 15, 21, 13, 23, 7, 22, 0, 20, 11, 18, 5, 16, 3, 14, 1, 12, 2, 10, 4, 8, 6}},
			{Pairings: []int32{8, 16, 14, 18, 12, 20, 10, 7, 0, 23, 6, 11, 4, 19, 2, 17, 1, 15, 3, 13, 5, 21, 22, 9}},
			{Pairings: []int32{0, 13, 15, 3, 17, 9, 19, 7, 21, 5, 23, 11, 22, 1, 20, 2, 18, 4, 16, 6, 14, 8, 12, 10}},
			{Pairings: []int32{6, 12, 10, 14, 8, 16, 0, 7, 4, 20, 2, 11, 1, 23, 3, 21, 5, 19, 18, 17, 9, 15, 22, 13}},
			{Pairings: []int32{5, 9, 2, 7, 13, 0, 15, 3, 17, 1, 19, 11, 21, 4, 23, 6, 22, 8, 20, 10, 18, 12, 16, 14}},
			{Pairings: []int32{4, 8, 6, 10, 0, 12, 2, 14, 1, 16, 3, 11, 5, 20, 7, 22, 9, 23, 18, 21, 13, 19, 15, 17}},
			{Pairings: []int32{3, 5, 7, 0, 9, 1, 6, 2, 13, 4, 15, 11, 17, 8, 19, 10, 21, 12, 23, 14, 22, 16, 20, 18}},
			{Pairings: []int32{2, 4, 0, 6, 1, 8, 3, 10, 5, 12, 7, 11, 9, 16, 14, 18, 13, 20, 15, 22, 17, 23, 19, 21}},
			{Pairings: []int32{1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 10, 11, 13, 12, 15, 14, 17, 16, 19, 18, 21, 20, 23, 22}},
			{Pairings: []int32{2, 4, 0, 22, 1, 8, 12, 18, 5, 15, 16, 11, 6, 14, 13, 9, 10, 19, 7, 17, 20, 23, 3, 21}},
			{Pairings: []int32{1, 0, 4, 14, 2, 9, 15, 22, 12, 5, 13, 11, 8, 10, 3, 6, 18, 23, 16, 19, 21, 20, 7, 17}},
		},
		DivisionResults: []*pb.RoundResults{
			{Results: []int32{471, 394, 302, 395, 411, 428, 477, 354, 476, 359, 536, 392, 432, 396, 351, 332, 461, 414, 404, 271, 418, 428, 358, 284}},
			{Results: []int32{501, 451, 504, 431, 442, 360, 361, 354, 387, 465, 410, 362, 434, 399, 503, 412, 536, 356, 368, 305, 374, 429, 269, 410}},
			{Results: []int32{428, 418, 405, 435, 511, 378, 339, 382, 445, 434, 360, 400, 392, 414, 349, 428, 411, 569, 444, 398, 359, 307, 290, 306}},
			{Results: []int32{382, 443, 374, 390, 558, 431, 410, 313, 421, 367, 393, 365, 447, 290, 388, 436, 402, 280, 433, 303, 337, 316, 349, 378}},
			{Results: []int32{527, 452, 374, 471, 412, 361, 374, 470, 416, 448, 378, 344, 380, 339, 462, 404, 405, 385, 356, 327, 491, 369, 423, 401}},
			{Results: []int32{428, 9075, 495, 459, 470, 432, 416, 432, 395, 411, 438, 319, 384, 311, 447, 41, 358, 336, 399, 439, 380, 332, 273, 446}},
			{Results: []int32{460, 527, 381, 422, 376, 347, 453, 278, 149, 422, 374, 435, 422, 400, 331, 430, 363, 283, 328, 412, 444, 464, 404, 352}},
			{Results: []int32{337, 389, 431, 324, 401, 525, 424, 402, 431, 437, 391, 319, 272, 381, 378, 81, 417, 284, 364, 370, 317, 360, 365, 388}},
			{Results: []int32{449, 368, 505, 403, 479, 374, 419, 411, 405, 280, 384, 265, 446, 387, 322, 411, 375, 393, 360, 480, 314, 363, 351, 442}},
			{Results: []int32{587, 581, 406, 429, 435, 437, 315, 425, 430, 50, 412, -50, 400, 414, 354, 316, 414, 389, 431, 201, 356, 401, 450, 285}},
			{Results: []int32{416, 500, 427, 435, 828, 357, 427, 453, 180, 269, 314, -50, 489, 389, 378, 50, 355, 293, 427, 436, 335, 379, 387, 291}},
			{Results: []int32{542, 399, 378, 464, 422, 491, 456, 474, 464, 430, 417, -50, 315, 50, 383, 509, 369, 284, 334, 312, 411, 335, 465, 383}},
			{Results: []int32{50, 454, 464, 453, 374, 451, 395, 414, 397, 392, 447, -50, 504, 345, 309, 422, 363, 385, 456, 429, 528, 315, 418, 390}},
			{Results: []int32{395, 406, 384, 330, 523, 370, 460, 439, 524, 414, 361, -50, 253, 405, 485, 572, 312, 50, 369, 395, 367, 390, 379, 419}},
			{Results: []int32{607, 484, 425, 393, 431, 401, 414, 50, 430, 347, 410, -50, 360, 370, 324, 490, 522, 290, 438, 402, 372, 372, 444, 377}},
			{Results: []int32{457, 9004, 419, 368, 499, 396, 534, -50, 418, 442, 346, -50, 336, 432, 358, 420, 473, 405, 373, 287, 331, 50, 50, 431}},
			{Results: []int32{50, 355, 457, 50, 510, 399, 448, -50, 418, 374, 402, -50, 377, 312, 417, 354, 479, 263, 436, 421, 387, 373, 365, 418}},
			{Results: []int32{364, 443, 419, 410, 574, 420, 462, -50, 301, 403, 321, -50, 436, 443, 371, 386, 298, 399, 50, 421, 348, 355, 50, 346}},
			{Results: []int32{509, 408, 50, 335, 358, 345, 295, 546, 302, 297, 514, -50, 493, 329, 370, 397, 352, 501, 406, 308, 387, 424, 424, 461}},
			{Results: []int32{450, 348, 367, 432, 451, 656, 390, 256, 415, 389, 442, -50, 324, 437, 432, 387, 372, 398, 50, 418, 408, 415, 404, 280}},
			{Results: []int32{403, 438, 498, 304, 366, 350, 50, 374, 480, 416, 432, -50, 503, 317, 377, 373, 458, 429, 398, 345, 305, 399, 378, 321}},
			{Results: []int32{430, 467, 345, 378, 372, 350, 432, 363, 423, 372, 500, -50, 391, 448, 50, 498, 241, 389, 402, 431, 418, 452, 397, 384}},
			{Results: []int32{380, 445, 423, 396, 447, 418, 463, 531, 381, 256, 50, -50, 473, 337, 388, 410, 405, 367, 329, 392, 292, 450, 359, 498}},
			{Results: []int32{461, 556, 379, 379, 403, 450, 338, 465, 342, 431, 398, -50, 355, 421, 327, 366, 452, 439, 343, 365, 50, 360, 471, 530}},
			{Results: []int32{418, 346, 452, 480, 414, 320, 386, 319, 420, 481, 359, -50, 437, 398, 395, 451, 398, 475, 270, 50, 351, 423, 607, 371}},
		},
		PlayerClasses:              []int32{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		ClassPrizes:                []int32{2},
		GibsonSpread:               200,
		ControlLossThreshold:       0.25,
		HopefulnessThreshold:       0.02,
		PlacePrizes:                6,
		DivisionSims:               1000,
		ControlLossSims:            1000,
		ControlLossActivationRound: 27,
		AllowRepeatByes:            false,
		RemovedPlayers:             []int32{11},
	}
	return request
}

func CreateAlbany1stAnd4thAnd8thGibsonizedAfterRound25PairRequest() *pb.PairRequest {
	request := &pb.PairRequest{
		PairMethod:   pb.PairMethod_COP,
		AllPlayers:   24,
		ValidPlayers: 23,
		Rounds:       27,
		PlayerNames:  []string{"Joey Krafchick", "Christopher Sykes", "Andy Hoang", "Robin Pollock Daniel", "Zachary Ansell", "Billy Nakamura", "David Spargo", "Wes Eddings", "Wallace Schultz", "Eric Goldstein", "Jonathan Lindh", "Chris Kulig", "Annette Obrestad", "Joel Horn", "Michael Ecsedy", "Richard Popper", "Edwin Roth", "Michael Fleck", "David Firstman", "Noah Kalus", "Noah Goldstein", "Carol McDonald", "David Postal", "Vera Bigall"},
		DivisionPairings: []*pb.RoundPairings{
			{Pairings: []int32{23, 2, 1, 4, 3, 6, 5, 8, 7, 10, 9, 12, 11, 14, 13, 16, 15, 18, 17, 20, 19, 22, 21, 0}},
			{Pairings: []int32{22, 3, 5, 1, 7, 2, 9, 4, 11, 6, 13, 8, 15, 10, 17, 12, 19, 14, 21, 16, 23, 18, 0, 20}},
			{Pairings: []int32{21, 6, 4, 8, 2, 10, 1, 12, 3, 14, 5, 16, 7, 18, 9, 20, 11, 22, 13, 23, 15, 0, 17, 19}},
			{Pairings: []int32{20, 7, 9, 5, 11, 3, 13, 1, 15, 2, 17, 4, 19, 6, 21, 8, 23, 10, 22, 12, 0, 14, 18, 16}},
			{Pairings: []int32{19, 10, 8, 12, 6, 14, 4, 16, 2, 18, 1, 20, 3, 22, 5, 23, 7, 21, 9, 0, 11, 17, 13, 15}},
			{Pairings: []int32{18, 11, 13, 9, 15, 7, 17, 5, 19, 3, 21, 1, 23, 2, 22, 4, 20, 6, 0, 8, 16, 10, 14, 12}},
			{Pairings: []int32{17, 14, 12, 16, 10, 18, 8, 20, 6, 22, 4, 23, 2, 21, 1, 19, 3, 0, 5, 15, 7, 13, 9, 11}},
			{Pairings: []int32{16, 15, 17, 13, 19, 11, 21, 9, 23, 7, 22, 5, 20, 3, 18, 1, 0, 2, 14, 4, 12, 6, 10, 8}},
			{Pairings: []int32{15, 18, 16, 20, 14, 22, 12, 23, 10, 21, 8, 19, 6, 17, 4, 0, 2, 13, 1, 11, 3, 9, 5, 7}},
			{Pairings: []int32{14, 19, 21, 17, 23, 15, 22, 13, 20, 9, 18, 11, 16, 7, 0, 5, 12, 3, 10, 1, 8, 2, 6, 4}},
			{Pairings: []int32{13, 22, 20, 23, 18, 21, 16, 19, 14, 17, 12, 11, 10, 0, 8, 15, 6, 9, 4, 7, 2, 5, 1, 3}},
			{Pairings: []int32{12, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 11, 0, 13, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1}},
			{Pairings: []int32{0, 21, 23, 19, 22, 17, 20, 15, 18, 13, 16, 11, 14, 9, 12, 7, 10, 5, 8, 3, 6, 1, 4, 2}},
			{Pairings: []int32{10, 20, 18, 22, 16, 23, 14, 21, 12, 19, 0, 11, 8, 15, 6, 13, 4, 17, 2, 9, 1, 7, 3, 5}},
			{Pairings: []int32{9, 17, 19, 15, 21, 13, 23, 7, 22, 0, 20, 11, 18, 5, 16, 3, 14, 1, 12, 2, 10, 4, 8, 6}},
			{Pairings: []int32{8, 16, 14, 18, 12, 20, 10, 7, 0, 23, 6, 11, 4, 19, 2, 17, 1, 15, 3, 13, 5, 21, 22, 9}},
			{Pairings: []int32{0, 13, 15, 3, 17, 9, 19, 7, 21, 5, 23, 11, 22, 1, 20, 2, 18, 4, 16, 6, 14, 8, 12, 10}},
			{Pairings: []int32{6, 12, 10, 14, 8, 16, 0, 7, 4, 20, 2, 11, 1, 23, 3, 21, 5, 19, 18, 17, 9, 15, 22, 13}},
			{Pairings: []int32{5, 9, 2, 7, 13, 0, 15, 3, 17, 1, 19, 11, 21, 4, 23, 6, 22, 8, 20, 10, 18, 12, 16, 14}},
			{Pairings: []int32{4, 8, 6, 10, 0, 12, 2, 14, 1, 16, 3, 11, 5, 20, 7, 22, 9, 23, 18, 21, 13, 19, 15, 17}},
			{Pairings: []int32{3, 5, 7, 0, 9, 1, 6, 2, 13, 4, 15, 11, 17, 8, 19, 10, 21, 12, 23, 14, 22, 16, 20, 18}},
			{Pairings: []int32{2, 4, 0, 6, 1, 8, 3, 10, 5, 12, 7, 11, 9, 16, 14, 18, 13, 20, 15, 22, 17, 23, 19, 21}},
			{Pairings: []int32{1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 10, 11, 13, 12, 15, 14, 17, 16, 19, 18, 21, 20, 23, 22}},
			{Pairings: []int32{2, 4, 0, 22, 1, 8, 12, 18, 5, 15, 16, 11, 6, 14, 13, 9, 10, 19, 7, 17, 20, 23, 3, 21}},
			{Pairings: []int32{1, 0, 4, 14, 2, 9, 15, 22, 12, 5, 13, 11, 8, 10, 3, 6, 18, 23, 16, 19, 21, 20, 7, 17}},
		},
		DivisionResults: []*pb.RoundResults{
			{Results: []int32{471, 394, 302, 395, 411, 128, 477, 354, 176, 359, 536, 392, 432, 396, 351, 332, 461, 414, 404, 271, 418, 428, 358, 284}},
			{Results: []int32{501, 451, 504, 31, 442, 60, 361, 354, 287, 465, 410, 362, 434, 399, 503, 412, 536, 356, 368, 305, 374, 429, 269, 410}},
			{Results: []int32{828, 418, 405, 435, 511, 378, 339, 382, 445, 434, 360, 400, 392, 414, 349, 428, 411, 569, 444, 398, 359, 307, 290, 306}},
			{Results: []int32{382, 443, 374, 390, 558, 431, 410, 13, 421, 367, 393, 365, 447, 290, 388, 436, 402, 280, 433, 303, 337, 316, 349, 378}},
			{Results: []int32{527, 452, 374, 471, 412, 361, 374, 470, 416, 448, 378, 344, 380, 339, 462, 404, 405, 385, 356, 327, 491, 369, 123, 401}},
			{Results: []int32{428, 9075, 1095, 459, 470, 532, 116, 432, 395, 411, 438, 319, 384, 311, 447, 41, 358, 336, 399, 439, 380, 332, 273, 446}},
			{Results: []int32{460, 527, 381, 422, 376, 347, 453, 278, 149, 422, 374, 435, 422, 400, 331, 1830, 363, 283, 328, 412, 444, 464, 404, 352}},
			{Results: []int32{337, 389, 431, 324, 401, 1425, 424, 402, 131, 437, 391, 319, 272, 381, 378, 81, 417, 284, 364, 370, 317, 360, 365, 388}},
			{Results: []int32{449, 368, 505, 403, 479, 374, 419, 411, 405, 280, 384, 265, 446, 387, 322, 411, 375, 393, 360, 480, 314, 363, 351, 442}},
			{Results: []int32{587, 581, 406, 429, 435, 437, 315, 425, 430, 50, 412, -50, 400, 414, 354, 316, 414, 389, 431, 201, 356, 401, 450, 285}},
			{Results: []int32{416, 500, 427, 435, 828, 357, 427, 453, 180, 269, 314, -50, 489, 89, 378, 50, 355, 293, 427, 436, 335, 379, 187, 291}},
			{Results: []int32{542, 399, 378, 164, 422, 491, 456, 474, 464, 430, 417, -50, 315, 50, 383, 509, 369, 284, 334, 312, 411, 335, 465, 383}},
			{Results: []int32{50, 454, 464, 453, 374, 451, 395, 414, 397, 192, 447, -50, 504, 345, 309, 422, 363, 385, 456, 429, 528, 315, 418, 390}},
			{Results: []int32{395, 406, 384, 330, 523, 370, 460, 439, 524, 114, 361, -50, 253, 405, 485, 572, 312, 50, 369, 395, 367, 390, 379, 419}},
			{Results: []int32{607, 484, 425, 393, 431, 401, 414, 50, 430, 347, 410, -50, 360, 370, 324, 490, 522, 290, 438, 402, 372, 372, 444, 377}},
			{Results: []int32{457, 9004, 419, 368, 499, 396, 534, -50, 418, 142, 346, -50, 336, 432, 358, 420, 473, 405, 373, 287, 331, 50, 50, 431}},
			{Results: []int32{50, 355, 457, 50, 510, 399, 148, -50, 418, 374, 402, -50, 377, 312, 417, 354, 479, 263, 436, 421, 387, 373, 365, 418}},
			{Results: []int32{364, 443, 419, 410, 574, 420, 462, -50, 301, 403, 321, -50, 436, 443, 371, 386, 298, 399, 50, 421, 348, 355, 50, 346}},
			{Results: []int32{509, 408, 50, 335, 358, 345, 295, 546, 302, 297, 514, -50, 1693, 329, 370, 397, 352, 501, 406, 308, 387, 424, 424, 461}},
			{Results: []int32{450, 348, 367, 432, 451, 656, 390, 256, 415, 389, 442, -50, 324, 437, 432, 387, 372, 398, 50, 418, 408, 415, 404, 280}},
			{Results: []int32{403, 438, 498, 304, 366, 350, 50, 374, 480, 416, 432, -50, 503, 317, 377, 373, 158, 429, 398, 345, 305, 399, 378, 321}},
			{Results: []int32{430, 467, 345, 378, 372, 350, 132, 363, 423, 372, 500, -50, 391, 448, 50, 498, 241, 389, 402, 431, 418, 452, 397, 384}},
			{Results: []int32{380, 445, 423, 396, 447, 418, 463, 531, 381, 256, 50, -50, 473, 337, 388, 410, 405, 367, 329, 392, 292, 450, 359, 498}},
			{Results: []int32{461, 556, 379, 379, 403, 450, 338, 465, 342, 431, 398, -50, 355, 421, 327, 366, 452, 439, 343, 365, 50, 360, 471, 530}},
			{Results: []int32{418, 346, 452, 480, 414, 320, 386, 319, 420, 481, 359, -50, 437, 398, 395, 451, 398, 475, 270, 50, 351, 423, 107, 371}},
		},
		PlayerClasses:              []int32{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		ClassPrizes:                []int32{2},
		GibsonSpread:               100,
		ControlLossThreshold:       0.25,
		HopefulnessThreshold:       0.02,
		PlacePrizes:                10,
		DivisionSims:               1000,
		ControlLossSims:            1000,
		ControlLossActivationRound: 27,
		AllowRepeatByes:            false,
		RemovedPlayers:             []int32{11},
	}
	return request
}

func CreateLakegeorgeCSWAfterRound8PairRequest() *pb.PairRequest {
	request := &pb.PairRequest{
		PairMethod:   pb.PairMethod_COP,
		AllPlayers:   18,
		ValidPlayers: 18,
		Rounds:       15,
		PlayerNames:  []string{"Joshua Castellano", "Matthew Tunnicliffe", "Matthew O'Connor", "Ben Schoenbrun", "Josh Sokol", "Jason Keller", "Erickson Smith", "Mark Francillon", "Robert Linn", "Stefan Kac", "Bradley Whitmarsh", "Tim Weiss", "Jason Ubeika", "Shan Abbasi", "Terry Kang", "Kyle Fellahi", "BJ Premore", "Jim Brennan"},
		DivisionPairings: []*pb.RoundPairings{
			{Pairings: []int32{17, 15, 13, 16, 11, 8, 12, 9, 5, 7, 14, 4, 6, 2, 10, 1, 3, 0}},
			{Pairings: []int32{12, 10, 9, 11, 16, 14, 17, 13, 15, 2, 1, 3, 0, 7, 5, 8, 4, 6}},
			{Pairings: []int32{6, 5, 7, 4, 3, 1, 0, 2, 10, 13, 8, 16, 17, 9, 15, 14, 11, 12}},
			{Pairings: []int32{4, 13, 3, 2, 0, 10, 11, 14, 9, 8, 5, 6, 16, 1, 7, 17, 12, 15}},
			{Pairings: []int32{9, 8, 10, 17, 13, 15, 16, 11, 1, 0, 2, 7, 14, 4, 12, 5, 6, 3}},
			{Pairings: []int32{1, 0, 17, 15, 9, 16, 8, 12, 6, 4, 13, 14, 7, 10, 11, 3, 5, 2}},
			{Pairings: []int32{5, 9, 4, 8, 2, 0, 10, 15, 3, 1, 6, 12, 11, 16, 17, 7, 13, 14}},
			{Pairings: []int32{3, 4, 5, 0, 1, 2, 14, 8, 7, 16, 12, 15, 10, 17, 6, 11, 9, 13}},
		},
		DivisionResults: []*pb.RoundResults{
			{Results: []int32{418, 477, 390, 536, 536, 396, 392, 373, 401, 493, 507, 261, 333, 455, 330, 347, 480, 377}},
			{Results: []int32{523, 528, 432, 352, 402, 482, 431, 378, 489, 446, 352, 413, 368, 500, 389, 381, 359, 432}},
			{Results: []int32{515, 435, 522, 359, 458, 442, 373, 441, 512, 413, 525, 433, 462, 413, 291, 486, 458, 385}},
			{Results: []int32{385, 445, 563, 464, 371, 350, 522, 341, 349, 443, 402, 461, 362, 427, 428, 395, 430, 528}},
			{Results: []int32{536, 504, 413, 529, 526, 554, 382, 394, 359, 323, 381, 377, 460, 371, 414, 323, 331, 304}},
			{Results: []int32{368, 741, 438, 526, 400, 496, 403, 536, 450, 418, 399, 399, 515, 414, 460, 232, 394, 446}},
			{Results: []int32{528, 457, 392, 337, 557, 396, 376, 450, 403, 441, 516, 428, 460, 359, 401, 384, 419, 383}},
			{Results: []int32{472, 474, 516, 387, 462, 337, 473, 496, 363, 398, 457, 464, 340, 480, 419, 426, 444, 343}},
		},
		PlayerClasses:              []int32{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		ClassPrizes:                []int32{2},
		GibsonSpread:               200,
		ControlLossThreshold:       0.25,
		HopefulnessThreshold:       0.02,
		PlacePrizes:                2,
		DivisionSims:               1000,
		ControlLossSims:            1000,
		ControlLossActivationRound: 15,
		AllowRepeatByes:            false,
	}
	return request
}

func CreateBellevilleCSWAfterRound12PairRequest() *pb.PairRequest {
	request := &pb.PairRequest{
		PairMethod:   pb.PairMethod_COP,
		AllPlayers:   12,
		ValidPlayers: 12,
		Rounds:       15,
		PlayerNames:  []string{"Matthew O'Connor", "Jason Keller", "Joshua Castellano", "Matthew Tunnicliffe", "Jason Ubeika", "Jason Broersma", "Terry Kang", "George MacAulay", "Yvonne Lobo", "Sue Tremblay", "David Nwabor", "Roger Cullman"},
		DivisionPairings: []*pb.RoundPairings{
			{Pairings: []int32{6, 11, 10, 9, 8, 7, 0, 5, 4, 3, 2, 1}},
			{Pairings: []int32{4, 8, 6, 10, 0, 11, 2, 9, 1, 7, 3, 5}},
			{Pairings: []int32{11, 2, 1, 4, 3, 6, 5, 8, 7, 10, 9, 0}},
			{Pairings: []int32{9, 6, 4, 8, 2, 10, 1, 11, 3, 0, 5, 7}},
			{Pairings: []int32{10, 3, 5, 1, 7, 2, 9, 4, 11, 6, 0, 8}},
			{Pairings: []int32{3, 5, 7, 0, 9, 1, 11, 2, 10, 4, 8, 6}},
			{Pairings: []int32{8, 7, 9, 5, 11, 3, 10, 1, 0, 2, 6, 4}},
			{Pairings: []int32{5, 9, 11, 7, 10, 0, 8, 3, 6, 1, 4, 2}},
			{Pairings: []int32{1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10}},
			{Pairings: []int32{7, 10, 8, 11, 6, 9, 4, 0, 2, 5, 1, 3}},
			{Pairings: []int32{2, 4, 0, 6, 1, 8, 3, 10, 5, 11, 7, 9}},
			{Pairings: []int32{3, 4, 7, 0, 1, 11, 9, 2, 10, 6, 8, 5}},
		},
		DivisionResults: []*pb.RoundResults{
			{Results: []int32{543, 365, 536, 451, 363, 448, 378, 473, 463, 343, 284, 461}},
			{Results: []int32{403, 450, 439, 543, 624, 443, 440, 342, 449, 490, 335, 342}},
			{Results: []int32{461, 511, 380, 453, 457, 505, 344, 497, 364, 443, 300, 295}},
			{Results: []int32{595, 434, 511, 501, 326, 306, 381, 324, 380, 370, 412, 405}},
			{Results: []int32{588, 381, 390, 494, 438, 352, 395, 578, 430, 485, 324, 386}},
			{Results: []int32{411, 462, 381, 449, 510, 355, 442, 476, 349, 413, 547, 398}},
			{Results: []int32{478, 414, 422, 537, 373, 352, 467, 399, 424, 443, 376, 404}},
			{Results: []int32{524, 570, 492, 396, 423, 302, 425, 448, 375, 283, 533, 339}},
			{Results: []int32{405, 553, 380, 509, 495, 428, 458, 426, 486, 476, 335, 407}},
			{Results: []int32{513, 465, 483, 418, 556, 436, 395, 374, 370, 384, 432, 351}},
			{Results: []int32{441, 447, 374, 459, 472, 383, 437, 517, 379, 458, 339, 378}},
			{Results: []int32{417, 379, 479, 427, 464, 406, 400, 385, 414, 494, 413, 432}},
		},
		PlayerClasses:              []int32{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		ClassPrizes:                []int32{2},
		GibsonSpread:               200,
		ControlLossThreshold:       0.25,
		HopefulnessThreshold:       0.02,
		PlacePrizes:                2,
		DivisionSims:               1000,
		ControlLossSims:            1000,
		ControlLossActivationRound: 15,
		AllowRepeatByes:            false,
	}
	return request
}

func CreateBellevilleCSW4thCLAfterRound12PairRequest() *pb.PairRequest {
	request := &pb.PairRequest{
		PairMethod:   pb.PairMethod_COP,
		AllPlayers:   12,
		ValidPlayers: 12,
		Rounds:       16,
		PlayerNames:  []string{"Matthew O'Connor", "Jason Keller", "Joshua Castellano", "Matthew Tunnicliffe", "Jason Ubeika", "Jason Broersma", "Terry Kang", "George MacAulay", "Yvonne Lobo", "Sue Tremblay", "David Nwabor", "Roger Cullman"},
		DivisionPairings: []*pb.RoundPairings{
			{Pairings: []int32{6, 11, 10, 9, 8, 7, 0, 5, 4, 3, 2, 1}},
			{Pairings: []int32{4, 8, 6, 10, 0, 11, 2, 9, 1, 7, 3, 5}},
			{Pairings: []int32{11, 2, 1, 4, 3, 6, 5, 8, 7, 10, 9, 0}},
			{Pairings: []int32{9, 6, 4, 8, 2, 10, 1, 11, 3, 0, 5, 7}},
			{Pairings: []int32{10, 3, 5, 1, 7, 2, 9, 4, 11, 6, 0, 8}},
			{Pairings: []int32{3, 5, 7, 0, 9, 1, 11, 2, 10, 4, 8, 6}},
			{Pairings: []int32{8, 7, 9, 5, 11, 3, 10, 1, 0, 2, 6, 4}},
			{Pairings: []int32{5, 9, 11, 7, 10, 0, 8, 3, 6, 1, 4, 2}},
			{Pairings: []int32{1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10}},
			{Pairings: []int32{7, 10, 8, 11, 6, 9, 4, 0, 2, 5, 1, 3}},
			{Pairings: []int32{2, 4, 0, 6, 1, 8, 3, 10, 5, 11, 7, 9}},
		},
		DivisionResults: []*pb.RoundResults{
			{Results: []int32{143, 365, 536, 344, 363, 448, 378, 473, 463, 343, 284, 461}},
			{Results: []int32{625, 250, 539, 336, 624, 443, 440, 342, 449, 490, 335, 342}},
			{Results: []int32{461, 511, 380, 453, 457, 505, 344, 497, 364, 443, 300, 295}},
			{Results: []int32{371, 334, 511, 381, 326, 306, 381, 324, 380, 370, 412, 405}},
			{Results: []int32{588, 381, 390, 494, 238, 352, 395, 578, 430, 485, 324, 386}},
			{Results: []int32{411, 462, 381, 449, 510, 355, 442, 476, 349, 413, 547, 398}},
			{Results: []int32{178, 414, 522, 537, 673, 352, 467, 399, 424, 443, 376, 404}},
			{Results: []int32{524, 570, 492, 496, 423, 302, 425, 448, 375, 283, 533, 339}},
			{Results: []int32{405, 553, 380, 509, 3045, 428, 458, 426, 486, 476, 335, 407}},
			{Results: []int32{513, 465, 483, 418, 556, 436, 395, 374, 370, 384, 432, 351}},
			{Results: []int32{441, 447, 374, 459, 472, 383, 437, 517, 379, 458, 339, 378}},
		},
		PlayerClasses:              []int32{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		ClassPrizes:                []int32{2},
		GibsonSpread:               200,
		ControlLossThreshold:       0.25,
		HopefulnessThreshold:       0.02,
		PlacePrizes:                2,
		DivisionSims:               1000,
		ControlLossSims:            1000,
		ControlLossActivationRound: 16,
		AllowRepeatByes:            false,
	}
	return request
}

func CreateAlbanyAfterRound15PairRequest() *pb.PairRequest {
	request := &pb.PairRequest{
		PairMethod:   pb.PairMethod_COP,
		AllPlayers:   30,
		ValidPlayers: 30,
		Rounds:       27,
		PlayerNames:  []string{"Wellington Jighere", "Adam Logan", "Will Anderson", "Dennis Ikekeregor", "Austin Shin", "Matthew O'Connor", "Chris Lipe", "Joshua Castellano", "Josh Sokol", "Jason Keller", "Ben Schoenbrun", "Erickson Smith", "Bright Idahosa", "Robert Linn", "Jason Ubeika", "Tim Weiss", "Richard Buck", "Anthony Ikolo", "Daniel Blake", "Terry Kang", "Carmel Dodd", "Niel Gan", "Steve Ozorio", "Thomas Stumpf", "Joe Roberdeau", "Cheryl Melvin", "Iliana Filby", "Ivan Sentongo", "Edgar Odongkara", "Mohamed Kamara"},
		DivisionPairings: []*pb.RoundPairings{
			{Pairings: []int32{25, 20, 26, 22, 21, 13, 23, 24, 27, 29, 15, 17, 19, 5, 18, 10, 28, 11, 14, 12, 1, 4, 3, 6, 7, 0, 2, 8, 16, 9}},
			{Pairings: []int32{29, 19, 14, 16, 17, 18, 15, 27, 24, 25, 23, 21, 20, 26, 2, 6, 3, 4, 5, 1, 12, 11, 28, 10, 8, 9, 13, 7, 22, 0}},
			{Pairings: []int32{9, 12, 5, 28, 11, 2, 10, 8, 7, 0, 6, 4, 1, 14, 13, 23, 22, 21, 26, 20, 19, 17, 16, 15, 27, 29, 18, 24, 3, 25}},
			{Pairings: []int32{4, 13, 28, 17, 0, 16, 7, 6, 12, 10, 9, 18, 8, 1, 24, 26, 5, 3, 11, 27, 29, 25, 23, 22, 14, 21, 15, 19, 2, 20}},
			{Pairings: []int32{11, 2, 1, 9, 20, 28, 17, 23, 10, 3, 8, 0, 22, 18, 16, 29, 14, 6, 13, 24, 4, 27, 12, 7, 19, 26, 25, 21, 5, 15}},
			{Pairings: []int32{3, 10, 8, 0, 23, 6, 5, 17, 2, 11, 1, 9, 24, 20, 25, 27, 26, 7, 28, 29, 13, 22, 21, 4, 12, 14, 16, 15, 18, 19}},
			{Pairings: []int32{1, 0, 7, 10, 18, 23, 8, 2, 6, 28, 3, 12, 11, 17, 26, 20, 25, 13, 4, 21, 15, 19, 24, 5, 22, 16, 14, 29, 9, 27}},
			{Pairings: []int32{6, 3, 11, 1, 28, 29, 0, 10, 20, 19, 7, 2, 14, 23, 12, 21, 24, 18, 17, 9, 8, 15, 26, 13, 16, 27, 22, 25, 4, 5}},
			{Pairings: []int32{10, 6, 4, 7, 2, 19, 1, 3, 14, 12, 0, 28, 9, 24, 8, 18, 23, 29, 15, 5, 21, 20, 25, 16, 13, 22, 27, 26, 11, 17}},
			{Pairings: []int32{7, 28, 12, 6, 8, 21, 3, 0, 4, 15, 11, 10, 2, 16, 29, 9, 13, 20, 19, 18, 17, 5, 27, 26, 25, 24, 23, 22, 1, 14}},
			{Pairings: []int32{12, 8, 17, 11, 6, 27, 4, 15, 1, 14, 28, 3, 0, 19, 9, 7, 20, 2, 21, 13, 16, 18, 29, 25, 26, 23, 24, 5, 10, 22}},
			{Pairings: []int32{15, 11, 20, 4, 3, 22, 28, 29, 17, 13, 12, 1, 10, 9, 27, 0, 18, 8, 16, 25, 2, 26, 5, 24, 23, 19, 21, 14, 6, 7}},
			{Pairings: []int32{28, 15, 29, 12, 10, 25, 11, 13, 9, 8, 4, 6, 3, 7, 23, 1, 17, 16, 22, 26, 27, 24, 18, 14, 21, 5, 19, 20, 0, 2}},
			{Pairings: []int32{8, 16, 3, 2, 7, 11, 20, 4, 0, 24, 17, 5, 13, 12, 22, 19, 1, 10, 25, 15, 6, 23, 14, 21, 9, 18, 29, 28, 27, 26}},
			{Pairings: []int32{2, 17, 0, 13, 15, 7, 9, 5, 11, 6, 20, 8, 16, 3, 28, 4, 12, 1, 24, 22, 10, 29, 19, 27, 18, 26, 25, 23, 14, 21}},
		},
		DivisionResults: []*pb.RoundResults{
			{Results: []int32{509, 431, 503, 426, 438, 454, 452, 533, 466, 506, 443, 219, 413, 487, 373, 399, 382, 503, 552, 404, 366, 379, 392, 405, 327, 356, 371, 356, 437, 345}},
			{Results: []int32{533, 428, 521, 423, 479, 503, 444, 435, 514, 526, 453, 459, 397, 554, 321, 427, 423, 405, 406, 352, 392, 431, 408, 382, 389, 325, 437, 353, 421, 356}},
			{Results: []int32{400, 486, 448, 432, 363, 406, 420, 407, 469, 506, 483, 495, 358, 409, 426, 370, 397, 401, 424, 421, 474, 309, 440, 388, 385, 349, 411, 451, 394, 506}},
			{Results: []int32{429, 493, 491, 397, 329, 515, 424, 390, 527, 356, 415, 578, 344, 392, 417, 464, 350, 305, 342, 474, 520, 498, 381, 458, 462, 246, 354, 402, 364, 421}},
			{Results: []int32{595, 439, 375, 494, 436, 349, 564, 523, 361, 462, 595, 408, 460, 465, 485, 415, 389, 466, 490, 480, 355, 493, 416, 272, 325, 304, 396, 253, 436, 338}},
			{Results: []int32{481, 368, 475, 361, 497, 340, 497, 448, 426, 422, 474, 469, 494, 357, 552, 437, 460, 414, 431, 379, 436, 419, 397, 446, 360, 412, 369, 423, 531, 465}},
			{Results: []int32{481, 503, 423, 575, 467, 556, 444, 478, 413, 380, 346, 425, 337, 391, 444, 410, 499, 505, 294, 407, 442, 395, 323, 296, 414, 372, 367, 421, 497, 489}},
			{Results: []int32{436, 409, 326, 342, 365, 411, 378, 425, 447, 482, 428, 506, 443, 400, 314, 505, 564, 523, 380, 461, 378, 372, 415, 358, 448, 442, 351, 483, 494, 523}},
			{Results: []int32{405, 454, 389, 436, 494, 321, 392, 422, 553, 426, 492, 522, 443, 461, 419, 545, 429, 482, 374, 471, 422, 319, 404, 364, 283, 367, 393, 490, 469, 338}},
			{Results: []int32{521, 327, 439, 395, 506, 424, 474, 479, 466, 410, 519, 360, 469, 412, 494, 430, 449, 472, 469, 440, 317, 368, 340, 352, 463, 277, 490, 450, 564, 422}},
			{Results: []int32{423, 447, 474, 470, 393, 436, 452, 333, 362, 407, 404, 364, 430, 474, 391, 387, 316, 417, 411, 327, 562, 366, 353, 416, 433, 448, 420, 598, 390, 445}},
			{Results: []int32{430, 495, 374, 386, 487, 481, 473, 554, 434, 350, 518, 343, 387, 379, 401, 386, 469, 442, 391, 441, 396, 448, 382, 419, 358, 377, 304, 408, 456, 353}},
			{Results: []int32{430, 476, 427, 383, 524, 480, 333, 466, 399, 460, 410, 473, 535, 441, 525, 311, 415, 424, 395, 479, 418, 427, 375, 367, 367, 264, 397, 409, 399, 406}},
			{Results: []int32{351, 490, 491, 481, 376, 524, 375, 537, 475, 420, 570, 409, 474, 492, 308, 572, 337, 375, 410, 343, 395, 364, 481, 369, 414, 373, 320, 456, 404, 428}},
			{Results: []int32{436, 362, 459, 442, 421, 389, 536, 437, 470, 401, 484, 364, 395, 401, 417, 412, 336, 513, 396, 382, 330, 310, 396, 409, 401, 402, 472, 511, 570, 499}},
		},
		PlayerClasses:              []int32{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		ClassPrizes:                []int32{2},
		GibsonSpread:               200,
		ControlLossThreshold:       0.25,
		HopefulnessThreshold:       0.02,
		PlacePrizes:                2,
		DivisionSims:               1000,
		ControlLossSims:            1000,
		ControlLossActivationRound: 27,
		AllowRepeatByes:            false,
	}
	return request
}

func CreateAlbanyAfterRound16PairRequest() *pb.PairRequest {
	request := &pb.PairRequest{
		PairMethod:    pb.PairMethod_COP,
		PlayerNames:   []string{"Joey Krafchick", "Christopher Sykes", "Andy Hoang", "Robin Pollock Daniel", "Zachary Ansell", "Billy Nakamura", "David Spargo", "Wes Eddings", "Wallace Schultz", "Eric Goldstein", "Jonathan Lindh", "Chris Kulig", "Annette Obrestad", "Joel Horn", "Michael Ecsedy", "Richard Popper", "Edwin Roth", "Michael Fleck", "David Firstman", "Noah Kalus", "Noah Goldstein", "Carol McDonald", "David Postal", "Vera Bigall"},
		PlayerClasses: []int32{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		DivisionPairings: []*pb.RoundPairings{
			{Pairings: []int32{23, 2, 1, 4, 3, 6, 5, 8, 7, 10, 9, 12, 11, 14, 13, 16, 15, 18, 17, 20, 19, 22, 21, 0}},
			{Pairings: []int32{22, 3, 5, 1, 7, 2, 9, 4, 11, 6, 13, 8, 15, 10, 17, 12, 19, 14, 21, 16, 23, 18, 0, 20}},
			{Pairings: []int32{21, 6, 4, 8, 2, 10, 1, 12, 3, 14, 5, 16, 7, 18, 9, 20, 11, 22, 13, 23, 15, 0, 17, 19}},
			{Pairings: []int32{20, 7, 9, 5, 11, 3, 13, 1, 15, 2, 17, 4, 19, 6, 21, 8, 23, 10, 22, 12, 0, 14, 18, 16}},
			{Pairings: []int32{19, 10, 8, 12, 6, 14, 4, 16, 2, 18, 1, 20, 3, 22, 5, 23, 7, 21, 9, 0, 11, 17, 13, 15}},
			{Pairings: []int32{18, 11, 13, 9, 15, 7, 17, 5, 19, 3, 21, 1, 23, 2, 22, 4, 20, 6, 0, 8, 16, 10, 14, 12}},
			{Pairings: []int32{17, 14, 12, 16, 10, 18, 8, 20, 6, 22, 4, 23, 2, 21, 1, 19, 3, 0, 5, 15, 7, 13, 9, 11}},
			{Pairings: []int32{16, 15, 17, 13, 19, 11, 21, 9, 23, 7, 22, 5, 20, 3, 18, 1, 0, 2, 14, 4, 12, 6, 10, 8}},
			{Pairings: []int32{15, 18, 16, 20, 14, 22, 12, 23, 10, 21, 8, 19, 6, 17, 4, 0, 2, 13, 1, 11, 3, 9, 5, 7}},
			{Pairings: []int32{14, 19, 21, 17, 23, 15, 22, 13, 20, 9, 18, 11, 16, 7, 0, 5, 12, 3, 10, 1, 8, 2, 6, 4}},
			{Pairings: []int32{13, 22, 20, 23, 18, 21, 16, 19, 14, 17, 12, 11, 10, 0, 8, 15, 6, 9, 4, 7, 2, 5, 1, 3}},
			{Pairings: []int32{12, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 11, 0, 13, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1}},
			{Pairings: []int32{0, 21, 23, 19, 22, 17, 20, 15, 18, 13, 16, 11, 14, 9, 12, 7, 10, 5, 8, 3, 6, 1, 4, 2}},
			{Pairings: []int32{10, 20, 18, 22, 16, 23, 14, 21, 12, 19, 0, 11, 8, 15, 6, 13, 4, 17, 2, 9, 1, 7, 3, 5}},
			{Pairings: []int32{9, 17, 19, 15, 21, 13, 23, 7, 22, 0, 20, 11, 18, 5, 16, 3, 14, 1, 12, 2, 10, 4, 8, 6}},
			{Pairings: []int32{8, 16, 14, 18, 12, 20, 10, 7, 0, 23, 6, 11, 4, 19, 2, 17, 1, 15, 3, 13, 5, 21, 22, 9}},
			{Pairings: []int32{22, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, 19, -1, -1, 0, -1}},
		},
		DivisionResults: []*pb.RoundResults{
			{Results: []int32{471, 394, 302, 395, 411, 428, 477, 354, 476, 359, 536, 392, 432, 396, 351, 332, 461, 414, 404, 271, 418, 428, 358, 284}}, {Results: []int32{501, 451, 504, 431, 442, 360, 361, 354, 387, 465, 410, 362, 434, 399, 503, 412, 536, 356, 368, 305, 374, 429, 269, 410}}, {Results: []int32{428, 418, 405, 435, 511, 378, 339, 382, 445, 434, 360, 400, 392, 414, 349, 428, 411, 569, 444, 398, 359, 307, 290, 306}}, {Results: []int32{382, 443, 374, 390, 558, 431, 410, 313, 421, 367, 393, 365, 447, 290, 388, 436, 402, 280, 433, 303, 337, 316, 349, 378}}, {Results: []int32{527, 452, 374, 471, 412, 361, 374, 470, 416, 448, 378, 344, 380, 339, 462, 404, 405, 385, 356, 327, 491, 369, 423, 401}}, {Results: []int32{428, 475, 495, 459, 470, 432, 416, 432, 395, 411, 438, 319, 384, 311, 447, 341, 358, 336, 399, 439, 380, 332, 273, 446}}, {Results: []int32{460, 527, 381, 422, 376, 347, 453, 278, 349, 422, 374, 435, 422, 400, 331, 430, 363, 283, 328, 412, 444, 464, 404, 352}}, {Results: []int32{337, 389, 431, 324, 401, 525, 424, 402, 431, 437, 391, 319, 472, 381, 378, 381, 417, 284, 364, 370, 317, 360, 365, 388}}, {Results: []int32{449, 368, 505, 403, 479, 374, 419, 411, 405, 480, 384, 265, 446, 387, 322, 411, 375, 393, 360, 480, 314, 363, 351, 442}}, {Results: []int32{587, 581, 406, 429, 435, 437, 315, 425, 430, 50, 412, -50, 400, 414, 354, 316, 414, 389, 431, 201, 356, 401, 450, 285}}, {Results: []int32{416, 500, 427, 435, 328, 357, 427, 453, 380, 469, 314, -50, 489, 389, 378, 50, 355, 293, 427, 436, 335, 379, 387, 291}}, {Results: []int32{542, 399, 378, 464, 422, 491, 456, 474, 464, 430, 417, -50, 315, 50, 383, 509, 369, 284, 334, 312, 411, 335, 465, 383}}, {Results: []int32{50, 454, 464, 453, 374, 451, 395, 414, 397, 392, 447, -50, 504, 345, 309, 422, 363, 385, 456, 429, 528, 315, 418, 390}}, {Results: []int32{395, 406, 384, 330, 523, 370, 460, 439, 524, 414, 361, -50, 253, 405, 485, 572, 312, 50, 369, 395, 367, 390, 379, 419}}, {Results: []int32{607, 484, 425, 393, 431, 401, 414, 50, 430, 347, 410, -50, 360, 370, 324, 490, 522, 290, 438, 402, 372, 372, 444, 377}}, {Results: []int32{457, 404, 419, 368, 499, 396, 534, -50, 418, 442, 346, -50, 336, 432, 358, 420, 473, 405, 373, 287, 331, 50, 50, 431}},
		},
		ClassPrizes:          []int32{3},
		GibsonSpread:         200,
		ControlLossThreshold: 0.25,
		HopefulnessThreshold: 0.01,
		AllPlayers:           24,
		ValidPlayers:         23,
		Rounds:               27,
		PlacePrizes:          5,
		DivisionSims:         50000,
		ControlLossSims:      50000,
		AllowRepeatByes:      true,
		RemovedPlayers:       []int32{11},
		Seed:                 1735968364,
	}
	return request
}

func CreateAlbanyCSWNewYearsAfterRound27PairRequest() *pb.PairRequest {
	request := &pb.PairRequest{
		PairMethod:    pb.PairMethod_COP,
		PlayerNames:   []string{"Joshua Castellano", "Austin Shin", "Dennis Ikekeregor", "Matthew OConnor", "Josh Sokol", "Ben Schoenbrun", "Jason Keller", "Becky Dyer", "Robert Linn", "Jason Ubeika", "Tim Weiss", "Daniel Blake", "Niel Gan", "Terry Kang", "Lindsay Shin", "Steve Ozorio", "Heidi Robertson", "Shauna Petrie", "Judy Cole", "Kaia"},
		PlayerClasses: []int32{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		DivisionPairings: []*pb.RoundPairings{
			{Pairings: []int32{13, 14, 12, 16, 10, 18, 8, 19, 6, 17, 4, 15, 2, 0, 1, 11, 3, 9, 5, 7}}, {Pairings: []int32{17, 6, 4, 8, 2, 10, 1, 12, 3, 14, 5, 16, 7, 18, 9, 19, 11, 0, 13, 15}}, {Pairings: []int32{3, 5, 7, 0, 9, 1, 11, 2, 13, 4, 15, 6, 17, 8, 19, 10, 18, 12, 16, 14}}, {Pairings: []int32{10, 19, 18, 17, 16, 15, 14, 13, 12, 11, 0, 9, 8, 7, 6, 5, 4, 3, 2, 1}}, {Pairings: []int32{19, 2, 1, 4, 3, 6, 5, 8, 7, 10, 9, 12, 11, 14, 13, 16, 15, 18, 17, 0}}, {Pairings: []int32{6, 12, 10, 14, 8, 16, 0, 18, 4, 19, 2, 17, 1, 15, 3, 13, 5, 11, 7, 9}}, {Pairings: []int32{8, 16, 14, 18, 12, 19, 10, 17, 0, 15, 6, 13, 4, 11, 2, 9, 1, 7, 3, 5}}, {Pairings: []int32{7, 13, 15, 11, 17, 9, 19, 0, 18, 5, 16, 3, 14, 1, 12, 2, 10, 4, 8, 6}}, {Pairings: []int32{2, 4, 0, 6, 1, 8, 3, 10, 5, 12, 7, 14, 9, 16, 11, 18, 13, 19, 15, 17}}, {Pairings: []int32{12, 15, 17, 13, 19, 11, 18, 9, 16, 7, 14, 5, 0, 3, 10, 1, 8, 2, 6, 4}}, {Pairings: []int32{4, 8, 6, 10, 0, 12, 2, 14, 1, 16, 3, 18, 5, 19, 7, 17, 9, 15, 11, 13}}, {Pairings: []int32{14, 11, 13, 9, 15, 7, 17, 5, 19, 3, 18, 1, 16, 2, 0, 4, 12, 6, 10, 8}}, {Pairings: []int32{5, 9, 11, 7, 13, 0, 15, 3, 17, 1, 19, 2, 18, 4, 16, 6, 14, 8, 12, 10}}, {Pairings: []int32{11, 18, 16, 19, 14, 17, 12, 15, 10, 13, 8, 0, 6, 9, 4, 7, 2, 5, 1, 3}}, {Pairings: []int32{9, 17, 19, 15, 18, 13, 16, 11, 14, 0, 12, 7, 10, 5, 8, 3, 6, 1, 4, 2}}, {Pairings: []int32{1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14, 17, 16, 19, 18}}, {Pairings: []int32{16, 7, 9, 5, 11, 3, 13, 1, 15, 2, 17, 4, 19, 6, 18, 8, 0, 10, 14, 12}}, {Pairings: []int32{18, 3, 5, 1, 7, 2, 9, 4, 11, 6, 13, 8, 15, 10, 17, 12, 19, 14, 0, 16}}, {Pairings: []int32{15, 10, 8, 12, 6, 14, 4, 16, 2, 18, 1, 19, 3, 17, 5, 0, 7, 13, 9, 11}}, {Pairings: []int32{5, 10, 11, 12, 6, 0, 4, 19, 14, 13, 1, 2, 3, 9, 8, 18, 17, 16, 15, 7}}, {Pairings: []int32{4, 11, 6, 9, 0, 10, 2, 18, 16, 3, 5, 1, 17, 14, 13, 19, 8, 12, 7, 15}}, {Pairings: []int32{3, 2, 1, 0, 10, 11, 17, 15, 13, 12, 4, 5, 9, 8, 16, 7, 14, 6, 19, 18}}, {Pairings: []int32{10, 5, 12, 6, 11, 1, 3, 16, 18, 17, 0, 4, 2, 15, 19, 13, 7, 9, 8, 14}}, {Pairings: []int32{11, 5, 4, 10, 2, 1, 12, 8, 7, 18, 3, 0, 6, 17, 15, 14, 19, 13, 9, 16}}, {Pairings: []int32{5, 4, 3, 2, 1, 0, 11, 9, 19, 7, 12, 6, 10, 16, 18, 17, 13, 15, 14, 8}}, {Pairings: []int32{5, 6, 10, 11, 12, 0, 1, 17, 15, 14, 2, 3, 4, 19, 9, 8, 18, 7, 16, 13}}, {Pairings: []int32{5, 3, 4, 1, 2, 0, 9, 14, 12, 6, 11, 10, 8, 18, 7, 16, 15, 19, 13, 17}},
		},
		DivisionResults: []*pb.RoundResults{
			{Results: []int32{445, 350, 530, 494, 445, 461, 524, 404, 398, 413, 456, 400, 411, 403, 462, 351, 303, 387, 391, 436}}, {Results: []int32{385, 502, 438, 474, 400, 396, 542, 385, 394, 479, 377, 410, 419, 492, 341, 382, 390, 389, 392, 437}}, {Results: []int32{435, 453, 389, 482, 599, 471, 430, 389, 412, 338, 442, 447, 459, 477, 421, 371, 415, 333, 353, 478}}, {Results: []int32{436, 488, 492, 544, 486, 431, 602, 344, 412, 361, 530, 390, 452, 409, 252, 383, 322, 446, 348, 377}}, {Results: []int32{547, 512, 332, 487, 452, 440, 395, 365, 392, 413, 457, 471, 274, 434, 419, 384, 436, 461, 449, 332}}, {Results: []int32{420, 447, 405, 459, 440, 569, 330, 567, 373, 428, 455, 491, 368, 468, 435, 366, 347, 326, 433, 322}}, {Results: []int32{441, 398, 492, 508, 414, 518, 469, 385, 368, 454, 466, 434, 336, 300, 395, 467, 328, 396, 416, 403}}, {Results: []int32{517, 552, 418, 410, 502, 404, 447, 450, 406, 395, 624, 461, 417, 336, 441, 391, 295, 280, 486, 429}}, {Results: []int32{505, 484, 366, 446, 439, 508, 435, 356, 389, 367, 481, 526, 451, 324, 408, 350, 418, 480, 402, 347}}, {Results: []int32{426, 557, 478, 429, 456, 429, 481, 452, 419, 395, 458, 359, 379, 395, 376, 319, 449, 350, 367, 383}}, {Results: []int32{453, 415, 510, 378, 378, 426, 354, 557, 378, 474, 492, 456, 397, 499, 339, 338, 385, 404, 369, 454}}, {Results: []int32{569, 400, 518, 381, 539, 472, 338, 401, 458, 421, 514, 429, 442, 493, 310, 287, 463, 390, 373, 381}}, {Results: []int32{432, 408, 507, 525, 500, 392, 513, 383, 370, 468, 426, 271, 486, 384, 348, 391, 341, 436, 380, 314}}, {Results: []int32{571, 543, 363, 332, 476, 440, 413, 434, 488, 429, 397, 309, 495, 403, 279, 331, 419, 414, 369, 352}}, {Results: []int32{396, 502, 461, 492, 405, 450, 527, 384, 426, 404, 415, 508, 388, 432, 392, 416, 301, 363, 412, 278}}, {Results: []int32{412, 428, 356, 444, 462, 351, 487, 372, 424, 444, 324, 466, 394, 349, 366, 380, 468, 380, 471, 360}}, {Results: []int32{540, 449, 406, 415, 478, 489, 436, 402, 480, 391, 400, 281, 501, 452, 527, 274, 369, 368, 284, 385}}, {Results: []int32{480, 456, 389, 399, 469, 323, 487, 353, 430, 388, 469, 447, 464, 411, 448, 427, 423, 330, 304, 434}}, {Results: []int32{542, 487, 390, 354, 461, 454, 422, 379, 414, 508, 355, 387, 457, 392, 374, 353, 441, 423, 273, 436}}, {Results: []int32{418, 430, 555, 404, 401, 532, 491, 425, 251, 362, 337, 310, 266, 446, 490, 286, 284, 427, 412, 424}}, {Results: []int32{398, 395, 409, 484, 336, 469, 561, 409, 417, 465, 406, 428, 518, 449, 359, 496, 378, 361, 347, 410}}, {Results: []int32{475, 355, 445, 398, 401, 545, 528, 504, 476, 270, 461, 430, 540, 395, 462, 317, 403, 348, 392, 453}}, {Results: []int32{499, 428, 380, 504, 475, 454, 432, 464, 393, 307, 384, 368, 433, 339, 448, 359, 435, 435, 478, 419}}, {Results: []int32{446, 410, 473, 432, 364, 320, 509, 495, 359, 431, 410, 520, 355, 391, 285, 479, 535, 379, 406, 376}}, {Results: []int32{468, 454, 415, 420, 455, 382, 462, 383, 436, 426, 367, 453, 423, 431, 473, 461, 428, 346, 351, 374}}, {Results: []int32{435, 500, 407, 513, 569, 385, 396, 441, 568, 429, 407, 392, 387, 393, 310, 279, 465, 423, 402, 351}}, {Results: []int32{377, 445, 473, 375, 487, 493, 503, 406, 400, 458, 406, 366, 409, 431, 379, 469, 332, 437, 455, 348}},
		},
		ClassPrizes:                []int32{2},
		GibsonSpread:               250,
		ControlLossThreshold:       0.25,
		HopefulnessThreshold:       0.1,
		AllPlayers:                 20,
		ValidPlayers:               20,
		Rounds:                     28,
		PlacePrizes:                4,
		DivisionSims:               5000,
		ControlLossSims:            5000,
		ControlLossActivationRound: 28,
		AllowRepeatByes:            true,
		RemovedPlayers:             []int32{},
		Seed:                       1736204625,
	}
	return request
}

func CreateAlbanyCSWNewYearsAfterRound27LastRoundPartiallyPairedPairRequest() *pb.PairRequest {
	request := &pb.PairRequest{
		PairMethod:    pb.PairMethod_COP,
		PlayerNames:   []string{"Joshua Castellano", "Austin Shin", "Dennis Ikekeregor", "Matthew OConnor", "Josh Sokol", "Ben Schoenbrun", "Jason Keller", "Becky Dyer", "Robert Linn", "Jason Ubeika", "Tim Weiss", "Daniel Blake", "Niel Gan", "Terry Kang", "Lindsay Shin", "Steve Ozorio", "Heidi Robertson", "Shauna Petrie", "Judy Cole", "Kaia"},
		PlayerClasses: []int32{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		DivisionPairings: []*pb.RoundPairings{
			{Pairings: []int32{13, 14, 12, 16, 10, 18, 8, 19, 6, 17, 4, 15, 2, 0, 1, 11, 3, 9, 5, 7}}, {Pairings: []int32{17, 6, 4, 8, 2, 10, 1, 12, 3, 14, 5, 16, 7, 18, 9, 19, 11, 0, 13, 15}}, {Pairings: []int32{3, 5, 7, 0, 9, 1, 11, 2, 13, 4, 15, 6, 17, 8, 19, 10, 18, 12, 16, 14}}, {Pairings: []int32{10, 19, 18, 17, 16, 15, 14, 13, 12, 11, 0, 9, 8, 7, 6, 5, 4, 3, 2, 1}}, {Pairings: []int32{19, 2, 1, 4, 3, 6, 5, 8, 7, 10, 9, 12, 11, 14, 13, 16, 15, 18, 17, 0}}, {Pairings: []int32{6, 12, 10, 14, 8, 16, 0, 18, 4, 19, 2, 17, 1, 15, 3, 13, 5, 11, 7, 9}}, {Pairings: []int32{8, 16, 14, 18, 12, 19, 10, 17, 0, 15, 6, 13, 4, 11, 2, 9, 1, 7, 3, 5}}, {Pairings: []int32{7, 13, 15, 11, 17, 9, 19, 0, 18, 5, 16, 3, 14, 1, 12, 2, 10, 4, 8, 6}}, {Pairings: []int32{2, 4, 0, 6, 1, 8, 3, 10, 5, 12, 7, 14, 9, 16, 11, 18, 13, 19, 15, 17}}, {Pairings: []int32{12, 15, 17, 13, 19, 11, 18, 9, 16, 7, 14, 5, 0, 3, 10, 1, 8, 2, 6, 4}}, {Pairings: []int32{4, 8, 6, 10, 0, 12, 2, 14, 1, 16, 3, 18, 5, 19, 7, 17, 9, 15, 11, 13}}, {Pairings: []int32{14, 11, 13, 9, 15, 7, 17, 5, 19, 3, 18, 1, 16, 2, 0, 4, 12, 6, 10, 8}}, {Pairings: []int32{5, 9, 11, 7, 13, 0, 15, 3, 17, 1, 19, 2, 18, 4, 16, 6, 14, 8, 12, 10}}, {Pairings: []int32{11, 18, 16, 19, 14, 17, 12, 15, 10, 13, 8, 0, 6, 9, 4, 7, 2, 5, 1, 3}}, {Pairings: []int32{9, 17, 19, 15, 18, 13, 16, 11, 14, 0, 12, 7, 10, 5, 8, 3, 6, 1, 4, 2}}, {Pairings: []int32{1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14, 17, 16, 19, 18}}, {Pairings: []int32{16, 7, 9, 5, 11, 3, 13, 1, 15, 2, 17, 4, 19, 6, 18, 8, 0, 10, 14, 12}}, {Pairings: []int32{18, 3, 5, 1, 7, 2, 9, 4, 11, 6, 13, 8, 15, 10, 17, 12, 19, 14, 0, 16}}, {Pairings: []int32{15, 10, 8, 12, 6, 14, 4, 16, 2, 18, 1, 19, 3, 17, 5, 0, 7, 13, 9, 11}}, {Pairings: []int32{5, 10, 11, 12, 6, 0, 4, 19, 14, 13, 1, 2, 3, 9, 8, 18, 17, 16, 15, 7}}, {Pairings: []int32{4, 11, 6, 9, 0, 10, 2, 18, 16, 3, 5, 1, 17, 14, 13, 19, 8, 12, 7, 15}}, {Pairings: []int32{3, 2, 1, 0, 10, 11, 17, 15, 13, 12, 4, 5, 9, 8, 16, 7, 14, 6, 19, 18}}, {Pairings: []int32{10, 5, 12, 6, 11, 1, 3, 16, 18, 17, 0, 4, 2, 15, 19, 13, 7, 9, 8, 14}}, {Pairings: []int32{11, 5, 4, 10, 2, 1, 12, 8, 7, 18, 3, 0, 6, 17, 15, 14, 19, 13, 9, 16}}, {Pairings: []int32{5, 4, 3, 2, 1, 0, 11, 9, 19, 7, 12, 6, 10, 16, 18, 17, 13, 15, 14, 8}}, {Pairings: []int32{5, 6, 10, 11, 12, 0, 1, 17, 15, 14, 2, 3, 4, 19, 9, 8, 18, 7, 16, 13}}, {Pairings: []int32{5, 3, 4, 1, 2, 0, 9, 14, 12, 6, 11, 10, 8, 18, 7, 16, 15, 19, 13, 17}}, {Pairings: []int32{-1, -1, -1, -1, -1, -1, -1, 7, 12, -1, -1, -1, 8, -1, -1, -1, -1, -1, -1, -1}},
		},
		DivisionResults: []*pb.RoundResults{
			{Results: []int32{445, 350, 530, 494, 445, 461, 524, 404, 398, 413, 456, 400, 411, 403, 462, 351, 303, 387, 391, 436}}, {Results: []int32{385, 502, 438, 474, 400, 396, 542, 385, 394, 479, 377, 410, 419, 492, 341, 382, 390, 389, 392, 437}}, {Results: []int32{435, 453, 389, 482, 599, 471, 430, 389, 412, 338, 442, 447, 459, 477, 421, 371, 415, 333, 353, 478}}, {Results: []int32{436, 488, 492, 544, 486, 431, 602, 344, 412, 361, 530, 390, 452, 409, 252, 383, 322, 446, 348, 377}}, {Results: []int32{547, 512, 332, 487, 452, 440, 395, 365, 392, 413, 457, 471, 274, 434, 419, 384, 436, 461, 449, 332}}, {Results: []int32{420, 447, 405, 459, 440, 569, 330, 567, 373, 428, 455, 491, 368, 468, 435, 366, 347, 326, 433, 322}}, {Results: []int32{441, 398, 492, 508, 414, 518, 469, 385, 368, 454, 466, 434, 336, 300, 395, 467, 328, 396, 416, 403}}, {Results: []int32{517, 552, 418, 410, 502, 404, 447, 450, 406, 395, 624, 461, 417, 336, 441, 391, 295, 280, 486, 429}}, {Results: []int32{505, 484, 366, 446, 439, 508, 435, 356, 389, 367, 481, 526, 451, 324, 408, 350, 418, 480, 402, 347}}, {Results: []int32{426, 557, 478, 429, 456, 429, 481, 452, 419, 395, 458, 359, 379, 395, 376, 319, 449, 350, 367, 383}}, {Results: []int32{453, 415, 510, 378, 378, 426, 354, 557, 378, 474, 492, 456, 397, 499, 339, 338, 385, 404, 369, 454}}, {Results: []int32{569, 400, 518, 381, 539, 472, 338, 401, 458, 421, 514, 429, 442, 493, 310, 287, 463, 390, 373, 381}}, {Results: []int32{432, 408, 507, 525, 500, 392, 513, 383, 370, 468, 426, 271, 486, 384, 348, 391, 341, 436, 380, 314}}, {Results: []int32{571, 543, 363, 332, 476, 440, 413, 434, 488, 429, 397, 309, 495, 403, 279, 331, 419, 414, 369, 352}}, {Results: []int32{396, 502, 461, 492, 405, 450, 527, 384, 426, 404, 415, 508, 388, 432, 392, 416, 301, 363, 412, 278}}, {Results: []int32{412, 428, 356, 444, 462, 351, 487, 372, 424, 444, 324, 466, 394, 349, 366, 380, 468, 380, 471, 360}}, {Results: []int32{540, 449, 406, 415, 478, 489, 436, 402, 480, 391, 400, 281, 501, 452, 527, 274, 369, 368, 284, 385}}, {Results: []int32{480, 456, 389, 399, 469, 323, 487, 353, 430, 388, 469, 447, 464, 411, 448, 427, 423, 330, 304, 434}}, {Results: []int32{542, 487, 390, 354, 461, 454, 422, 379, 414, 508, 355, 387, 457, 392, 374, 353, 441, 423, 273, 436}}, {Results: []int32{418, 430, 555, 404, 401, 532, 491, 425, 251, 362, 337, 310, 266, 446, 490, 286, 284, 427, 412, 424}}, {Results: []int32{398, 395, 409, 484, 336, 469, 561, 409, 417, 465, 406, 428, 518, 449, 359, 496, 378, 361, 347, 410}}, {Results: []int32{475, 355, 445, 398, 401, 545, 528, 504, 476, 270, 461, 430, 540, 395, 462, 317, 403, 348, 392, 453}}, {Results: []int32{499, 428, 380, 504, 475, 454, 432, 464, 393, 307, 384, 368, 433, 339, 448, 359, 435, 435, 478, 419}}, {Results: []int32{446, 410, 473, 432, 364, 320, 509, 495, 359, 431, 410, 520, 355, 391, 285, 479, 535, 379, 406, 376}}, {Results: []int32{468, 454, 415, 420, 455, 382, 462, 383, 436, 426, 367, 453, 423, 431, 473, 461, 428, 346, 351, 374}}, {Results: []int32{435, 500, 407, 513, 569, 385, 396, 441, 568, 429, 407, 392, 387, 393, 310, 279, 465, 423, 402, 351}}, {Results: []int32{377, 445, 473, 375, 487, 493, 503, 406, 400, 458, 406, 366, 409, 431, 379, 469, 332, 437, 455, 348}},
		},
		ClassPrizes:                []int32{2},
		GibsonSpread:               200,
		ControlLossThreshold:       0.25,
		HopefulnessThreshold:       0.01,
		AllPlayers:                 20,
		ValidPlayers:               20,
		Rounds:                     28,
		PlacePrizes:                4,
		DivisionSims:               5000,
		ControlLossSims:            5000,
		ControlLossActivationRound: 28,
		AllowRepeatByes:            true,
		RemovedPlayers:             []int32{},
		Seed:                       1736311508,
	}
	return request
}

func CreateAlbanyCSWNewYearsRound25PartiallyPairedPairRequest() *pb.PairRequest {
	request := &pb.PairRequest{
		PairMethod:    pb.PairMethod_COP,
		PlayerNames:   []string{"Joshua Castellano", "Austin Shin", "Dennis Ikekeregor", "Matthew OConnor", "Josh Sokol", "Ben Schoenbrun", "Jason Keller", "Becky Dyer", "Robert Linn", "Jason Ubeika", "Tim Weiss", "Daniel Blake", "Niel Gan", "Terry Kang", "Lindsay Shin", "Steve Ozorio", "Heidi Robertson", "Shauna Petrie", "Judy Cole", "Kaia"},
		PlayerClasses: []int32{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		DivisionPairings: []*pb.RoundPairings{
			{Pairings: []int32{13, 14, 12, 16, 10, 18, 8, 19, 6, 17, 4, 15, 2, 0, 1, 11, 3, 9, 5, 7}}, {Pairings: []int32{17, 6, 4, 8, 2, 10, 1, 12, 3, 14, 5, 16, 7, 18, 9, 19, 11, 0, 13, 15}}, {Pairings: []int32{3, 5, 7, 0, 9, 1, 11, 2, 13, 4, 15, 6, 17, 8, 19, 10, 18, 12, 16, 14}}, {Pairings: []int32{10, 19, 18, 17, 16, 15, 14, 13, 12, 11, 0, 9, 8, 7, 6, 5, 4, 3, 2, 1}}, {Pairings: []int32{19, 2, 1, 4, 3, 6, 5, 8, 7, 10, 9, 12, 11, 14, 13, 16, 15, 18, 17, 0}}, {Pairings: []int32{6, 12, 10, 14, 8, 16, 0, 18, 4, 19, 2, 17, 1, 15, 3, 13, 5, 11, 7, 9}}, {Pairings: []int32{8, 16, 14, 18, 12, 19, 10, 17, 0, 15, 6, 13, 4, 11, 2, 9, 1, 7, 3, 5}}, {Pairings: []int32{7, 13, 15, 11, 17, 9, 19, 0, 18, 5, 16, 3, 14, 1, 12, 2, 10, 4, 8, 6}}, {Pairings: []int32{2, 4, 0, 6, 1, 8, 3, 10, 5, 12, 7, 14, 9, 16, 11, 18, 13, 19, 15, 17}}, {Pairings: []int32{12, 15, 17, 13, 19, 11, 18, 9, 16, 7, 14, 5, 0, 3, 10, 1, 8, 2, 6, 4}}, {Pairings: []int32{4, 8, 6, 10, 0, 12, 2, 14, 1, 16, 3, 18, 5, 19, 7, 17, 9, 15, 11, 13}}, {Pairings: []int32{14, 11, 13, 9, 15, 7, 17, 5, 19, 3, 18, 1, 16, 2, 0, 4, 12, 6, 10, 8}}, {Pairings: []int32{5, 9, 11, 7, 13, 0, 15, 3, 17, 1, 19, 2, 18, 4, 16, 6, 14, 8, 12, 10}}, {Pairings: []int32{11, 18, 16, 19, 14, 17, 12, 15, 10, 13, 8, 0, 6, 9, 4, 7, 2, 5, 1, 3}}, {Pairings: []int32{9, 17, 19, 15, 18, 13, 16, 11, 14, 0, 12, 7, 10, 5, 8, 3, 6, 1, 4, 2}}, {Pairings: []int32{1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14, 17, 16, 19, 18}}, {Pairings: []int32{16, 7, 9, 5, 11, 3, 13, 1, 15, 2, 17, 4, 19, 6, 18, 8, 0, 10, 14, 12}}, {Pairings: []int32{18, 3, 5, 1, 7, 2, 9, 4, 11, 6, 13, 8, 15, 10, 17, 12, 19, 14, 0, 16}}, {Pairings: []int32{15, 10, 8, 12, 6, 14, 4, 16, 2, 18, 1, 19, 3, 17, 5, 0, 7, 13, 9, 11}}, {Pairings: []int32{5, 10, 11, 12, 6, 0, 4, 19, 14, 13, 1, 2, 3, 9, 8, 18, 17, 16, 15, 7}}, {Pairings: []int32{4, 11, 6, 9, 0, 10, 2, 18, 16, 3, 5, 1, 17, 14, 13, 19, 8, 12, 7, 15}}, {Pairings: []int32{3, 2, 1, 0, 10, 11, 17, 15, 13, 12, 4, 5, 9, 8, 16, 7, 14, 6, 19, 18}}, {Pairings: []int32{10, 5, 12, 6, 11, 1, 3, 16, 18, 17, 0, 4, 2, 15, 19, 13, 7, 9, 8, 14}}, {Pairings: []int32{11, 5, 4, 10, 2, 1, 12, 8, 7, 18, 3, 0, 6, 17, 15, 14, 19, 13, 9, 16}}, {Pairings: []int32{-1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, 19, -1, -1, -1, 15, -1, -1, -1, 11}},
		},
		DivisionResults: []*pb.RoundResults{
			{Results: []int32{445, 350, 530, 494, 445, 461, 524, 404, 398, 413, 456, 400, 411, 403, 462, 351, 303, 387, 391, 436}}, {Results: []int32{385, 502, 438, 474, 400, 396, 542, 385, 394, 479, 377, 410, 419, 492, 341, 382, 390, 389, 392, 437}}, {Results: []int32{435, 453, 389, 482, 599, 471, 430, 389, 412, 338, 442, 447, 459, 477, 421, 371, 415, 333, 353, 478}}, {Results: []int32{436, 488, 492, 544, 486, 431, 602, 344, 412, 361, 530, 390, 452, 409, 252, 383, 322, 446, 348, 377}}, {Results: []int32{547, 512, 332, 487, 452, 440, 395, 365, 392, 413, 457, 471, 274, 434, 419, 384, 436, 461, 449, 332}}, {Results: []int32{420, 447, 405, 459, 440, 569, 330, 567, 373, 428, 455, 491, 368, 468, 435, 366, 347, 326, 433, 322}}, {Results: []int32{441, 398, 492, 508, 414, 518, 469, 385, 368, 454, 466, 434, 336, 300, 395, 467, 328, 396, 416, 403}}, {Results: []int32{517, 552, 418, 410, 502, 404, 447, 450, 406, 395, 624, 461, 417, 336, 441, 391, 295, 280, 486, 429}}, {Results: []int32{505, 484, 366, 446, 439, 508, 435, 356, 389, 367, 481, 526, 451, 324, 408, 350, 418, 480, 402, 347}}, {Results: []int32{426, 557, 478, 429, 456, 429, 481, 452, 419, 395, 458, 359, 379, 395, 376, 319, 449, 350, 367, 383}}, {Results: []int32{453, 415, 510, 378, 378, 426, 354, 557, 378, 474, 492, 456, 397, 499, 339, 338, 385, 404, 369, 454}}, {Results: []int32{569, 400, 518, 381, 539, 472, 338, 401, 458, 421, 514, 429, 442, 493, 310, 287, 463, 390, 373, 381}}, {Results: []int32{432, 408, 507, 525, 500, 392, 513, 383, 370, 468, 426, 271, 486, 384, 348, 391, 341, 436, 380, 314}}, {Results: []int32{571, 543, 363, 332, 476, 440, 413, 434, 488, 429, 397, 309, 495, 403, 279, 331, 419, 414, 369, 352}}, {Results: []int32{396, 502, 461, 492, 405, 450, 527, 384, 426, 404, 415, 508, 388, 432, 392, 416, 301, 363, 412, 278}}, {Results: []int32{412, 428, 356, 444, 462, 351, 487, 372, 424, 444, 324, 466, 394, 349, 366, 380, 468, 380, 471, 360}}, {Results: []int32{540, 449, 406, 415, 478, 489, 436, 402, 480, 391, 400, 281, 501, 452, 527, 274, 369, 368, 284, 385}}, {Results: []int32{480, 456, 389, 399, 469, 323, 487, 353, 430, 388, 469, 447, 464, 411, 448, 427, 423, 330, 304, 434}}, {Results: []int32{542, 487, 390, 354, 461, 454, 422, 379, 414, 508, 355, 387, 457, 392, 374, 353, 441, 423, 273, 436}}, {Results: []int32{418, 430, 555, 404, 401, 532, 491, 425, 251, 362, 337, 310, 266, 446, 490, 286, 284, 427, 412, 424}}, {Results: []int32{398, 395, 409, 484, 336, 469, 561, 409, 417, 465, 406, 428, 518, 449, 359, 496, 378, 361, 347, 410}}, {Results: []int32{475, 355, 445, 398, 401, 545, 528, 504, 476, 270, 461, 430, 540, 395, 462, 317, 403, 348, 392, 453}}, {Results: []int32{499, 428, 380, 504, 475, 454, 432, 464, 393, 307, 384, 368, 433, 339, 448, 359, 435, 435, 478, 419}}, {Results: []int32{446, 410, 473, 432, 364, 320, 509, 495, 359, 431, 410, 520, 355, 391, 285, 479, 535, 379, 406, 376}},
		},
		ClassPrizes:                []int32{2},
		GibsonSpread:               200,
		ControlLossThreshold:       0.25,
		HopefulnessThreshold:       0.05,
		AllPlayers:                 20,
		ValidPlayers:               20,
		Rounds:                     28,
		PlacePrizes:                4,
		DivisionSims:               5000,
		ControlLossSims:            5000,
		ControlLossActivationRound: 28,
		AllowRepeatByes:            true,
		RemovedPlayers:             []int32{},
		Seed:                       0,
	}
	return request
}

func CreateAlmostGibsonizedPairRequest() *pb.PairRequest {
	request := &pb.PairRequest{
		PairMethod:    pb.PairMethod_COP,
		PlayerNames:   []string{"JDH", "whatnoloan", "awesomeusername", "condorave", "Brainiac_614", "ArcG3", "CavemenRoad", "zman", "equilibria", "ElishasDad", "bynak", "aboocher", "Parkereon", "June9437", "k8e", "Smochi", "Seahawk12", "mmmmice", "Merris"},
		PlayerClasses: []int32{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		DivisionPairings: []*pb.RoundPairings{
			{Pairings: []int32{17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 18}}, {Pairings: []int32{2, 12, 0, 7, 11, 8, 13, 3, 5, 15, 14, 4, 1, 6, 10, 9, 16, 18, 17}}, {Pairings: []int32{13, 15, 6, 16, 18, 10, 2, 9, 17, 7, 5, 12, 11, 0, 14, 1, 3, 8, 4}}, {Pairings: []int32{3, 7, 14, 0, 17, 6, 5, 1, 8, 10, 9, 18, 15, 16, 2, 12, 13, 4, 11}}, {Pairings: []int32{5, 18, 11, 9, 16, 0, 6, 17, 14, 3, 15, 2, 13, 12, 8, 10, 4, 7, 1}}, {Pairings: []int32{14, 9, 3, 2, 15, 17, 12, 18, 13, 1, 16, 11, 6, 8, 0, 4, 10, 5, 7}}, {Pairings: []int32{16, 5, 10, 18, 7, 1, 14, 4, 12, 17, 2, 11, 8, 15, 6, 13, 0, 9, 3}}, {Pairings: []int32{4, 7, 5, 17, 0, 2, 8, 1, 6, 13, 18, 11, 16, 9, 15, 14, 12, 3, 10}},
		},
		DivisionResults: []*pb.RoundResults{
			{Results: []int32{307, 525, 360, 463, 451, 276, 346, 516, 303, 409, 457, 429, 377, 343, 312, 431, 285, 457, 50}}, {Results: []int32{459, 418, 191, 362, 378, 286, 314, 388, 220, 277, 452, 349, 287, 387, 304, 227, 50, 381, 400}}, {Results: []int32{350, 498, 414, 432, 352, 284, 299, 414, 305, 360, 383, 448, 238, 331, 50, 340, 393, 462, 443}}, {Results: []int32{374, 500, 364, 401, 425, 349, 334, 438, 50, 397, 317, 240, 285, 231, 285, 407, 330, 460, 594}}, {Results: []int32{310, 458, 406, 358, 448, 324, 50, 442, 156, 359, 368, 224, 297, 552, 206, 388, 297, 295, 419}}, {Results: []int32{409, 499, 268, 430, 461, 332, 411, 430, 277, 326, 352, -50, 311, 352, 331, 455, 277, 394, 307}}, {Results: []int32{329, 475, 293, 461, 388, 308, 322, 443, 287, 341, 430, -50, 290, 445, 363, 425, 209, 385, 359}}, {Results: []int32{350, 496, 320, 352, 355, 396, 387, 382, 292, 417, 280, -50, 390, 327, 366, 367, 284, 329, 401}},
		},

		GibsonSpread:               200,
		ControlLossThreshold:       0.25,
		HopefulnessThreshold:       0.1,
		AllPlayers:                 19,
		ValidPlayers:               18,
		Rounds:                     10,
		PlacePrizes:                4,
		DivisionSims:               100000,
		ControlLossSims:            10000,
		ControlLossActivationRound: 7,
		AllowRepeatByes:            false,
		RemovedPlayers:             []int32{11},
		Seed:                       0,
	}
	return request
}

func CreateBLSRound32PairRequest() *pb.PairRequest {
	request := &pb.PairRequest{
		PairMethod:    pb.PairMethod_COP,
		PlayerNames:   []string{"Harshan Lamabadusuriya", "Wellington Jighere", "Will Anderson", "Adam Logan", "Nsikak Etim", "Dennis Ikekeregor", "Ben Schoenbrun", "Austin Shin", "Kevin Fraley", "Matthew Tunnicliffe", "Thomas Reinke", "Josh Sokol", "Edgar Odongkara", "Josh Castellano", "Chukwudi Ehibudu", "Jason Keller", "Nwali Enoch", "Noah Slatkoff", "Matthew OConnor", "Chris Lipe", "Joel Wapnick", "Charles Reinke", "Sohaib Sanaullah", "Robert Linn", "Bradley Whitmarsh", "Rasheed Balogun", "Oshevire Avwenagha", "Laurie Cohen", "Sammy Okosagah", "Winter", "Tim Weiss", "Mike Johnson", "Samuel Anikoh", "Amit Chakrabarti", "Jason Carney", "Jared Robinson", "Paul Epstein", "Jason Ubeika", "Becky Dyer", "BJ Premore", "Niel Gan", "Mohammad Sulaiman", "Andrew Golding", "Carson Ip", "Azmil Aziz", "Euclid Hui", "Michael Fleck", "Mark Francillon", "Osikhena Ojior", "Daniel Blake", "Steve Krieger", "Daniyal Sanaullah"},
		PlayerClasses: []int32{0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 3, 1, 1, 1},
		DivisionPairings: []*pb.RoundPairings{
			{Pairings: []int32{40, 41, 47, 37, 50, 19, 43, 42, 39, 51, 46, 44, 27, 38, 49, 31, 36, 29, 32, 5, 28, 35, 23, 22, 34, 25, 30, 12, 20, 17, 26, 15, 18, 33, 24, 21, 16, 3, 13, 8, 0, 1, 7, 6, 11, 48, 10, 2, 45, 14, 4, 9}}, {Pairings: []int32{29, 27, 48, 32, 28, 13, 31, 30, 34, 36, 33, 22, 41, 5, 35, 43, 51, 40, 37, 38, 50, 49, 11, 44, 39, 25, 42, 1, 4, 0, 7, 6, 3, 10, 8, 14, 9, 18, 19, 24, 17, 12, 26, 15, 23, 47, 46, 45, 2, 21, 20, 16}}, {Pairings: []int32{17, 12, 45, 18, 20, 38, 15, 26, 24, 16, 10, 23, 1, 19, 21, 6, 9, 0, 3, 13, 4, 14, 44, 11, 8, 25, 7, 41, 50, 40, 42, 43, 37, 46, 39, 49, 51, 32, 5, 34, 29, 27, 30, 31, 22, 2, 33, 48, 47, 35, 28, 36}}, {Pairings: []int32{21, 23, 34, 13, 29, 7, 46, 5, 18, 35, 42, 17, 26, 3, 38, 24, 48, 11, 8, 19, 47, 0, 33, 1, 15, 25, 12, 43, 36, 4, 41, 40, 39, 22, 2, 9, 28, 51, 14, 32, 31, 30, 10, 27, 50, 49, 6, 20, 16, 45, 44, 37}}, {Pairings: []int32{10, 22, 15, 48, 18, 12, 16, 11, 47, 31, 0, 7, 5, 24, 41, 2, 6, 35, 4, 21, 51, 19, 1, 37, 13, 25, 43, 27, 42, 45, 39, 9, 36, 49, 50, 17, 32, 23, 40, 30, 38, 14, 28, 26, 46, 29, 44, 8, 3, 33, 34, 20}}, {Pairings: []int32{32, 18, 31, 33, 16, 21, 22, 13, 11, 48, 19, 8, 45, 7, 42, 36, 4, 38, 1, 10, 46, 5, 6, 27, 28, 25, 35, 23, 24, 49, 43, 2, 0, 3, 34, 26, 15, 50, 17, 40, 39, 47, 14, 30, 51, 12, 20, 41, 9, 29, 37, 44}}, {Pairings: []int32{43, 16, 42, 51, 22, 11, 18, 28, 33, 32, 29, 5, 49, 41, 24, 45, 1, 39, 6, 48, 23, 36, 4, 20, 14, 50, 40, 44, 7, 10, 31, 30, 9, 8, 37, 38, 21, 34, 35, 17, 26, 13, 2, 0, 27, 15, 47, 46, 19, 12, 25, 3}}, {Pairings: []int32{51, 6, 38, 34, 7, 24, 1, 4, 9, 8, 43, 33, 21, 46, 47, 32, 22, 44, 41, 28, 39, 12, 16, 49, 5, 40, 36, 50, 19, 42, 35, 45, 15, 11, 3, 30, 26, 48, 2, 20, 25, 18, 29, 10, 17, 31, 13, 14, 37, 23, 27, 0}}, {Pairings: []int32{46, 4, 35, 12, 1, 48, 10, 24, 29, 14, 6, 13, 3, 11, 9, 38, 28, 34, 22, 45, 49, 39, 18, 47, 7, 44, 32, 30, 16, 8, 27, 42, 26, 41, 17, 2, 37, 36, 15, 21, 50, 33, 31, 51, 25, 19, 0, 23, 5, 20, 40, 43}}, {Pairings: []int32{1, 0, 32, 15, 46, 35, 14, 29, 41, 10, 9, 24, 48, 33, 6, 3, 18, 36, 16, 31, 25, 51, 28, 43, 11, 20, 38, 39, 22, 7, 37, 19, 2, 13, 47, 5, 17, 30, 26, 27, 44, 8, 45, 23, 40, 42, 4, 34, 12, 50, 49, 21}}, {Pairings: []int32{22, 9, 10, 42, 6, 17, 4, 45, 12, 1, 2, 15, 8, 28, 31, 11, 24, 5, 33, 36, 37, 50, 0, 34, 16, 27, 47, 25, 13, 46, 51, 14, 41, 18, 23, 48, 19, 20, 39, 38, 43, 32, 3, 40, 49, 7, 29, 26, 35, 44, 21, 30}}, {Pairings: []int32{16, 10, 22, 45, 13, 31, 7, 6, 48, 24, 1, 46, 38, 4, 15, 14, 0, 41, 28, 27, 26, 44, 2, 35, 9, 49, 20, 19, 18, 33, 36, 5, 42, 29, 40, 23, 30, 39, 12, 37, 34, 17, 32, 50, 21, 3, 11, 51, 8, 25, 43, 47}}, {Pairings: []int32{18, 7, 5, 41, 8, 2, 28, 1, 4, 11, 15, 9, 40, 16, 17, 10, 13, 14, 0, 35, 45, 34, 30, 36, 38, 37, 46, 49, 6, 31, 22, 29, 33, 32, 21, 19, 23, 25, 24, 48, 12, 3, 51, 44, 43, 20, 26, 50, 39, 27, 47, 42}}, {Pairings: []int32{6, 13, 4, 31, 2, 9, 0, 18, 15, 5, 11, 10, 33, 1, 19, 8, 41, 23, 7, 14, 21, 20, 38, 17, 26, 43, 24, 47, 29, 28, 46, 3, 40, 12, 45, 39, 49, 44, 22, 35, 32, 16, 50, 25, 37, 34, 30, 27, 51, 36, 42, 48}}, {Pairings: []int32{2, 3, 0, 1, 26, 8, 9, 16, 5, 6, 41, 32, 39, 15, 27, 13, 7, 46, 29, 34, 22, 33, 20, 42, 35, 47, 4, 14, 31, 18, 38, 28, 11, 21, 19, 24, 44, 43, 30, 12, 45, 10, 23, 37, 36, 40, 17, 25, 49, 48, 51, 50}}, {Pairings: []int32{28, 2, 1, 7, 21, 46, 29, 3, 38, 18, 17, 41, 13, 12, 23, 39, 31, 10, 9, 43, 40, 4, 26, 14, 42, 45, 22, 51, 0, 6, 32, 16, 30, 37, 35, 34, 50, 33, 8, 15, 20, 11, 24, 19, 48, 25, 5, 49, 44, 47, 36, 27}}, {Pairings: []int32{13, 17, 28, 38, 14, 23, 20, 33, 16, 40, 35, 30, 24, 0, 4, 18, 8, 1, 15, 46, 6, 27, 37, 5, 12, 41, 29, 21, 2, 26, 11, 39, 43, 7, 42, 10, 48, 22, 3, 31, 9, 25, 34, 32, 47, 50, 19, 44, 36, 51, 45, 49}}, {Pairings: []int32{41, 29, 13, 20, 5, 4, 33, 25, 19, 28, 38, 14, 30, 2, 11, 16, 15, 18, 17, 8, 3, 22, 21, 26, 31, 7, 23, 32, 9, 1, 12, 24, 27, 6, 51, 42, 47, 40, 10, 46, 37, 0, 35, 49, 45, 44, 39, 36, 50, 43, 48, 34}}, {Pairings: []int32{5, 11, 6, 9, 36, 0, 2, 14, 26, 3, 16, 1, 22, 37, 7, 19, 10, 25, 31, 15, 32, 38, 12, 39, 27, 17, 8, 24, 33, 30, 29, 18, 20, 28, 49, 44, 4, 13, 21, 23, 47, 42, 41, 48, 35, 51, 50, 40, 43, 34, 46, 45}}, {Pairings: []int32{30, 31, 11, 26, 51, 16, 41, 21, 32, 15, 37, 2, 14, 18, 12, 9, 5, 22, 13, 47, 33, 7, 17, 40, 49, 34, 3, 48, 45, 39, 0, 1, 8, 20, 25, 50, 42, 10, 44, 29, 23, 6, 36, 46, 38, 28, 43, 19, 27, 24, 35, 4}}, {Pairings: []int32{15, 8, 12, 4, 3, 37, 11, 19, 1, 13, 30, 6, 2, 9, 39, 0, 25, 21, 40, 7, 44, 17, 27, 31, 45, 16, 41, 22, 38, 32, 10, 23, 29, 50, 48, 36, 35, 5, 28, 14, 18, 26, 49, 47, 20, 24, 51, 43, 34, 42, 33, 46}}, {Pairings: []int32{12, 18, 7, 21, 35, 29, 25, 2, 28, 17, 22, 40, 0, 39, 37, 41, 32, 9, 1, 20, 19, 3, 10, 48, 43, 6, 50, 36, 8, 5, 45, 38, 16, 51, 44, 4, 27, 14, 31, 13, 11, 15, 47, 24, 34, 30, 49, 42, 23, 46, 26, 33}}, {Pairings: []int32{3, 16, 18, 0, 30, 6, 5, 8, 7, 12, 32, 37, 9, 23, 25, 29, 1, 31, 2, 42, 36, 28, 49, 13, 40, 14, 44, 34, 21, 15, 4, 17, 10, 47, 27, 41, 20, 11, 50, 51, 24, 35, 19, 45, 26, 43, 48, 33, 46, 22, 38, 39}}, {Pairings: []int32{14, 9, 40, 5, 34, 3, 32, 35, 31, 1, 18, 29, 16, 30, 0, 23, 12, 19, 10, 17, 48, 24, 41, 15, 21, 28, 51, 33, 25, 11, 13, 8, 6, 27, 4, 7, 43, 49, 47, 50, 2, 22, 44, 36, 42, 46, 45, 38, 20, 37, 39, 26}}, {Pairings: []int32{1, 0, 9, 8, 10, 43, 12, 17, 3, 2, 4, 35, 6, 18, 22, 40, 34, 7, 13, 29, 27, 31, 14, 51, 25, 24, 45, 20, 32, 19, 50, 21, 28, 44, 16, 11, 46, 41, 49, 47, 15, 37, 48, 5, 33, 26, 36, 39, 42, 38, 30, 23}}, {Pairings: []int32{6, 28, 16, 22, 17, 40, 0, 41, 14, 29, 13, 18, 19, 10, 8, 30, 2, 4, 11, 12, 43, 23, 3, 21, 50, 51, 49, 38, 1, 9, 15, 35, 34, 48, 32, 31, 45, 47, 27, 44, 5, 7, 46, 20, 39, 36, 42, 37, 33, 26, 24, 25}}, {Pairings: []int32{1, 0, 9, 6, 11, 28, 3, 40, 10, 2, 8, 4, 35, 14, 13, 22, 29, 27, 19, 18, 42, 43, 15, 41, 44, 36, 48, 17, 5, 16, 47, 34, 50, 45, 31, 12, 25, 46, 51, 49, 7, 23, 20, 21, 24, 33, 37, 30, 26, 39, 32, 38}}, {Pairings: []int32{8, 29, 17, 10, 41, 50, 34, 15, 0, 18, 3, 19, 46, 22, 28, 7, 35, 2, 9, 11, 30, 47, 13, 33, 51, 48, 37, 40, 14, 1, 20, 49, 44, 23, 6, 16, 38, 26, 36, 45, 27, 4, 43, 42, 32, 39, 12, 21, 25, 31, 5, 24}}, {Pairings: []int32{18, 9, 29, 19, 33, 44, 13, 22, 17, 1, 23, 16, 36, 6, 34, 28, 11, 8, 0, 3, 38, 48, 7, 10, 47, 26, 25, 35, 15, 2, 49, 51, 45, 4, 14, 27, 12, 42, 20, 43, 46, 50, 37, 39, 5, 32, 40, 24, 21, 30, 41, 31}}, {Pairings: []int32{9, 17, 18, 29, 15, 47, 23, 27, 13, 0, 12, 28, 10, 8, 16, 4, 14, 1, 2, 22, 24, 42, 19, 6, 20, 46, 39, 7, 11, 3, 34, 50, 49, 36, 30, 43, 33, 45, 48, 26, 51, 44, 21, 35, 41, 37, 25, 5, 38, 32, 31, 40}}, {Pairings: []int32{9, 18, 13, 16, 12, 26, 19, 29, 11, 0, 20, 8, 4, 2, 43, 21, 3, 28, 1, 6, 10, 15, 34, 50, 48, 42, 5, 37, 17, 7, 44, 47, 51, 35, 22, 33, 39, 27, 46, 36, 49, 45, 25, 14, 30, 41, 38, 31, 24, 40, 23, 32}},
		},
		DivisionResults: []*pb.RoundResults{
			{Results: []int32{564, 399, 378, 472, 488, 468, 553, 374, 498, 456, 428, 430, 450, 409, 401, 631, 493, 448, 439, 357, 414, 365, 593, 363, 489, -50, 375, 372, 522, 463, 508, 282, 420, 50, 369, 421, 368, 425, 353, 403, 349, 368, 542, 300, 403, 386, 462, 485, 399, 450, 304, 335}}, {Results: []int32{432, 505, 466, 398, 435, 309, 464, 528, 604, 439, 475, 407, 391, 520, 512, 532, 516, 481, 423, 382, 431, 441, 443, 431, 556, -50, 599, 404, 379, 450, 330, 454, 327, 442, 374, 349, 480, 418, 415, 348, 373, 487, 319, 369, 427, 487, 50, 346, 501, 408, 404, 402}}, {Results: []int32{509, 482, 460, 428, 447, 425, 467, 453, 513, 422, 50, 465, 385, 238, 449, 327, 530, 404, 476, 560, 412, 441, 461, 398, 346, -50, 358, 275, 508, 410, 363, 397, 437, 444, 433, 417, 400, 408, 331, 462, 497, 484, 382, 389, 399, 427, 320, 416, 386, 490, 413, 396}}, {Results: []int32{373, 486, 520, 442, 482, 416, 525, 447, 343, 484, 382, 481, 476, 472, 499, 424, 450, 389, 464, 50, 433, 486, 400, 376, 432, -50, 398, 319, 424, 372, 335, 431, 468, 398, 436, 424, 402, 474, 476, 376, 268, 374, 387, 450, 490, 450, 226, 472, 315, 438, 393, 477}}, {Results: []int32{379, 510, 529, 406, 418, 585, 447, 488, 451, 442, 534, 356, 335, 420, 386, 420, 417, 475, 460, 468, 389, 464, 272, 388, 275, -50, 349, 50, 493, 515, 484, 416, 431, 502, 515, 483, 415, 428, 502, 332, 400, 455, 466, 445, 344, 348, 423, 397, 408, 371, 436, 486}}, {Results: []int32{513, 494, 467, 381, 507, 431, 341, 459, 355, 465, 415, 443, 406, 339, 444, 522, 456, 409, 511, 429, 399, 419, 516, 530, 489, -50, 518, 307, 337, 471, 334, 541, 380, 405, 50, 347, 373, 454, 422, 416, 358, 454, 545, 446, 422, 478, 430, 299, 386, 280, 435, 425}}, {Results: []int32{504, 355, 518, 488, 351, 361, 350, 407, 522, 399, 481, 507, 450, 443, 408, 400, 463, 466, 463, 407, 547, 388, 493, 495, 397, 454, 442, 504, 430, 295, 495, 415, 451, 414, 509, 471, 501, 241, 390, 376, 316, 421, 352, 344, 448, 433, 468, 381, 445, 335, 441, 431}}, {Results: []int32{481, 501, 404, 451, 442, 406, 379, 439, 364, 466, 442, 402, 546, 337, 470, 462, 446, 501, 408, 432, 433, 390, 381, 542, 416, 410, 466, 485, 434, 459, 377, 402, 408, 415, 405, 448, 401, 463, 470, 446, 480, 349, 357, 430, 336, 323, 412, 372, 452, 322, 271, 261}}, {Results: []int32{524, 517, 442, 454, 460, 466, 408, 460, 404, 520, 403, 327, 505, 475, 435, 446, 486, 549, 549, 462, 380, 440, 438, 325, 516, 458, 358, 416, 373, 473, 475, 425, 423, 556, 349, 360, 413, 381, 411, 492, 399, 298, 406, 397, 346, 475, 469, 495, 446, 330, 397, 468}}, {Results: []int32{424, 451, 431, 427, 433, 411, 381, 485, 366, 424, 429, 469, 386, 515, 344, 359, 397, 483, 518, 391, 413, 447, 373, 447, 342, 403, 387, 486, 529, 426, 385, 395, 398, 348, 464, 368, 315, 501, 460, 367, 428, 390, 483, 388, 372, 452, 408, 349, 477, 445, 374, 363}}, {Results: []int32{544, 459, 487, 585, 400, 389, 516, 441, 441, 427, 516, 466, 484, 364, 319, 486, 600, 358, 384, 419, 554, 526, 332, 380, 465, 462, 460, 407, 389, 414, 444, 446, 334, 371, 437, 458, 444, 371, 438, 467, 434, 491, 252, 399, 372, 382, 411, 428, 300, 500, 438, 371}}, {Results: []int32{553, 508, 581, 565, 377, 430, 366, 461, 468, 542, 319, 471, 417, 488, 414, 476, 377, 388, 430, 483, 381, 521, 314, 441, 461, 445, 430, 391, 395, 528, 571, 442, 377, 402, 424, 370, 413, 468, 428, 482, 456, 512, 340, 454, 346, 315, 286, 433, 411, 406, 401, 455}}, {Results: []int32{430, 516, 513, 481, 414, 443, 489, 444, 486, 489, 466, 381, 537, 346, 429, 440, 451, 484, 414, 445, 481, 459, 427, 434, 415, 471, 420, 509, 474, 406, 474, 319, 557, 458, 337, 527, 408, 492, 469, 473, 345, 336, 410, 494, 371, 447, 356, 310, 348, 384, 465, 298}}, {Results: []int32{494, 469, 489, 380, 386, 325, 357, 379, 355, 460, 415, 469, 543, 388, 446, 513, 455, 395, 478, 295, 399, 369, 581, 354, 424, 426, 419, 424, 435, 394, 400, 433, 312, 360, 466, 340, 350, 497, 336, 512, 546, 397, 408, 356, 353, 414, 466, 444, 403, 422, 407, 455}}, {Results: []int32{357, 477, 519, 460, 389, 334, 314, 395, 495, 458, 401, 565, 412, 565, 458, 366, 531, 585, 425, 497, 428, 384, 441, 435, 469, 487, 492, 349, 316, 454, 473, 573, 338, 511, 433, 360, 347, 395, 454, 410, 513, 565, 431, 438, 362, 404, 261, 318, 537, 376, 512, 427}}, {Results: []int32{432, 363, 455, 425, 432, 434, 393, 536, 446, 477, 438, 529, 519, 351, 476, 503, 436, 457, 464, 420, 353, 437, 490, 327, 404, 459, 398, 564, 428, 582, 389, 397, 463, 427, 368, 408, 441, 444, 387, 426, 449, 381, 504, 346, 532, 357, 344, 389, 434, 373, 391, 459}}, {Results: []int32{484, 390, 446, 484, 486, 450, 442, 508, 475, 573, 591, 411, 484, 504, 323, 469, 429, 476, 380, 506, 420, 431, 447, 445, 417, 565, 453, 367, 416, 528, 427, 421, 471, 498, 372, 316, 445, 647, 416, 443, 379, 295, 364, 312, 337, 585, 449, 475, 419, 466, 375, 444}}, {Results: []int32{464, 420, 456, 586, 351, 495, 434, 412, 557, 480, 463, 433, 385, 426, 465, 366, 465, 414, 421, 383, 499, 359, 318, 448, 418, 406, 413, 315, 417, 342, 424, 429, 413, 357, 426, 380, 450, 455, 409, 524, 539, 326, 518, 415, 348, 487, 224, 375, 349, 456, 421, 492}}, {Results: []int32{488, 477, 360, 431, 529, 259, 475, 372, 492, 448, 520, 370, 374, 555, 409, 473, 366, 373, 484, 416, 340, 403, 507, 465, 411, 426, 473, 508, 458, 492, 465, 279, 519, 352, 448, 520, 302, 324, 440, 310, 403, 577, 342, 378, 456, 453, 376, 371, 417, 413, 461, 387}}, {Results: []int32{585, 456, 415, 458, 519, 590, 466, 375, 456, 473, 367, 319, 392, 388, 449, 443, 365, 469, 462, 582, 410, 438, 407, 335, 425, 482, 419, 559, 441, 517, 312, 437, 419, 433, 376, 488, 420, 498, 438, 361, 469, 321, 391, 481, 430, 405, 381, 388, 435, 300, 478, 453}}, {Results: []int32{540, 487, 414, 298, 468, 358, 402, 396, 509, 463, 538, 416, 491, 459, 419, 425, 466, 481, 434, 427, 556, 429, 357, 433, 465, 461, 328, 472, 523, 490, 312, 415, 380, 419, 467, 492, 383, 419, 294, 356, 401, 436, 440, 438, 417, 356, 453, 386, 433, 494, 383, 469}}, {Results: []int32{497, 497, 438, 461, 427, 409, 479, 500, 478, 315, 444, 572, 374, 559, 456, 528, 355, 438, 451, 506, 395, 402, 332, 413, 372, 436, 471, 428, 423, 479, 504, 418, 525, 444, 490, 430, 365, 363, 383, 429, 421, 372, 404, 457, 384, 423, 379, 399, 348, 463, 374, 347}}, {Results: []int32{529, 529, 512, 371, 428, 451, 415, 447, 286, 564, 431, 334, 340, 369, 371, 395, 469, 378, 446, 605, 456, 352, 515, 368, 469, 444, 353, 403, 557, 497, 424, 341, 411, 384, 483, 413, 360, 472, 500, 424, 350, 442, 390, 522, 420, 335, 351, 401, 422, 383, 494, 444}}, {Results: []int32{366, 366, 422, 420, 407, 343, 521, 402, 368, 531, 400, 444, 452, 448, 429, 463, 432, 400, 465, 537, 503, 532, 483, 314, 517, 442, 553, 668, 519, 369, 387, 389, 420, 285, 410, 489, 381, 404, 409, 345, 327, 366, 339, 421, 430, 429, 429, 324, 399, 474, 296, 363}}, {Results: []int32{570, 498, 410, 457, 601, 458, 485, 476, 417, 483, 315, 474, 388, 526, 367, 454, 501, 443, 377, 444, 439, 551, 456, 473, 419, 404, 340, 508, 463, 427, 504, 409, 300, 430, 402, 372, 351, 476, 488, 383, 368, 363, 502, 311, 373, 433, 426, 391, 427, 367, 324, 418}}, {Results: []int32{423, 503, 491, 362, 437, 464, 361, 438, 461, 560, 359, 469, 445, 381, 410, 422, 437, 520, 421, 565, 458, 354, 466, 392, 355, 405, 399, 458, 500, 358, 298, 379, 310, 540, 419, 406, 303, 471, 420, 463, 477, 496, 472, 308, 427, 525, 350, 486, 363, 482, 383, 443}}, {Results: []int32{449, 489, 440, 470, 397, 371, 402, 434, 431, 472, 388, 410, 393, 483, 507, 330, 608, 494, 538, 368, 532, 430, 460, 474, 325, 497, 376, 450, 616, 364, 462, 377, 470, 559, 561, 561, 407, 397, 390, 489, 377, 334, 347, 436, 447, 285, 356, 367, 379, 436, 371, 418}}, {Results: []int32{475, 431, 445, 487, 533, 332, 373, 492, 430, 370, 431, 437, 438, 476, 404, 377, 447, 454, 384, 349, 439, 386, 439, 431, 496, 406, 466, 482, 464, 485, 462, 387, 500, 432, 428, 481, 374, 441, 457, 469, 419, 393, 347, 576, 416, 409, 430, 356, 491, 428, 420, 387}}, {Results: []int32{470, 388, 485, 503, 523, 523, 444, 431, 329, 451, 371, 403, 462, 480, 527, 518, 563, 471, 383, 297, 362, 515, 476, 450, 418, 551, 311, 426, 336, 410, 513, 483, 332, 308, 326, 414, 329, 442, 469, 408, 439, 355, 417, 441, 358, 517, 399, 427, 386, 351, 419, 306}}, {Results: []int32{379, 420, 493, 490, 431, 400, 448, 445, 375, 478, 432, 392, 501, 552, 451, 307, 493, 396, 364, 386, 455, 528, 320, 368, 455, 427, 411, 423, 549, 387, 402, 315, 428, 565, 429, 426, 318, 484, 367, 495, 530, 473, 363, 388, 486, 374, 469, 441, 553, 399, 317, 426}}, {Results: []int32{429, 460, 377, 376, 439, 348, 473, 471, 425, 504, 475, 429, 432, 495, 372, 508, 341, 300, 369, 367, 392, 322, 402, 500, 542, 509, 361, 412, 506, 361, 453, 370, 572, 516, 448, 352, 420, 443, 357, 416, 428, 427, 374, 493, 416, 371, 474, 374, 290, 438, 459, 316}},
		},
		ClassPrizes:                []int32{3, 3, 3},
		GibsonSpread:               250,
		ControlLossThreshold:       0.25,
		HopefulnessThreshold:       0.1,
		AllPlayers:                 52,
		ValidPlayers:               52,
		Rounds:                     32,
		PlacePrizes:                10,
		DivisionSims:               100000,
		ControlLossSims:            10000,
		ControlLossActivationRound: 24,
		AllowRepeatByes:            false,
		RemovedPlayers:             []int32{},
		Seed:                       1751839029,
	}
	return request
}
