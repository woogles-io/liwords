// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/omgwords_service/omgwords.proto

package omgwords_serviceconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	ipc "github.com/woogles-io/liwords/rpc/api/proto/ipc"
	omgwords_service "github.com/woogles-io/liwords/rpc/api/proto/omgwords_service"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// GameEventServiceName is the fully-qualified name of the GameEventService service.
	GameEventServiceName = "omgwords_service.GameEventService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// GameEventServiceCreateBroadcastGameProcedure is the fully-qualified name of the
	// GameEventService's CreateBroadcastGame RPC.
	GameEventServiceCreateBroadcastGameProcedure = "/omgwords_service.GameEventService/CreateBroadcastGame"
	// GameEventServiceDeleteBroadcastGameProcedure is the fully-qualified name of the
	// GameEventService's DeleteBroadcastGame RPC.
	GameEventServiceDeleteBroadcastGameProcedure = "/omgwords_service.GameEventService/DeleteBroadcastGame"
	// GameEventServiceSendGameEventProcedure is the fully-qualified name of the GameEventService's
	// SendGameEvent RPC.
	GameEventServiceSendGameEventProcedure = "/omgwords_service.GameEventService/SendGameEvent"
	// GameEventServiceSetRacksProcedure is the fully-qualified name of the GameEventService's SetRacks
	// RPC.
	GameEventServiceSetRacksProcedure = "/omgwords_service.GameEventService/SetRacks"
	// GameEventServiceReplaceGameDocumentProcedure is the fully-qualified name of the
	// GameEventService's ReplaceGameDocument RPC.
	GameEventServiceReplaceGameDocumentProcedure = "/omgwords_service.GameEventService/ReplaceGameDocument"
	// GameEventServicePatchGameDocumentProcedure is the fully-qualified name of the GameEventService's
	// PatchGameDocument RPC.
	GameEventServicePatchGameDocumentProcedure = "/omgwords_service.GameEventService/PatchGameDocument"
	// GameEventServiceSetBroadcastGamePrivacyProcedure is the fully-qualified name of the
	// GameEventService's SetBroadcastGamePrivacy RPC.
	GameEventServiceSetBroadcastGamePrivacyProcedure = "/omgwords_service.GameEventService/SetBroadcastGamePrivacy"
	// GameEventServiceGetGamesForEditorProcedure is the fully-qualified name of the GameEventService's
	// GetGamesForEditor RPC.
	GameEventServiceGetGamesForEditorProcedure = "/omgwords_service.GameEventService/GetGamesForEditor"
	// GameEventServiceGetMyUnfinishedGamesProcedure is the fully-qualified name of the
	// GameEventService's GetMyUnfinishedGames RPC.
	GameEventServiceGetMyUnfinishedGamesProcedure = "/omgwords_service.GameEventService/GetMyUnfinishedGames"
	// GameEventServiceGetGameDocumentProcedure is the fully-qualified name of the GameEventService's
	// GetGameDocument RPC.
	GameEventServiceGetGameDocumentProcedure = "/omgwords_service.GameEventService/GetGameDocument"
	// GameEventServiceGetRecentAnnotatedGamesProcedure is the fully-qualified name of the
	// GameEventService's GetRecentAnnotatedGames RPC.
	GameEventServiceGetRecentAnnotatedGamesProcedure = "/omgwords_service.GameEventService/GetRecentAnnotatedGames"
	// GameEventServiceGetCGPProcedure is the fully-qualified name of the GameEventService's GetCGP RPC.
	GameEventServiceGetCGPProcedure = "/omgwords_service.GameEventService/GetCGP"
	// GameEventServiceImportGCGProcedure is the fully-qualified name of the GameEventService's
	// ImportGCG RPC.
	GameEventServiceImportGCGProcedure = "/omgwords_service.GameEventService/ImportGCG"
	// GameEventServiceGetGameOwnerProcedure is the fully-qualified name of the GameEventService's
	// GetGameOwner RPC.
	GameEventServiceGetGameOwnerProcedure = "/omgwords_service.GameEventService/GetGameOwner"
)

// GameEventServiceClient is a client for the omgwords_service.GameEventService service.
type GameEventServiceClient interface {
	// CreateBroadcastGame will create a game for Woogles broadcast
	CreateBroadcastGame(context.Context, *connect.Request[omgwords_service.CreateBroadcastGameRequest]) (*connect.Response[omgwords_service.CreateBroadcastGameResponse], error)
	// DeleteBroadcastGame deletes a Woogles annotated game.
	DeleteBroadcastGame(context.Context, *connect.Request[omgwords_service.DeleteBroadcastGameRequest]) (*connect.Response[omgwords_service.DeleteBroadcastGameResponse], error)
	// SendGameEvent is how one sends game events to the Woogles API.
	SendGameEvent(context.Context, *connect.Request[omgwords_service.AnnotatedGameEvent]) (*connect.Response[omgwords_service.GameEventResponse], error)
	// SetRacks sets the rack for the players of the game.
	SetRacks(context.Context, *connect.Request[omgwords_service.SetRacksEvent]) (*connect.Response[omgwords_service.GameEventResponse], error)
	ReplaceGameDocument(context.Context, *connect.Request[omgwords_service.ReplaceDocumentRequest]) (*connect.Response[omgwords_service.GameEventResponse], error)
	// PatchGameDocument merges in the passed-in GameDocument with what's on the
	// server. The passed-in GameDocument should be a partial document
	PatchGameDocument(context.Context, *connect.Request[omgwords_service.PatchDocumentRequest]) (*connect.Response[omgwords_service.GameEventResponse], error)
	SetBroadcastGamePrivacy(context.Context, *connect.Request[omgwords_service.BroadcastGamePrivacy]) (*connect.Response[omgwords_service.GameEventResponse], error)
	GetGamesForEditor(context.Context, *connect.Request[omgwords_service.GetGamesForEditorRequest]) (*connect.Response[omgwords_service.BroadcastGamesResponse], error)
	GetMyUnfinishedGames(context.Context, *connect.Request[omgwords_service.GetMyUnfinishedGamesRequest]) (*connect.Response[omgwords_service.BroadcastGamesResponse], error)
	// GetGameDocument fetches the latest GameDocument for the passed-in ID.
	GetGameDocument(context.Context, *connect.Request[omgwords_service.GetGameDocumentRequest]) (*connect.Response[ipc.GameDocument], error)
	GetRecentAnnotatedGames(context.Context, *connect.Request[omgwords_service.GetRecentAnnotatedGamesRequest]) (*connect.Response[omgwords_service.BroadcastGamesResponse], error)
	GetCGP(context.Context, *connect.Request[omgwords_service.GetCGPRequest]) (*connect.Response[omgwords_service.CGPResponse], error)
	ImportGCG(context.Context, *connect.Request[omgwords_service.ImportGCGRequest]) (*connect.Response[omgwords_service.ImportGCGResponse], error)
	// GetGameOwner returns the creator information for an annotated game
	GetGameOwner(context.Context, *connect.Request[omgwords_service.GetGameOwnerRequest]) (*connect.Response[omgwords_service.GetGameOwnerResponse], error)
}

// NewGameEventServiceClient constructs a client for the omgwords_service.GameEventService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewGameEventServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) GameEventServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	gameEventServiceMethods := omgwords_service.File_proto_omgwords_service_omgwords_proto.Services().ByName("GameEventService").Methods()
	return &gameEventServiceClient{
		createBroadcastGame: connect.NewClient[omgwords_service.CreateBroadcastGameRequest, omgwords_service.CreateBroadcastGameResponse](
			httpClient,
			baseURL+GameEventServiceCreateBroadcastGameProcedure,
			connect.WithSchema(gameEventServiceMethods.ByName("CreateBroadcastGame")),
			connect.WithClientOptions(opts...),
		),
		deleteBroadcastGame: connect.NewClient[omgwords_service.DeleteBroadcastGameRequest, omgwords_service.DeleteBroadcastGameResponse](
			httpClient,
			baseURL+GameEventServiceDeleteBroadcastGameProcedure,
			connect.WithSchema(gameEventServiceMethods.ByName("DeleteBroadcastGame")),
			connect.WithClientOptions(opts...),
		),
		sendGameEvent: connect.NewClient[omgwords_service.AnnotatedGameEvent, omgwords_service.GameEventResponse](
			httpClient,
			baseURL+GameEventServiceSendGameEventProcedure,
			connect.WithSchema(gameEventServiceMethods.ByName("SendGameEvent")),
			connect.WithClientOptions(opts...),
		),
		setRacks: connect.NewClient[omgwords_service.SetRacksEvent, omgwords_service.GameEventResponse](
			httpClient,
			baseURL+GameEventServiceSetRacksProcedure,
			connect.WithSchema(gameEventServiceMethods.ByName("SetRacks")),
			connect.WithClientOptions(opts...),
		),
		replaceGameDocument: connect.NewClient[omgwords_service.ReplaceDocumentRequest, omgwords_service.GameEventResponse](
			httpClient,
			baseURL+GameEventServiceReplaceGameDocumentProcedure,
			connect.WithSchema(gameEventServiceMethods.ByName("ReplaceGameDocument")),
			connect.WithClientOptions(opts...),
		),
		patchGameDocument: connect.NewClient[omgwords_service.PatchDocumentRequest, omgwords_service.GameEventResponse](
			httpClient,
			baseURL+GameEventServicePatchGameDocumentProcedure,
			connect.WithSchema(gameEventServiceMethods.ByName("PatchGameDocument")),
			connect.WithClientOptions(opts...),
		),
		setBroadcastGamePrivacy: connect.NewClient[omgwords_service.BroadcastGamePrivacy, omgwords_service.GameEventResponse](
			httpClient,
			baseURL+GameEventServiceSetBroadcastGamePrivacyProcedure,
			connect.WithSchema(gameEventServiceMethods.ByName("SetBroadcastGamePrivacy")),
			connect.WithClientOptions(opts...),
		),
		getGamesForEditor: connect.NewClient[omgwords_service.GetGamesForEditorRequest, omgwords_service.BroadcastGamesResponse](
			httpClient,
			baseURL+GameEventServiceGetGamesForEditorProcedure,
			connect.WithSchema(gameEventServiceMethods.ByName("GetGamesForEditor")),
			connect.WithClientOptions(opts...),
		),
		getMyUnfinishedGames: connect.NewClient[omgwords_service.GetMyUnfinishedGamesRequest, omgwords_service.BroadcastGamesResponse](
			httpClient,
			baseURL+GameEventServiceGetMyUnfinishedGamesProcedure,
			connect.WithSchema(gameEventServiceMethods.ByName("GetMyUnfinishedGames")),
			connect.WithClientOptions(opts...),
		),
		getGameDocument: connect.NewClient[omgwords_service.GetGameDocumentRequest, ipc.GameDocument](
			httpClient,
			baseURL+GameEventServiceGetGameDocumentProcedure,
			connect.WithSchema(gameEventServiceMethods.ByName("GetGameDocument")),
			connect.WithClientOptions(opts...),
		),
		getRecentAnnotatedGames: connect.NewClient[omgwords_service.GetRecentAnnotatedGamesRequest, omgwords_service.BroadcastGamesResponse](
			httpClient,
			baseURL+GameEventServiceGetRecentAnnotatedGamesProcedure,
			connect.WithSchema(gameEventServiceMethods.ByName("GetRecentAnnotatedGames")),
			connect.WithClientOptions(opts...),
		),
		getCGP: connect.NewClient[omgwords_service.GetCGPRequest, omgwords_service.CGPResponse](
			httpClient,
			baseURL+GameEventServiceGetCGPProcedure,
			connect.WithSchema(gameEventServiceMethods.ByName("GetCGP")),
			connect.WithClientOptions(opts...),
		),
		importGCG: connect.NewClient[omgwords_service.ImportGCGRequest, omgwords_service.ImportGCGResponse](
			httpClient,
			baseURL+GameEventServiceImportGCGProcedure,
			connect.WithSchema(gameEventServiceMethods.ByName("ImportGCG")),
			connect.WithClientOptions(opts...),
		),
		getGameOwner: connect.NewClient[omgwords_service.GetGameOwnerRequest, omgwords_service.GetGameOwnerResponse](
			httpClient,
			baseURL+GameEventServiceGetGameOwnerProcedure,
			connect.WithSchema(gameEventServiceMethods.ByName("GetGameOwner")),
			connect.WithClientOptions(opts...),
		),
	}
}

// gameEventServiceClient implements GameEventServiceClient.
type gameEventServiceClient struct {
	createBroadcastGame     *connect.Client[omgwords_service.CreateBroadcastGameRequest, omgwords_service.CreateBroadcastGameResponse]
	deleteBroadcastGame     *connect.Client[omgwords_service.DeleteBroadcastGameRequest, omgwords_service.DeleteBroadcastGameResponse]
	sendGameEvent           *connect.Client[omgwords_service.AnnotatedGameEvent, omgwords_service.GameEventResponse]
	setRacks                *connect.Client[omgwords_service.SetRacksEvent, omgwords_service.GameEventResponse]
	replaceGameDocument     *connect.Client[omgwords_service.ReplaceDocumentRequest, omgwords_service.GameEventResponse]
	patchGameDocument       *connect.Client[omgwords_service.PatchDocumentRequest, omgwords_service.GameEventResponse]
	setBroadcastGamePrivacy *connect.Client[omgwords_service.BroadcastGamePrivacy, omgwords_service.GameEventResponse]
	getGamesForEditor       *connect.Client[omgwords_service.GetGamesForEditorRequest, omgwords_service.BroadcastGamesResponse]
	getMyUnfinishedGames    *connect.Client[omgwords_service.GetMyUnfinishedGamesRequest, omgwords_service.BroadcastGamesResponse]
	getGameDocument         *connect.Client[omgwords_service.GetGameDocumentRequest, ipc.GameDocument]
	getRecentAnnotatedGames *connect.Client[omgwords_service.GetRecentAnnotatedGamesRequest, omgwords_service.BroadcastGamesResponse]
	getCGP                  *connect.Client[omgwords_service.GetCGPRequest, omgwords_service.CGPResponse]
	importGCG               *connect.Client[omgwords_service.ImportGCGRequest, omgwords_service.ImportGCGResponse]
	getGameOwner            *connect.Client[omgwords_service.GetGameOwnerRequest, omgwords_service.GetGameOwnerResponse]
}

// CreateBroadcastGame calls omgwords_service.GameEventService.CreateBroadcastGame.
func (c *gameEventServiceClient) CreateBroadcastGame(ctx context.Context, req *connect.Request[omgwords_service.CreateBroadcastGameRequest]) (*connect.Response[omgwords_service.CreateBroadcastGameResponse], error) {
	return c.createBroadcastGame.CallUnary(ctx, req)
}

// DeleteBroadcastGame calls omgwords_service.GameEventService.DeleteBroadcastGame.
func (c *gameEventServiceClient) DeleteBroadcastGame(ctx context.Context, req *connect.Request[omgwords_service.DeleteBroadcastGameRequest]) (*connect.Response[omgwords_service.DeleteBroadcastGameResponse], error) {
	return c.deleteBroadcastGame.CallUnary(ctx, req)
}

// SendGameEvent calls omgwords_service.GameEventService.SendGameEvent.
func (c *gameEventServiceClient) SendGameEvent(ctx context.Context, req *connect.Request[omgwords_service.AnnotatedGameEvent]) (*connect.Response[omgwords_service.GameEventResponse], error) {
	return c.sendGameEvent.CallUnary(ctx, req)
}

// SetRacks calls omgwords_service.GameEventService.SetRacks.
func (c *gameEventServiceClient) SetRacks(ctx context.Context, req *connect.Request[omgwords_service.SetRacksEvent]) (*connect.Response[omgwords_service.GameEventResponse], error) {
	return c.setRacks.CallUnary(ctx, req)
}

// ReplaceGameDocument calls omgwords_service.GameEventService.ReplaceGameDocument.
func (c *gameEventServiceClient) ReplaceGameDocument(ctx context.Context, req *connect.Request[omgwords_service.ReplaceDocumentRequest]) (*connect.Response[omgwords_service.GameEventResponse], error) {
	return c.replaceGameDocument.CallUnary(ctx, req)
}

// PatchGameDocument calls omgwords_service.GameEventService.PatchGameDocument.
func (c *gameEventServiceClient) PatchGameDocument(ctx context.Context, req *connect.Request[omgwords_service.PatchDocumentRequest]) (*connect.Response[omgwords_service.GameEventResponse], error) {
	return c.patchGameDocument.CallUnary(ctx, req)
}

// SetBroadcastGamePrivacy calls omgwords_service.GameEventService.SetBroadcastGamePrivacy.
func (c *gameEventServiceClient) SetBroadcastGamePrivacy(ctx context.Context, req *connect.Request[omgwords_service.BroadcastGamePrivacy]) (*connect.Response[omgwords_service.GameEventResponse], error) {
	return c.setBroadcastGamePrivacy.CallUnary(ctx, req)
}

// GetGamesForEditor calls omgwords_service.GameEventService.GetGamesForEditor.
func (c *gameEventServiceClient) GetGamesForEditor(ctx context.Context, req *connect.Request[omgwords_service.GetGamesForEditorRequest]) (*connect.Response[omgwords_service.BroadcastGamesResponse], error) {
	return c.getGamesForEditor.CallUnary(ctx, req)
}

// GetMyUnfinishedGames calls omgwords_service.GameEventService.GetMyUnfinishedGames.
func (c *gameEventServiceClient) GetMyUnfinishedGames(ctx context.Context, req *connect.Request[omgwords_service.GetMyUnfinishedGamesRequest]) (*connect.Response[omgwords_service.BroadcastGamesResponse], error) {
	return c.getMyUnfinishedGames.CallUnary(ctx, req)
}

// GetGameDocument calls omgwords_service.GameEventService.GetGameDocument.
func (c *gameEventServiceClient) GetGameDocument(ctx context.Context, req *connect.Request[omgwords_service.GetGameDocumentRequest]) (*connect.Response[ipc.GameDocument], error) {
	return c.getGameDocument.CallUnary(ctx, req)
}

// GetRecentAnnotatedGames calls omgwords_service.GameEventService.GetRecentAnnotatedGames.
func (c *gameEventServiceClient) GetRecentAnnotatedGames(ctx context.Context, req *connect.Request[omgwords_service.GetRecentAnnotatedGamesRequest]) (*connect.Response[omgwords_service.BroadcastGamesResponse], error) {
	return c.getRecentAnnotatedGames.CallUnary(ctx, req)
}

// GetCGP calls omgwords_service.GameEventService.GetCGP.
func (c *gameEventServiceClient) GetCGP(ctx context.Context, req *connect.Request[omgwords_service.GetCGPRequest]) (*connect.Response[omgwords_service.CGPResponse], error) {
	return c.getCGP.CallUnary(ctx, req)
}

// ImportGCG calls omgwords_service.GameEventService.ImportGCG.
func (c *gameEventServiceClient) ImportGCG(ctx context.Context, req *connect.Request[omgwords_service.ImportGCGRequest]) (*connect.Response[omgwords_service.ImportGCGResponse], error) {
	return c.importGCG.CallUnary(ctx, req)
}

// GetGameOwner calls omgwords_service.GameEventService.GetGameOwner.
func (c *gameEventServiceClient) GetGameOwner(ctx context.Context, req *connect.Request[omgwords_service.GetGameOwnerRequest]) (*connect.Response[omgwords_service.GetGameOwnerResponse], error) {
	return c.getGameOwner.CallUnary(ctx, req)
}

// GameEventServiceHandler is an implementation of the omgwords_service.GameEventService service.
type GameEventServiceHandler interface {
	// CreateBroadcastGame will create a game for Woogles broadcast
	CreateBroadcastGame(context.Context, *connect.Request[omgwords_service.CreateBroadcastGameRequest]) (*connect.Response[omgwords_service.CreateBroadcastGameResponse], error)
	// DeleteBroadcastGame deletes a Woogles annotated game.
	DeleteBroadcastGame(context.Context, *connect.Request[omgwords_service.DeleteBroadcastGameRequest]) (*connect.Response[omgwords_service.DeleteBroadcastGameResponse], error)
	// SendGameEvent is how one sends game events to the Woogles API.
	SendGameEvent(context.Context, *connect.Request[omgwords_service.AnnotatedGameEvent]) (*connect.Response[omgwords_service.GameEventResponse], error)
	// SetRacks sets the rack for the players of the game.
	SetRacks(context.Context, *connect.Request[omgwords_service.SetRacksEvent]) (*connect.Response[omgwords_service.GameEventResponse], error)
	ReplaceGameDocument(context.Context, *connect.Request[omgwords_service.ReplaceDocumentRequest]) (*connect.Response[omgwords_service.GameEventResponse], error)
	// PatchGameDocument merges in the passed-in GameDocument with what's on the
	// server. The passed-in GameDocument should be a partial document
	PatchGameDocument(context.Context, *connect.Request[omgwords_service.PatchDocumentRequest]) (*connect.Response[omgwords_service.GameEventResponse], error)
	SetBroadcastGamePrivacy(context.Context, *connect.Request[omgwords_service.BroadcastGamePrivacy]) (*connect.Response[omgwords_service.GameEventResponse], error)
	GetGamesForEditor(context.Context, *connect.Request[omgwords_service.GetGamesForEditorRequest]) (*connect.Response[omgwords_service.BroadcastGamesResponse], error)
	GetMyUnfinishedGames(context.Context, *connect.Request[omgwords_service.GetMyUnfinishedGamesRequest]) (*connect.Response[omgwords_service.BroadcastGamesResponse], error)
	// GetGameDocument fetches the latest GameDocument for the passed-in ID.
	GetGameDocument(context.Context, *connect.Request[omgwords_service.GetGameDocumentRequest]) (*connect.Response[ipc.GameDocument], error)
	GetRecentAnnotatedGames(context.Context, *connect.Request[omgwords_service.GetRecentAnnotatedGamesRequest]) (*connect.Response[omgwords_service.BroadcastGamesResponse], error)
	GetCGP(context.Context, *connect.Request[omgwords_service.GetCGPRequest]) (*connect.Response[omgwords_service.CGPResponse], error)
	ImportGCG(context.Context, *connect.Request[omgwords_service.ImportGCGRequest]) (*connect.Response[omgwords_service.ImportGCGResponse], error)
	// GetGameOwner returns the creator information for an annotated game
	GetGameOwner(context.Context, *connect.Request[omgwords_service.GetGameOwnerRequest]) (*connect.Response[omgwords_service.GetGameOwnerResponse], error)
}

// NewGameEventServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewGameEventServiceHandler(svc GameEventServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	gameEventServiceMethods := omgwords_service.File_proto_omgwords_service_omgwords_proto.Services().ByName("GameEventService").Methods()
	gameEventServiceCreateBroadcastGameHandler := connect.NewUnaryHandler(
		GameEventServiceCreateBroadcastGameProcedure,
		svc.CreateBroadcastGame,
		connect.WithSchema(gameEventServiceMethods.ByName("CreateBroadcastGame")),
		connect.WithHandlerOptions(opts...),
	)
	gameEventServiceDeleteBroadcastGameHandler := connect.NewUnaryHandler(
		GameEventServiceDeleteBroadcastGameProcedure,
		svc.DeleteBroadcastGame,
		connect.WithSchema(gameEventServiceMethods.ByName("DeleteBroadcastGame")),
		connect.WithHandlerOptions(opts...),
	)
	gameEventServiceSendGameEventHandler := connect.NewUnaryHandler(
		GameEventServiceSendGameEventProcedure,
		svc.SendGameEvent,
		connect.WithSchema(gameEventServiceMethods.ByName("SendGameEvent")),
		connect.WithHandlerOptions(opts...),
	)
	gameEventServiceSetRacksHandler := connect.NewUnaryHandler(
		GameEventServiceSetRacksProcedure,
		svc.SetRacks,
		connect.WithSchema(gameEventServiceMethods.ByName("SetRacks")),
		connect.WithHandlerOptions(opts...),
	)
	gameEventServiceReplaceGameDocumentHandler := connect.NewUnaryHandler(
		GameEventServiceReplaceGameDocumentProcedure,
		svc.ReplaceGameDocument,
		connect.WithSchema(gameEventServiceMethods.ByName("ReplaceGameDocument")),
		connect.WithHandlerOptions(opts...),
	)
	gameEventServicePatchGameDocumentHandler := connect.NewUnaryHandler(
		GameEventServicePatchGameDocumentProcedure,
		svc.PatchGameDocument,
		connect.WithSchema(gameEventServiceMethods.ByName("PatchGameDocument")),
		connect.WithHandlerOptions(opts...),
	)
	gameEventServiceSetBroadcastGamePrivacyHandler := connect.NewUnaryHandler(
		GameEventServiceSetBroadcastGamePrivacyProcedure,
		svc.SetBroadcastGamePrivacy,
		connect.WithSchema(gameEventServiceMethods.ByName("SetBroadcastGamePrivacy")),
		connect.WithHandlerOptions(opts...),
	)
	gameEventServiceGetGamesForEditorHandler := connect.NewUnaryHandler(
		GameEventServiceGetGamesForEditorProcedure,
		svc.GetGamesForEditor,
		connect.WithSchema(gameEventServiceMethods.ByName("GetGamesForEditor")),
		connect.WithHandlerOptions(opts...),
	)
	gameEventServiceGetMyUnfinishedGamesHandler := connect.NewUnaryHandler(
		GameEventServiceGetMyUnfinishedGamesProcedure,
		svc.GetMyUnfinishedGames,
		connect.WithSchema(gameEventServiceMethods.ByName("GetMyUnfinishedGames")),
		connect.WithHandlerOptions(opts...),
	)
	gameEventServiceGetGameDocumentHandler := connect.NewUnaryHandler(
		GameEventServiceGetGameDocumentProcedure,
		svc.GetGameDocument,
		connect.WithSchema(gameEventServiceMethods.ByName("GetGameDocument")),
		connect.WithHandlerOptions(opts...),
	)
	gameEventServiceGetRecentAnnotatedGamesHandler := connect.NewUnaryHandler(
		GameEventServiceGetRecentAnnotatedGamesProcedure,
		svc.GetRecentAnnotatedGames,
		connect.WithSchema(gameEventServiceMethods.ByName("GetRecentAnnotatedGames")),
		connect.WithHandlerOptions(opts...),
	)
	gameEventServiceGetCGPHandler := connect.NewUnaryHandler(
		GameEventServiceGetCGPProcedure,
		svc.GetCGP,
		connect.WithSchema(gameEventServiceMethods.ByName("GetCGP")),
		connect.WithHandlerOptions(opts...),
	)
	gameEventServiceImportGCGHandler := connect.NewUnaryHandler(
		GameEventServiceImportGCGProcedure,
		svc.ImportGCG,
		connect.WithSchema(gameEventServiceMethods.ByName("ImportGCG")),
		connect.WithHandlerOptions(opts...),
	)
	gameEventServiceGetGameOwnerHandler := connect.NewUnaryHandler(
		GameEventServiceGetGameOwnerProcedure,
		svc.GetGameOwner,
		connect.WithSchema(gameEventServiceMethods.ByName("GetGameOwner")),
		connect.WithHandlerOptions(opts...),
	)
	return "/omgwords_service.GameEventService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case GameEventServiceCreateBroadcastGameProcedure:
			gameEventServiceCreateBroadcastGameHandler.ServeHTTP(w, r)
		case GameEventServiceDeleteBroadcastGameProcedure:
			gameEventServiceDeleteBroadcastGameHandler.ServeHTTP(w, r)
		case GameEventServiceSendGameEventProcedure:
			gameEventServiceSendGameEventHandler.ServeHTTP(w, r)
		case GameEventServiceSetRacksProcedure:
			gameEventServiceSetRacksHandler.ServeHTTP(w, r)
		case GameEventServiceReplaceGameDocumentProcedure:
			gameEventServiceReplaceGameDocumentHandler.ServeHTTP(w, r)
		case GameEventServicePatchGameDocumentProcedure:
			gameEventServicePatchGameDocumentHandler.ServeHTTP(w, r)
		case GameEventServiceSetBroadcastGamePrivacyProcedure:
			gameEventServiceSetBroadcastGamePrivacyHandler.ServeHTTP(w, r)
		case GameEventServiceGetGamesForEditorProcedure:
			gameEventServiceGetGamesForEditorHandler.ServeHTTP(w, r)
		case GameEventServiceGetMyUnfinishedGamesProcedure:
			gameEventServiceGetMyUnfinishedGamesHandler.ServeHTTP(w, r)
		case GameEventServiceGetGameDocumentProcedure:
			gameEventServiceGetGameDocumentHandler.ServeHTTP(w, r)
		case GameEventServiceGetRecentAnnotatedGamesProcedure:
			gameEventServiceGetRecentAnnotatedGamesHandler.ServeHTTP(w, r)
		case GameEventServiceGetCGPProcedure:
			gameEventServiceGetCGPHandler.ServeHTTP(w, r)
		case GameEventServiceImportGCGProcedure:
			gameEventServiceImportGCGHandler.ServeHTTP(w, r)
		case GameEventServiceGetGameOwnerProcedure:
			gameEventServiceGetGameOwnerHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedGameEventServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedGameEventServiceHandler struct{}

func (UnimplementedGameEventServiceHandler) CreateBroadcastGame(context.Context, *connect.Request[omgwords_service.CreateBroadcastGameRequest]) (*connect.Response[omgwords_service.CreateBroadcastGameResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("omgwords_service.GameEventService.CreateBroadcastGame is not implemented"))
}

func (UnimplementedGameEventServiceHandler) DeleteBroadcastGame(context.Context, *connect.Request[omgwords_service.DeleteBroadcastGameRequest]) (*connect.Response[omgwords_service.DeleteBroadcastGameResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("omgwords_service.GameEventService.DeleteBroadcastGame is not implemented"))
}

func (UnimplementedGameEventServiceHandler) SendGameEvent(context.Context, *connect.Request[omgwords_service.AnnotatedGameEvent]) (*connect.Response[omgwords_service.GameEventResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("omgwords_service.GameEventService.SendGameEvent is not implemented"))
}

func (UnimplementedGameEventServiceHandler) SetRacks(context.Context, *connect.Request[omgwords_service.SetRacksEvent]) (*connect.Response[omgwords_service.GameEventResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("omgwords_service.GameEventService.SetRacks is not implemented"))
}

func (UnimplementedGameEventServiceHandler) ReplaceGameDocument(context.Context, *connect.Request[omgwords_service.ReplaceDocumentRequest]) (*connect.Response[omgwords_service.GameEventResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("omgwords_service.GameEventService.ReplaceGameDocument is not implemented"))
}

func (UnimplementedGameEventServiceHandler) PatchGameDocument(context.Context, *connect.Request[omgwords_service.PatchDocumentRequest]) (*connect.Response[omgwords_service.GameEventResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("omgwords_service.GameEventService.PatchGameDocument is not implemented"))
}

func (UnimplementedGameEventServiceHandler) SetBroadcastGamePrivacy(context.Context, *connect.Request[omgwords_service.BroadcastGamePrivacy]) (*connect.Response[omgwords_service.GameEventResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("omgwords_service.GameEventService.SetBroadcastGamePrivacy is not implemented"))
}

func (UnimplementedGameEventServiceHandler) GetGamesForEditor(context.Context, *connect.Request[omgwords_service.GetGamesForEditorRequest]) (*connect.Response[omgwords_service.BroadcastGamesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("omgwords_service.GameEventService.GetGamesForEditor is not implemented"))
}

func (UnimplementedGameEventServiceHandler) GetMyUnfinishedGames(context.Context, *connect.Request[omgwords_service.GetMyUnfinishedGamesRequest]) (*connect.Response[omgwords_service.BroadcastGamesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("omgwords_service.GameEventService.GetMyUnfinishedGames is not implemented"))
}

func (UnimplementedGameEventServiceHandler) GetGameDocument(context.Context, *connect.Request[omgwords_service.GetGameDocumentRequest]) (*connect.Response[ipc.GameDocument], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("omgwords_service.GameEventService.GetGameDocument is not implemented"))
}

func (UnimplementedGameEventServiceHandler) GetRecentAnnotatedGames(context.Context, *connect.Request[omgwords_service.GetRecentAnnotatedGamesRequest]) (*connect.Response[omgwords_service.BroadcastGamesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("omgwords_service.GameEventService.GetRecentAnnotatedGames is not implemented"))
}

func (UnimplementedGameEventServiceHandler) GetCGP(context.Context, *connect.Request[omgwords_service.GetCGPRequest]) (*connect.Response[omgwords_service.CGPResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("omgwords_service.GameEventService.GetCGP is not implemented"))
}

func (UnimplementedGameEventServiceHandler) ImportGCG(context.Context, *connect.Request[omgwords_service.ImportGCGRequest]) (*connect.Response[omgwords_service.ImportGCGResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("omgwords_service.GameEventService.ImportGCG is not implemented"))
}

func (UnimplementedGameEventServiceHandler) GetGameOwner(context.Context, *connect.Request[omgwords_service.GetGameOwnerRequest]) (*connect.Response[omgwords_service.GetGameOwnerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("omgwords_service.GameEventService.GetGameOwner is not implemented"))
}
