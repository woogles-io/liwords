// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/collections_service/collections_service.proto

package collections_serviceconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	collections_service "github.com/woogles-io/liwords/rpc/api/proto/collections_service"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// CollectionsServiceName is the fully-qualified name of the CollectionsService service.
	CollectionsServiceName = "collections_service.CollectionsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CollectionsServiceCreateCollectionProcedure is the fully-qualified name of the
	// CollectionsService's CreateCollection RPC.
	CollectionsServiceCreateCollectionProcedure = "/collections_service.CollectionsService/CreateCollection"
	// CollectionsServiceGetCollectionProcedure is the fully-qualified name of the CollectionsService's
	// GetCollection RPC.
	CollectionsServiceGetCollectionProcedure = "/collections_service.CollectionsService/GetCollection"
	// CollectionsServiceUpdateCollectionProcedure is the fully-qualified name of the
	// CollectionsService's UpdateCollection RPC.
	CollectionsServiceUpdateCollectionProcedure = "/collections_service.CollectionsService/UpdateCollection"
	// CollectionsServiceDeleteCollectionProcedure is the fully-qualified name of the
	// CollectionsService's DeleteCollection RPC.
	CollectionsServiceDeleteCollectionProcedure = "/collections_service.CollectionsService/DeleteCollection"
	// CollectionsServiceAddGameToCollectionProcedure is the fully-qualified name of the
	// CollectionsService's AddGameToCollection RPC.
	CollectionsServiceAddGameToCollectionProcedure = "/collections_service.CollectionsService/AddGameToCollection"
	// CollectionsServiceRemoveGameFromCollectionProcedure is the fully-qualified name of the
	// CollectionsService's RemoveGameFromCollection RPC.
	CollectionsServiceRemoveGameFromCollectionProcedure = "/collections_service.CollectionsService/RemoveGameFromCollection"
	// CollectionsServiceReorderGamesProcedure is the fully-qualified name of the CollectionsService's
	// ReorderGames RPC.
	CollectionsServiceReorderGamesProcedure = "/collections_service.CollectionsService/ReorderGames"
	// CollectionsServiceUpdateChapterTitleProcedure is the fully-qualified name of the
	// CollectionsService's UpdateChapterTitle RPC.
	CollectionsServiceUpdateChapterTitleProcedure = "/collections_service.CollectionsService/UpdateChapterTitle"
	// CollectionsServiceGetUserCollectionsProcedure is the fully-qualified name of the
	// CollectionsService's GetUserCollections RPC.
	CollectionsServiceGetUserCollectionsProcedure = "/collections_service.CollectionsService/GetUserCollections"
	// CollectionsServiceGetPublicCollectionsProcedure is the fully-qualified name of the
	// CollectionsService's GetPublicCollections RPC.
	CollectionsServiceGetPublicCollectionsProcedure = "/collections_service.CollectionsService/GetPublicCollections"
	// CollectionsServiceGetCollectionsForGameProcedure is the fully-qualified name of the
	// CollectionsService's GetCollectionsForGame RPC.
	CollectionsServiceGetCollectionsForGameProcedure = "/collections_service.CollectionsService/GetCollectionsForGame"
)

// CollectionsServiceClient is a client for the collections_service.CollectionsService service.
type CollectionsServiceClient interface {
	CreateCollection(context.Context, *connect.Request[collections_service.CreateCollectionRequest]) (*connect.Response[collections_service.CreateCollectionResponse], error)
	GetCollection(context.Context, *connect.Request[collections_service.GetCollectionRequest]) (*connect.Response[collections_service.GetCollectionResponse], error)
	UpdateCollection(context.Context, *connect.Request[collections_service.UpdateCollectionRequest]) (*connect.Response[collections_service.UpdateCollectionResponse], error)
	DeleteCollection(context.Context, *connect.Request[collections_service.DeleteCollectionRequest]) (*connect.Response[collections_service.DeleteCollectionResponse], error)
	AddGameToCollection(context.Context, *connect.Request[collections_service.AddGameToCollectionRequest]) (*connect.Response[collections_service.AddGameToCollectionResponse], error)
	RemoveGameFromCollection(context.Context, *connect.Request[collections_service.RemoveGameFromCollectionRequest]) (*connect.Response[collections_service.RemoveGameFromCollectionResponse], error)
	ReorderGames(context.Context, *connect.Request[collections_service.ReorderGamesRequest]) (*connect.Response[collections_service.ReorderGamesResponse], error)
	UpdateChapterTitle(context.Context, *connect.Request[collections_service.UpdateChapterTitleRequest]) (*connect.Response[collections_service.UpdateChapterTitleResponse], error)
	GetUserCollections(context.Context, *connect.Request[collections_service.GetUserCollectionsRequest]) (*connect.Response[collections_service.GetUserCollectionsResponse], error)
	GetPublicCollections(context.Context, *connect.Request[collections_service.GetPublicCollectionsRequest]) (*connect.Response[collections_service.GetPublicCollectionsResponse], error)
	GetCollectionsForGame(context.Context, *connect.Request[collections_service.GetCollectionsForGameRequest]) (*connect.Response[collections_service.GetCollectionsForGameResponse], error)
}

// NewCollectionsServiceClient constructs a client for the collections_service.CollectionsService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCollectionsServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CollectionsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	collectionsServiceMethods := collections_service.File_proto_collections_service_collections_service_proto.Services().ByName("CollectionsService").Methods()
	return &collectionsServiceClient{
		createCollection: connect.NewClient[collections_service.CreateCollectionRequest, collections_service.CreateCollectionResponse](
			httpClient,
			baseURL+CollectionsServiceCreateCollectionProcedure,
			connect.WithSchema(collectionsServiceMethods.ByName("CreateCollection")),
			connect.WithClientOptions(opts...),
		),
		getCollection: connect.NewClient[collections_service.GetCollectionRequest, collections_service.GetCollectionResponse](
			httpClient,
			baseURL+CollectionsServiceGetCollectionProcedure,
			connect.WithSchema(collectionsServiceMethods.ByName("GetCollection")),
			connect.WithClientOptions(opts...),
		),
		updateCollection: connect.NewClient[collections_service.UpdateCollectionRequest, collections_service.UpdateCollectionResponse](
			httpClient,
			baseURL+CollectionsServiceUpdateCollectionProcedure,
			connect.WithSchema(collectionsServiceMethods.ByName("UpdateCollection")),
			connect.WithClientOptions(opts...),
		),
		deleteCollection: connect.NewClient[collections_service.DeleteCollectionRequest, collections_service.DeleteCollectionResponse](
			httpClient,
			baseURL+CollectionsServiceDeleteCollectionProcedure,
			connect.WithSchema(collectionsServiceMethods.ByName("DeleteCollection")),
			connect.WithClientOptions(opts...),
		),
		addGameToCollection: connect.NewClient[collections_service.AddGameToCollectionRequest, collections_service.AddGameToCollectionResponse](
			httpClient,
			baseURL+CollectionsServiceAddGameToCollectionProcedure,
			connect.WithSchema(collectionsServiceMethods.ByName("AddGameToCollection")),
			connect.WithClientOptions(opts...),
		),
		removeGameFromCollection: connect.NewClient[collections_service.RemoveGameFromCollectionRequest, collections_service.RemoveGameFromCollectionResponse](
			httpClient,
			baseURL+CollectionsServiceRemoveGameFromCollectionProcedure,
			connect.WithSchema(collectionsServiceMethods.ByName("RemoveGameFromCollection")),
			connect.WithClientOptions(opts...),
		),
		reorderGames: connect.NewClient[collections_service.ReorderGamesRequest, collections_service.ReorderGamesResponse](
			httpClient,
			baseURL+CollectionsServiceReorderGamesProcedure,
			connect.WithSchema(collectionsServiceMethods.ByName("ReorderGames")),
			connect.WithClientOptions(opts...),
		),
		updateChapterTitle: connect.NewClient[collections_service.UpdateChapterTitleRequest, collections_service.UpdateChapterTitleResponse](
			httpClient,
			baseURL+CollectionsServiceUpdateChapterTitleProcedure,
			connect.WithSchema(collectionsServiceMethods.ByName("UpdateChapterTitle")),
			connect.WithClientOptions(opts...),
		),
		getUserCollections: connect.NewClient[collections_service.GetUserCollectionsRequest, collections_service.GetUserCollectionsResponse](
			httpClient,
			baseURL+CollectionsServiceGetUserCollectionsProcedure,
			connect.WithSchema(collectionsServiceMethods.ByName("GetUserCollections")),
			connect.WithClientOptions(opts...),
		),
		getPublicCollections: connect.NewClient[collections_service.GetPublicCollectionsRequest, collections_service.GetPublicCollectionsResponse](
			httpClient,
			baseURL+CollectionsServiceGetPublicCollectionsProcedure,
			connect.WithSchema(collectionsServiceMethods.ByName("GetPublicCollections")),
			connect.WithClientOptions(opts...),
		),
		getCollectionsForGame: connect.NewClient[collections_service.GetCollectionsForGameRequest, collections_service.GetCollectionsForGameResponse](
			httpClient,
			baseURL+CollectionsServiceGetCollectionsForGameProcedure,
			connect.WithSchema(collectionsServiceMethods.ByName("GetCollectionsForGame")),
			connect.WithClientOptions(opts...),
		),
	}
}

// collectionsServiceClient implements CollectionsServiceClient.
type collectionsServiceClient struct {
	createCollection         *connect.Client[collections_service.CreateCollectionRequest, collections_service.CreateCollectionResponse]
	getCollection            *connect.Client[collections_service.GetCollectionRequest, collections_service.GetCollectionResponse]
	updateCollection         *connect.Client[collections_service.UpdateCollectionRequest, collections_service.UpdateCollectionResponse]
	deleteCollection         *connect.Client[collections_service.DeleteCollectionRequest, collections_service.DeleteCollectionResponse]
	addGameToCollection      *connect.Client[collections_service.AddGameToCollectionRequest, collections_service.AddGameToCollectionResponse]
	removeGameFromCollection *connect.Client[collections_service.RemoveGameFromCollectionRequest, collections_service.RemoveGameFromCollectionResponse]
	reorderGames             *connect.Client[collections_service.ReorderGamesRequest, collections_service.ReorderGamesResponse]
	updateChapterTitle       *connect.Client[collections_service.UpdateChapterTitleRequest, collections_service.UpdateChapterTitleResponse]
	getUserCollections       *connect.Client[collections_service.GetUserCollectionsRequest, collections_service.GetUserCollectionsResponse]
	getPublicCollections     *connect.Client[collections_service.GetPublicCollectionsRequest, collections_service.GetPublicCollectionsResponse]
	getCollectionsForGame    *connect.Client[collections_service.GetCollectionsForGameRequest, collections_service.GetCollectionsForGameResponse]
}

// CreateCollection calls collections_service.CollectionsService.CreateCollection.
func (c *collectionsServiceClient) CreateCollection(ctx context.Context, req *connect.Request[collections_service.CreateCollectionRequest]) (*connect.Response[collections_service.CreateCollectionResponse], error) {
	return c.createCollection.CallUnary(ctx, req)
}

// GetCollection calls collections_service.CollectionsService.GetCollection.
func (c *collectionsServiceClient) GetCollection(ctx context.Context, req *connect.Request[collections_service.GetCollectionRequest]) (*connect.Response[collections_service.GetCollectionResponse], error) {
	return c.getCollection.CallUnary(ctx, req)
}

// UpdateCollection calls collections_service.CollectionsService.UpdateCollection.
func (c *collectionsServiceClient) UpdateCollection(ctx context.Context, req *connect.Request[collections_service.UpdateCollectionRequest]) (*connect.Response[collections_service.UpdateCollectionResponse], error) {
	return c.updateCollection.CallUnary(ctx, req)
}

// DeleteCollection calls collections_service.CollectionsService.DeleteCollection.
func (c *collectionsServiceClient) DeleteCollection(ctx context.Context, req *connect.Request[collections_service.DeleteCollectionRequest]) (*connect.Response[collections_service.DeleteCollectionResponse], error) {
	return c.deleteCollection.CallUnary(ctx, req)
}

// AddGameToCollection calls collections_service.CollectionsService.AddGameToCollection.
func (c *collectionsServiceClient) AddGameToCollection(ctx context.Context, req *connect.Request[collections_service.AddGameToCollectionRequest]) (*connect.Response[collections_service.AddGameToCollectionResponse], error) {
	return c.addGameToCollection.CallUnary(ctx, req)
}

// RemoveGameFromCollection calls collections_service.CollectionsService.RemoveGameFromCollection.
func (c *collectionsServiceClient) RemoveGameFromCollection(ctx context.Context, req *connect.Request[collections_service.RemoveGameFromCollectionRequest]) (*connect.Response[collections_service.RemoveGameFromCollectionResponse], error) {
	return c.removeGameFromCollection.CallUnary(ctx, req)
}

// ReorderGames calls collections_service.CollectionsService.ReorderGames.
func (c *collectionsServiceClient) ReorderGames(ctx context.Context, req *connect.Request[collections_service.ReorderGamesRequest]) (*connect.Response[collections_service.ReorderGamesResponse], error) {
	return c.reorderGames.CallUnary(ctx, req)
}

// UpdateChapterTitle calls collections_service.CollectionsService.UpdateChapterTitle.
func (c *collectionsServiceClient) UpdateChapterTitle(ctx context.Context, req *connect.Request[collections_service.UpdateChapterTitleRequest]) (*connect.Response[collections_service.UpdateChapterTitleResponse], error) {
	return c.updateChapterTitle.CallUnary(ctx, req)
}

// GetUserCollections calls collections_service.CollectionsService.GetUserCollections.
func (c *collectionsServiceClient) GetUserCollections(ctx context.Context, req *connect.Request[collections_service.GetUserCollectionsRequest]) (*connect.Response[collections_service.GetUserCollectionsResponse], error) {
	return c.getUserCollections.CallUnary(ctx, req)
}

// GetPublicCollections calls collections_service.CollectionsService.GetPublicCollections.
func (c *collectionsServiceClient) GetPublicCollections(ctx context.Context, req *connect.Request[collections_service.GetPublicCollectionsRequest]) (*connect.Response[collections_service.GetPublicCollectionsResponse], error) {
	return c.getPublicCollections.CallUnary(ctx, req)
}

// GetCollectionsForGame calls collections_service.CollectionsService.GetCollectionsForGame.
func (c *collectionsServiceClient) GetCollectionsForGame(ctx context.Context, req *connect.Request[collections_service.GetCollectionsForGameRequest]) (*connect.Response[collections_service.GetCollectionsForGameResponse], error) {
	return c.getCollectionsForGame.CallUnary(ctx, req)
}

// CollectionsServiceHandler is an implementation of the collections_service.CollectionsService
// service.
type CollectionsServiceHandler interface {
	CreateCollection(context.Context, *connect.Request[collections_service.CreateCollectionRequest]) (*connect.Response[collections_service.CreateCollectionResponse], error)
	GetCollection(context.Context, *connect.Request[collections_service.GetCollectionRequest]) (*connect.Response[collections_service.GetCollectionResponse], error)
	UpdateCollection(context.Context, *connect.Request[collections_service.UpdateCollectionRequest]) (*connect.Response[collections_service.UpdateCollectionResponse], error)
	DeleteCollection(context.Context, *connect.Request[collections_service.DeleteCollectionRequest]) (*connect.Response[collections_service.DeleteCollectionResponse], error)
	AddGameToCollection(context.Context, *connect.Request[collections_service.AddGameToCollectionRequest]) (*connect.Response[collections_service.AddGameToCollectionResponse], error)
	RemoveGameFromCollection(context.Context, *connect.Request[collections_service.RemoveGameFromCollectionRequest]) (*connect.Response[collections_service.RemoveGameFromCollectionResponse], error)
	ReorderGames(context.Context, *connect.Request[collections_service.ReorderGamesRequest]) (*connect.Response[collections_service.ReorderGamesResponse], error)
	UpdateChapterTitle(context.Context, *connect.Request[collections_service.UpdateChapterTitleRequest]) (*connect.Response[collections_service.UpdateChapterTitleResponse], error)
	GetUserCollections(context.Context, *connect.Request[collections_service.GetUserCollectionsRequest]) (*connect.Response[collections_service.GetUserCollectionsResponse], error)
	GetPublicCollections(context.Context, *connect.Request[collections_service.GetPublicCollectionsRequest]) (*connect.Response[collections_service.GetPublicCollectionsResponse], error)
	GetCollectionsForGame(context.Context, *connect.Request[collections_service.GetCollectionsForGameRequest]) (*connect.Response[collections_service.GetCollectionsForGameResponse], error)
}

// NewCollectionsServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCollectionsServiceHandler(svc CollectionsServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	collectionsServiceMethods := collections_service.File_proto_collections_service_collections_service_proto.Services().ByName("CollectionsService").Methods()
	collectionsServiceCreateCollectionHandler := connect.NewUnaryHandler(
		CollectionsServiceCreateCollectionProcedure,
		svc.CreateCollection,
		connect.WithSchema(collectionsServiceMethods.ByName("CreateCollection")),
		connect.WithHandlerOptions(opts...),
	)
	collectionsServiceGetCollectionHandler := connect.NewUnaryHandler(
		CollectionsServiceGetCollectionProcedure,
		svc.GetCollection,
		connect.WithSchema(collectionsServiceMethods.ByName("GetCollection")),
		connect.WithHandlerOptions(opts...),
	)
	collectionsServiceUpdateCollectionHandler := connect.NewUnaryHandler(
		CollectionsServiceUpdateCollectionProcedure,
		svc.UpdateCollection,
		connect.WithSchema(collectionsServiceMethods.ByName("UpdateCollection")),
		connect.WithHandlerOptions(opts...),
	)
	collectionsServiceDeleteCollectionHandler := connect.NewUnaryHandler(
		CollectionsServiceDeleteCollectionProcedure,
		svc.DeleteCollection,
		connect.WithSchema(collectionsServiceMethods.ByName("DeleteCollection")),
		connect.WithHandlerOptions(opts...),
	)
	collectionsServiceAddGameToCollectionHandler := connect.NewUnaryHandler(
		CollectionsServiceAddGameToCollectionProcedure,
		svc.AddGameToCollection,
		connect.WithSchema(collectionsServiceMethods.ByName("AddGameToCollection")),
		connect.WithHandlerOptions(opts...),
	)
	collectionsServiceRemoveGameFromCollectionHandler := connect.NewUnaryHandler(
		CollectionsServiceRemoveGameFromCollectionProcedure,
		svc.RemoveGameFromCollection,
		connect.WithSchema(collectionsServiceMethods.ByName("RemoveGameFromCollection")),
		connect.WithHandlerOptions(opts...),
	)
	collectionsServiceReorderGamesHandler := connect.NewUnaryHandler(
		CollectionsServiceReorderGamesProcedure,
		svc.ReorderGames,
		connect.WithSchema(collectionsServiceMethods.ByName("ReorderGames")),
		connect.WithHandlerOptions(opts...),
	)
	collectionsServiceUpdateChapterTitleHandler := connect.NewUnaryHandler(
		CollectionsServiceUpdateChapterTitleProcedure,
		svc.UpdateChapterTitle,
		connect.WithSchema(collectionsServiceMethods.ByName("UpdateChapterTitle")),
		connect.WithHandlerOptions(opts...),
	)
	collectionsServiceGetUserCollectionsHandler := connect.NewUnaryHandler(
		CollectionsServiceGetUserCollectionsProcedure,
		svc.GetUserCollections,
		connect.WithSchema(collectionsServiceMethods.ByName("GetUserCollections")),
		connect.WithHandlerOptions(opts...),
	)
	collectionsServiceGetPublicCollectionsHandler := connect.NewUnaryHandler(
		CollectionsServiceGetPublicCollectionsProcedure,
		svc.GetPublicCollections,
		connect.WithSchema(collectionsServiceMethods.ByName("GetPublicCollections")),
		connect.WithHandlerOptions(opts...),
	)
	collectionsServiceGetCollectionsForGameHandler := connect.NewUnaryHandler(
		CollectionsServiceGetCollectionsForGameProcedure,
		svc.GetCollectionsForGame,
		connect.WithSchema(collectionsServiceMethods.ByName("GetCollectionsForGame")),
		connect.WithHandlerOptions(opts...),
	)
	return "/collections_service.CollectionsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CollectionsServiceCreateCollectionProcedure:
			collectionsServiceCreateCollectionHandler.ServeHTTP(w, r)
		case CollectionsServiceGetCollectionProcedure:
			collectionsServiceGetCollectionHandler.ServeHTTP(w, r)
		case CollectionsServiceUpdateCollectionProcedure:
			collectionsServiceUpdateCollectionHandler.ServeHTTP(w, r)
		case CollectionsServiceDeleteCollectionProcedure:
			collectionsServiceDeleteCollectionHandler.ServeHTTP(w, r)
		case CollectionsServiceAddGameToCollectionProcedure:
			collectionsServiceAddGameToCollectionHandler.ServeHTTP(w, r)
		case CollectionsServiceRemoveGameFromCollectionProcedure:
			collectionsServiceRemoveGameFromCollectionHandler.ServeHTTP(w, r)
		case CollectionsServiceReorderGamesProcedure:
			collectionsServiceReorderGamesHandler.ServeHTTP(w, r)
		case CollectionsServiceUpdateChapterTitleProcedure:
			collectionsServiceUpdateChapterTitleHandler.ServeHTTP(w, r)
		case CollectionsServiceGetUserCollectionsProcedure:
			collectionsServiceGetUserCollectionsHandler.ServeHTTP(w, r)
		case CollectionsServiceGetPublicCollectionsProcedure:
			collectionsServiceGetPublicCollectionsHandler.ServeHTTP(w, r)
		case CollectionsServiceGetCollectionsForGameProcedure:
			collectionsServiceGetCollectionsForGameHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCollectionsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCollectionsServiceHandler struct{}

func (UnimplementedCollectionsServiceHandler) CreateCollection(context.Context, *connect.Request[collections_service.CreateCollectionRequest]) (*connect.Response[collections_service.CreateCollectionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("collections_service.CollectionsService.CreateCollection is not implemented"))
}

func (UnimplementedCollectionsServiceHandler) GetCollection(context.Context, *connect.Request[collections_service.GetCollectionRequest]) (*connect.Response[collections_service.GetCollectionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("collections_service.CollectionsService.GetCollection is not implemented"))
}

func (UnimplementedCollectionsServiceHandler) UpdateCollection(context.Context, *connect.Request[collections_service.UpdateCollectionRequest]) (*connect.Response[collections_service.UpdateCollectionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("collections_service.CollectionsService.UpdateCollection is not implemented"))
}

func (UnimplementedCollectionsServiceHandler) DeleteCollection(context.Context, *connect.Request[collections_service.DeleteCollectionRequest]) (*connect.Response[collections_service.DeleteCollectionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("collections_service.CollectionsService.DeleteCollection is not implemented"))
}

func (UnimplementedCollectionsServiceHandler) AddGameToCollection(context.Context, *connect.Request[collections_service.AddGameToCollectionRequest]) (*connect.Response[collections_service.AddGameToCollectionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("collections_service.CollectionsService.AddGameToCollection is not implemented"))
}

func (UnimplementedCollectionsServiceHandler) RemoveGameFromCollection(context.Context, *connect.Request[collections_service.RemoveGameFromCollectionRequest]) (*connect.Response[collections_service.RemoveGameFromCollectionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("collections_service.CollectionsService.RemoveGameFromCollection is not implemented"))
}

func (UnimplementedCollectionsServiceHandler) ReorderGames(context.Context, *connect.Request[collections_service.ReorderGamesRequest]) (*connect.Response[collections_service.ReorderGamesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("collections_service.CollectionsService.ReorderGames is not implemented"))
}

func (UnimplementedCollectionsServiceHandler) UpdateChapterTitle(context.Context, *connect.Request[collections_service.UpdateChapterTitleRequest]) (*connect.Response[collections_service.UpdateChapterTitleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("collections_service.CollectionsService.UpdateChapterTitle is not implemented"))
}

func (UnimplementedCollectionsServiceHandler) GetUserCollections(context.Context, *connect.Request[collections_service.GetUserCollectionsRequest]) (*connect.Response[collections_service.GetUserCollectionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("collections_service.CollectionsService.GetUserCollections is not implemented"))
}

func (UnimplementedCollectionsServiceHandler) GetPublicCollections(context.Context, *connect.Request[collections_service.GetPublicCollectionsRequest]) (*connect.Response[collections_service.GetPublicCollectionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("collections_service.CollectionsService.GetPublicCollections is not implemented"))
}

func (UnimplementedCollectionsServiceHandler) GetCollectionsForGame(context.Context, *connect.Request[collections_service.GetCollectionsForGameRequest]) (*connect.Response[collections_service.GetCollectionsForGameResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("collections_service.CollectionsService.GetCollectionsForGame is not implemented"))
}
