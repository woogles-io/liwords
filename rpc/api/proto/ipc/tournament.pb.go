// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: proto/ipc/tournament.proto

package ipc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TournamentGameResult int32

const (
	// NO_RESULT: the game is not over
	TournamentGameResult_NO_RESULT    TournamentGameResult = 0
	TournamentGameResult_WIN          TournamentGameResult = 1
	TournamentGameResult_LOSS         TournamentGameResult = 2
	TournamentGameResult_DRAW         TournamentGameResult = 3
	TournamentGameResult_BYE          TournamentGameResult = 4
	TournamentGameResult_FORFEIT_WIN  TournamentGameResult = 5
	TournamentGameResult_FORFEIT_LOSS TournamentGameResult = 6
	// ELIMINATED: player is eliminated in a bracket tournament
	TournamentGameResult_ELIMINATED TournamentGameResult = 7
	// VOID: player never played this round and should neither be assigned
	// a win nor a loss. Useful for club-type games.
	TournamentGameResult_VOID TournamentGameResult = 8
)

// Enum value maps for TournamentGameResult.
var (
	TournamentGameResult_name = map[int32]string{
		0: "NO_RESULT",
		1: "WIN",
		2: "LOSS",
		3: "DRAW",
		4: "BYE",
		5: "FORFEIT_WIN",
		6: "FORFEIT_LOSS",
		7: "ELIMINATED",
		8: "VOID",
	}
	TournamentGameResult_value = map[string]int32{
		"NO_RESULT":    0,
		"WIN":          1,
		"LOSS":         2,
		"DRAW":         3,
		"BYE":          4,
		"FORFEIT_WIN":  5,
		"FORFEIT_LOSS": 6,
		"ELIMINATED":   7,
		"VOID":         8,
	}
)

func (x TournamentGameResult) Enum() *TournamentGameResult {
	p := new(TournamentGameResult)
	*p = x
	return p
}

func (x TournamentGameResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TournamentGameResult) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_ipc_tournament_proto_enumTypes[0].Descriptor()
}

func (TournamentGameResult) Type() protoreflect.EnumType {
	return &file_proto_ipc_tournament_proto_enumTypes[0]
}

func (x TournamentGameResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TournamentGameResult.Descriptor instead.
func (TournamentGameResult) EnumDescriptor() ([]byte, []int) {
	return file_proto_ipc_tournament_proto_rawDescGZIP(), []int{0}
}

type PairingMethod int32

const (
	PairingMethod_RANDOM                  PairingMethod = 0
	PairingMethod_ROUND_ROBIN             PairingMethod = 1
	PairingMethod_KING_OF_THE_HILL        PairingMethod = 2
	PairingMethod_ELIMINATION             PairingMethod = 3
	PairingMethod_FACTOR                  PairingMethod = 4
	PairingMethod_INITIAL_FONTES          PairingMethod = 5
	PairingMethod_SWISS                   PairingMethod = 6
	PairingMethod_QUICKPAIR               PairingMethod = 7
	PairingMethod_MANUAL                  PairingMethod = 8
	PairingMethod_TEAM_ROUND_ROBIN        PairingMethod = 9
	PairingMethod_INTERLEAVED_ROUND_ROBIN PairingMethod = 10
)

// Enum value maps for PairingMethod.
var (
	PairingMethod_name = map[int32]string{
		0:  "RANDOM",
		1:  "ROUND_ROBIN",
		2:  "KING_OF_THE_HILL",
		3:  "ELIMINATION",
		4:  "FACTOR",
		5:  "INITIAL_FONTES",
		6:  "SWISS",
		7:  "QUICKPAIR",
		8:  "MANUAL",
		9:  "TEAM_ROUND_ROBIN",
		10: "INTERLEAVED_ROUND_ROBIN",
	}
	PairingMethod_value = map[string]int32{
		"RANDOM":                  0,
		"ROUND_ROBIN":             1,
		"KING_OF_THE_HILL":        2,
		"ELIMINATION":             3,
		"FACTOR":                  4,
		"INITIAL_FONTES":          5,
		"SWISS":                   6,
		"QUICKPAIR":               7,
		"MANUAL":                  8,
		"TEAM_ROUND_ROBIN":        9,
		"INTERLEAVED_ROUND_ROBIN": 10,
	}
)

func (x PairingMethod) Enum() *PairingMethod {
	p := new(PairingMethod)
	*p = x
	return p
}

func (x PairingMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PairingMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_ipc_tournament_proto_enumTypes[1].Descriptor()
}

func (PairingMethod) Type() protoreflect.EnumType {
	return &file_proto_ipc_tournament_proto_enumTypes[1]
}

func (x PairingMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PairingMethod.Descriptor instead.
func (PairingMethod) EnumDescriptor() ([]byte, []int) {
	return file_proto_ipc_tournament_proto_rawDescGZIP(), []int{1}
}

type FirstMethod int32

const (
	FirstMethod_MANUAL_FIRST    FirstMethod = 0
	FirstMethod_RANDOM_FIRST    FirstMethod = 1
	FirstMethod_AUTOMATIC_FIRST FirstMethod = 2
)

// Enum value maps for FirstMethod.
var (
	FirstMethod_name = map[int32]string{
		0: "MANUAL_FIRST",
		1: "RANDOM_FIRST",
		2: "AUTOMATIC_FIRST",
	}
	FirstMethod_value = map[string]int32{
		"MANUAL_FIRST":    0,
		"RANDOM_FIRST":    1,
		"AUTOMATIC_FIRST": 2,
	}
)

func (x FirstMethod) Enum() *FirstMethod {
	p := new(FirstMethod)
	*p = x
	return p
}

func (x FirstMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FirstMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_ipc_tournament_proto_enumTypes[2].Descriptor()
}

func (FirstMethod) Type() protoreflect.EnumType {
	return &file_proto_ipc_tournament_proto_enumTypes[2]
}

func (x FirstMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FirstMethod.Descriptor instead.
func (FirstMethod) EnumDescriptor() ([]byte, []int) {
	return file_proto_ipc_tournament_proto_rawDescGZIP(), []int{2}
}

// New tournaments will use full tournament
// messages (specifically, TournamentDivisionDataResponse et al).
// This event is also used in the tournament_service's RecentGamesResponse,
// which can be used to fetch information for the last games played in
// a tournament.
type TournamentGameEndedEvent struct {
	state     protoimpl.MessageState             `protogen:"open.v1"`
	GameId    string                             `protobuf:"bytes,1,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	Players   []*TournamentGameEndedEvent_Player `protobuf:"bytes,2,rep,name=players,proto3" json:"players,omitempty"`
	EndReason GameEndReason                      `protobuf:"varint,3,opt,name=end_reason,json=endReason,proto3,enum=ipc.GameEndReason" json:"end_reason,omitempty"`
	// Time that the game ended
	Time          int64  `protobuf:"varint,4,opt,name=time,proto3" json:"time,omitempty"`
	Round         int32  `protobuf:"varint,5,opt,name=round,proto3" json:"round,omitempty"`
	Division      string `protobuf:"bytes,6,opt,name=division,proto3" json:"division,omitempty"`
	GameIndex     int32  `protobuf:"varint,7,opt,name=game_index,json=gameIndex,proto3" json:"game_index,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TournamentGameEndedEvent) Reset() {
	*x = TournamentGameEndedEvent{}
	mi := &file_proto_ipc_tournament_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TournamentGameEndedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TournamentGameEndedEvent) ProtoMessage() {}

func (x *TournamentGameEndedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ipc_tournament_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TournamentGameEndedEvent.ProtoReflect.Descriptor instead.
func (*TournamentGameEndedEvent) Descriptor() ([]byte, []int) {
	return file_proto_ipc_tournament_proto_rawDescGZIP(), []int{0}
}

func (x *TournamentGameEndedEvent) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

func (x *TournamentGameEndedEvent) GetPlayers() []*TournamentGameEndedEvent_Player {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *TournamentGameEndedEvent) GetEndReason() GameEndReason {
	if x != nil {
		return x.EndReason
	}
	return GameEndReason_NONE
}

func (x *TournamentGameEndedEvent) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *TournamentGameEndedEvent) GetRound() int32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *TournamentGameEndedEvent) GetDivision() string {
	if x != nil {
		return x.Division
	}
	return ""
}

func (x *TournamentGameEndedEvent) GetGameIndex() int32 {
	if x != nil {
		return x.GameIndex
	}
	return 0
}

// This message makes the "Status Bar" show up and also tells the players
// that the backend is now accepting "ready" messages for this round.
type TournamentRoundStarted struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TournamentId  string                 `protobuf:"bytes,1,opt,name=tournament_id,json=tournamentId,proto3" json:"tournament_id,omitempty"`
	Division      string                 `protobuf:"bytes,2,opt,name=division,proto3" json:"division,omitempty"`
	Round         int32                  `protobuf:"varint,3,opt,name=round,proto3" json:"round,omitempty"`
	GameIndex     int32                  `protobuf:"varint,4,opt,name=game_index,json=gameIndex,proto3" json:"game_index,omitempty"` // for matchplay type rounds etc.
	Deadline      *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=deadline,proto3" json:"deadline,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TournamentRoundStarted) Reset() {
	*x = TournamentRoundStarted{}
	mi := &file_proto_ipc_tournament_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TournamentRoundStarted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TournamentRoundStarted) ProtoMessage() {}

func (x *TournamentRoundStarted) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ipc_tournament_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TournamentRoundStarted.ProtoReflect.Descriptor instead.
func (*TournamentRoundStarted) Descriptor() ([]byte, []int) {
	return file_proto_ipc_tournament_proto_rawDescGZIP(), []int{1}
}

func (x *TournamentRoundStarted) GetTournamentId() string {
	if x != nil {
		return x.TournamentId
	}
	return ""
}

func (x *TournamentRoundStarted) GetDivision() string {
	if x != nil {
		return x.Division
	}
	return ""
}

func (x *TournamentRoundStarted) GetRound() int32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *TournamentRoundStarted) GetGameIndex() int32 {
	if x != nil {
		return x.GameIndex
	}
	return 0
}

func (x *TournamentRoundStarted) GetDeadline() *timestamppb.Timestamp {
	if x != nil {
		return x.Deadline
	}
	return nil
}

// This can be sent from the user to the tournament or vice-versa.
type ReadyForTournamentGame struct {
	state        protoimpl.MessageState `protogen:"open.v1"`
	TournamentId string                 `protobuf:"bytes,1,opt,name=tournament_id,json=tournamentId,proto3" json:"tournament_id,omitempty"`
	Division     string                 `protobuf:"bytes,2,opt,name=division,proto3" json:"division,omitempty"`
	Round        int32                  `protobuf:"varint,3,opt,name=round,proto3" json:"round,omitempty"`
	PlayerId     string                 `protobuf:"bytes,4,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	GameIndex    int32                  `protobuf:"varint,5,opt,name=game_index,json=gameIndex,proto3" json:"game_index,omitempty"` // within a matchplay type tournament where several
	// games share a round.
	Unready       bool `protobuf:"varint,6,opt,name=unready,proto3" json:"unready,omitempty"` // if true, this is a NOT-ready message.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadyForTournamentGame) Reset() {
	*x = ReadyForTournamentGame{}
	mi := &file_proto_ipc_tournament_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadyForTournamentGame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadyForTournamentGame) ProtoMessage() {}

func (x *ReadyForTournamentGame) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ipc_tournament_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadyForTournamentGame.ProtoReflect.Descriptor instead.
func (*ReadyForTournamentGame) Descriptor() ([]byte, []int) {
	return file_proto_ipc_tournament_proto_rawDescGZIP(), []int{2}
}

func (x *ReadyForTournamentGame) GetTournamentId() string {
	if x != nil {
		return x.TournamentId
	}
	return ""
}

func (x *ReadyForTournamentGame) GetDivision() string {
	if x != nil {
		return x.Division
	}
	return ""
}

func (x *ReadyForTournamentGame) GetRound() int32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *ReadyForTournamentGame) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *ReadyForTournamentGame) GetGameIndex() int32 {
	if x != nil {
		return x.GameIndex
	}
	return 0
}

func (x *ReadyForTournamentGame) GetUnready() bool {
	if x != nil {
		return x.Unready
	}
	return false
}

type TournamentPerson struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Rating        int32                  `protobuf:"varint,2,opt,name=rating,proto3" json:"rating,omitempty"`
	Suspended     bool                   `protobuf:"varint,3,opt,name=suspended,proto3" json:"suspended,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TournamentPerson) Reset() {
	*x = TournamentPerson{}
	mi := &file_proto_ipc_tournament_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TournamentPerson) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TournamentPerson) ProtoMessage() {}

func (x *TournamentPerson) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ipc_tournament_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TournamentPerson.ProtoReflect.Descriptor instead.
func (*TournamentPerson) Descriptor() ([]byte, []int) {
	return file_proto_ipc_tournament_proto_rawDescGZIP(), []int{3}
}

func (x *TournamentPerson) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TournamentPerson) GetRating() int32 {
	if x != nil {
		return x.Rating
	}
	return 0
}

func (x *TournamentPerson) GetSuspended() bool {
	if x != nil {
		return x.Suspended
	}
	return false
}

type TournamentPersons struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Division      string                 `protobuf:"bytes,2,opt,name=division,proto3" json:"division,omitempty"`
	Persons       []*TournamentPerson    `protobuf:"bytes,3,rep,name=persons,proto3" json:"persons,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TournamentPersons) Reset() {
	*x = TournamentPersons{}
	mi := &file_proto_ipc_tournament_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TournamentPersons) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TournamentPersons) ProtoMessage() {}

func (x *TournamentPersons) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ipc_tournament_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TournamentPersons.ProtoReflect.Descriptor instead.
func (*TournamentPersons) Descriptor() ([]byte, []int) {
	return file_proto_ipc_tournament_proto_rawDescGZIP(), []int{4}
}

func (x *TournamentPersons) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TournamentPersons) GetDivision() string {
	if x != nil {
		return x.Division
	}
	return ""
}

func (x *TournamentPersons) GetPersons() []*TournamentPerson {
	if x != nil {
		return x.Persons
	}
	return nil
}

type RoundControl struct {
	state                       protoimpl.MessageState `protogen:"open.v1"`
	PairingMethod               PairingMethod          `protobuf:"varint,1,opt,name=pairing_method,json=pairingMethod,proto3,enum=ipc.PairingMethod" json:"pairing_method,omitempty"`
	FirstMethod                 FirstMethod            `protobuf:"varint,2,opt,name=first_method,json=firstMethod,proto3,enum=ipc.FirstMethod" json:"first_method,omitempty"`
	GamesPerRound               int32                  `protobuf:"varint,3,opt,name=games_per_round,json=gamesPerRound,proto3" json:"games_per_round,omitempty"`
	Round                       int32                  `protobuf:"varint,4,opt,name=round,proto3" json:"round,omitempty"`
	Factor                      int32                  `protobuf:"varint,5,opt,name=factor,proto3" json:"factor,omitempty"`
	InitialFontes               int32                  `protobuf:"varint,6,opt,name=initial_fontes,json=initialFontes,proto3" json:"initial_fontes,omitempty"`
	MaxRepeats                  int32                  `protobuf:"varint,7,opt,name=max_repeats,json=maxRepeats,proto3" json:"max_repeats,omitempty"`
	AllowOverMaxRepeats         bool                   `protobuf:"varint,8,opt,name=allow_over_max_repeats,json=allowOverMaxRepeats,proto3" json:"allow_over_max_repeats,omitempty"`
	RepeatRelativeWeight        int32                  `protobuf:"varint,9,opt,name=repeat_relative_weight,json=repeatRelativeWeight,proto3" json:"repeat_relative_weight,omitempty"`
	WinDifferenceRelativeWeight int32                  `protobuf:"varint,10,opt,name=win_difference_relative_weight,json=winDifferenceRelativeWeight,proto3" json:"win_difference_relative_weight,omitempty"`
	// Optional is needed to represent:
	// - `nil` for no override at all
	// - `0` overriding the default to disable the spread cap
	// Without an optional, these two cases would be indistinguishable.
	SpreadCapOverride *uint32 `protobuf:"varint,12,opt,name=spread_cap_override,json=spreadCapOverride,proto3,oneof" json:"spread_cap_override,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *RoundControl) Reset() {
	*x = RoundControl{}
	mi := &file_proto_ipc_tournament_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RoundControl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoundControl) ProtoMessage() {}

func (x *RoundControl) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ipc_tournament_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoundControl.ProtoReflect.Descriptor instead.
func (*RoundControl) Descriptor() ([]byte, []int) {
	return file_proto_ipc_tournament_proto_rawDescGZIP(), []int{5}
}

func (x *RoundControl) GetPairingMethod() PairingMethod {
	if x != nil {
		return x.PairingMethod
	}
	return PairingMethod_RANDOM
}

func (x *RoundControl) GetFirstMethod() FirstMethod {
	if x != nil {
		return x.FirstMethod
	}
	return FirstMethod_MANUAL_FIRST
}

func (x *RoundControl) GetGamesPerRound() int32 {
	if x != nil {
		return x.GamesPerRound
	}
	return 0
}

func (x *RoundControl) GetRound() int32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *RoundControl) GetFactor() int32 {
	if x != nil {
		return x.Factor
	}
	return 0
}

func (x *RoundControl) GetInitialFontes() int32 {
	if x != nil {
		return x.InitialFontes
	}
	return 0
}

func (x *RoundControl) GetMaxRepeats() int32 {
	if x != nil {
		return x.MaxRepeats
	}
	return 0
}

func (x *RoundControl) GetAllowOverMaxRepeats() bool {
	if x != nil {
		return x.AllowOverMaxRepeats
	}
	return false
}

func (x *RoundControl) GetRepeatRelativeWeight() int32 {
	if x != nil {
		return x.RepeatRelativeWeight
	}
	return 0
}

func (x *RoundControl) GetWinDifferenceRelativeWeight() int32 {
	if x != nil {
		return x.WinDifferenceRelativeWeight
	}
	return 0
}

func (x *RoundControl) GetSpreadCapOverride() uint32 {
	if x != nil && x.SpreadCapOverride != nil {
		return *x.SpreadCapOverride
	}
	return 0
}

type DivisionControls struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Id                  string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Division            string                 `protobuf:"bytes,2,opt,name=division,proto3" json:"division,omitempty"`
	GameRequest         *GameRequest           `protobuf:"bytes,3,opt,name=game_request,json=gameRequest,proto3" json:"game_request,omitempty"`
	SuspendedResult     TournamentGameResult   `protobuf:"varint,4,opt,name=suspended_result,json=suspendedResult,proto3,enum=ipc.TournamentGameResult" json:"suspended_result,omitempty"`
	SuspendedSpread     int32                  `protobuf:"varint,5,opt,name=suspended_spread,json=suspendedSpread,proto3" json:"suspended_spread,omitempty"`
	AutoStart           bool                   `protobuf:"varint,6,opt,name=auto_start,json=autoStart,proto3" json:"auto_start,omitempty"`
	SpreadCap           uint32                 `protobuf:"varint,7,opt,name=spread_cap,json=spreadCap,proto3" json:"spread_cap,omitempty"`
	Gibsonize           bool                   `protobuf:"varint,8,opt,name=gibsonize,proto3" json:"gibsonize,omitempty"`
	GibsonSpread        int32                  `protobuf:"varint,9,opt,name=gibson_spread,json=gibsonSpread,proto3" json:"gibson_spread,omitempty"`
	MinimumPlacement    int32                  `protobuf:"varint,10,opt,name=minimum_placement,json=minimumPlacement,proto3" json:"minimum_placement,omitempty"`
	MaximumByePlacement int32                  `protobuf:"varint,11,opt,name=maximum_bye_placement,json=maximumByePlacement,proto3" json:"maximum_bye_placement,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *DivisionControls) Reset() {
	*x = DivisionControls{}
	mi := &file_proto_ipc_tournament_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DivisionControls) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DivisionControls) ProtoMessage() {}

func (x *DivisionControls) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ipc_tournament_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DivisionControls.ProtoReflect.Descriptor instead.
func (*DivisionControls) Descriptor() ([]byte, []int) {
	return file_proto_ipc_tournament_proto_rawDescGZIP(), []int{6}
}

func (x *DivisionControls) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DivisionControls) GetDivision() string {
	if x != nil {
		return x.Division
	}
	return ""
}

func (x *DivisionControls) GetGameRequest() *GameRequest {
	if x != nil {
		return x.GameRequest
	}
	return nil
}

func (x *DivisionControls) GetSuspendedResult() TournamentGameResult {
	if x != nil {
		return x.SuspendedResult
	}
	return TournamentGameResult_NO_RESULT
}

func (x *DivisionControls) GetSuspendedSpread() int32 {
	if x != nil {
		return x.SuspendedSpread
	}
	return 0
}

func (x *DivisionControls) GetAutoStart() bool {
	if x != nil {
		return x.AutoStart
	}
	return false
}

func (x *DivisionControls) GetSpreadCap() uint32 {
	if x != nil {
		return x.SpreadCap
	}
	return 0
}

func (x *DivisionControls) GetGibsonize() bool {
	if x != nil {
		return x.Gibsonize
	}
	return false
}

func (x *DivisionControls) GetGibsonSpread() int32 {
	if x != nil {
		return x.GibsonSpread
	}
	return 0
}

func (x *DivisionControls) GetMinimumPlacement() int32 {
	if x != nil {
		return x.MinimumPlacement
	}
	return 0
}

func (x *DivisionControls) GetMaximumByePlacement() int32 {
	if x != nil {
		return x.MaximumByePlacement
	}
	return 0
}

type TournamentGame struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Scores        []int32                `protobuf:"varint,1,rep,packed,name=scores,proto3" json:"scores,omitempty"`
	Results       []TournamentGameResult `protobuf:"varint,2,rep,packed,name=results,proto3,enum=ipc.TournamentGameResult" json:"results,omitempty"`
	GameEndReason GameEndReason          `protobuf:"varint,3,opt,name=game_end_reason,json=gameEndReason,proto3,enum=ipc.GameEndReason" json:"game_end_reason,omitempty"`
	Id            string                 `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TournamentGame) Reset() {
	*x = TournamentGame{}
	mi := &file_proto_ipc_tournament_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TournamentGame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TournamentGame) ProtoMessage() {}

func (x *TournamentGame) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ipc_tournament_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TournamentGame.ProtoReflect.Descriptor instead.
func (*TournamentGame) Descriptor() ([]byte, []int) {
	return file_proto_ipc_tournament_proto_rawDescGZIP(), []int{7}
}

func (x *TournamentGame) GetScores() []int32 {
	if x != nil {
		return x.Scores
	}
	return nil
}

func (x *TournamentGame) GetResults() []TournamentGameResult {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *TournamentGame) GetGameEndReason() GameEndReason {
	if x != nil {
		return x.GameEndReason
	}
	return GameEndReason_NONE
}

func (x *TournamentGame) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type Pairing struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Players       []int32                `protobuf:"varint,1,rep,packed,name=players,proto3" json:"players,omitempty"`
	Round         int32                  `protobuf:"varint,2,opt,name=round,proto3" json:"round,omitempty"`
	Games         []*TournamentGame      `protobuf:"bytes,3,rep,name=games,proto3" json:"games,omitempty"` // can be a list, for elimination tourneys
	Outcomes      []TournamentGameResult `protobuf:"varint,4,rep,packed,name=outcomes,proto3,enum=ipc.TournamentGameResult" json:"outcomes,omitempty"`
	ReadyStates   []string               `protobuf:"bytes,5,rep,name=ready_states,json=readyStates,proto3" json:"ready_states,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Pairing) Reset() {
	*x = Pairing{}
	mi := &file_proto_ipc_tournament_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Pairing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pairing) ProtoMessage() {}

func (x *Pairing) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ipc_tournament_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pairing.ProtoReflect.Descriptor instead.
func (*Pairing) Descriptor() ([]byte, []int) {
	return file_proto_ipc_tournament_proto_rawDescGZIP(), []int{8}
}

func (x *Pairing) GetPlayers() []int32 {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *Pairing) GetRound() int32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *Pairing) GetGames() []*TournamentGame {
	if x != nil {
		return x.Games
	}
	return nil
}

func (x *Pairing) GetOutcomes() []TournamentGameResult {
	if x != nil {
		return x.Outcomes
	}
	return nil
}

func (x *Pairing) GetReadyStates() []string {
	if x != nil {
		return x.ReadyStates
	}
	return nil
}

type PlayerStanding struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PlayerId      string                 `protobuf:"bytes,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	Wins          int32                  `protobuf:"varint,2,opt,name=wins,proto3" json:"wins,omitempty"`
	Losses        int32                  `protobuf:"varint,3,opt,name=losses,proto3" json:"losses,omitempty"`
	Draws         int32                  `protobuf:"varint,4,opt,name=draws,proto3" json:"draws,omitempty"`
	Spread        int32                  `protobuf:"varint,5,opt,name=spread,proto3" json:"spread,omitempty"`
	Gibsonized    bool                   `protobuf:"varint,6,opt,name=gibsonized,proto3" json:"gibsonized,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PlayerStanding) Reset() {
	*x = PlayerStanding{}
	mi := &file_proto_ipc_tournament_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayerStanding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerStanding) ProtoMessage() {}

func (x *PlayerStanding) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ipc_tournament_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerStanding.ProtoReflect.Descriptor instead.
func (*PlayerStanding) Descriptor() ([]byte, []int) {
	return file_proto_ipc_tournament_proto_rawDescGZIP(), []int{9}
}

func (x *PlayerStanding) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *PlayerStanding) GetWins() int32 {
	if x != nil {
		return x.Wins
	}
	return 0
}

func (x *PlayerStanding) GetLosses() int32 {
	if x != nil {
		return x.Losses
	}
	return 0
}

func (x *PlayerStanding) GetDraws() int32 {
	if x != nil {
		return x.Draws
	}
	return 0
}

func (x *PlayerStanding) GetSpread() int32 {
	if x != nil {
		return x.Spread
	}
	return 0
}

func (x *PlayerStanding) GetGibsonized() bool {
	if x != nil {
		return x.Gibsonized
	}
	return false
}

type RoundStandings struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Standings     []*PlayerStanding      `protobuf:"bytes,1,rep,name=standings,proto3" json:"standings,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RoundStandings) Reset() {
	*x = RoundStandings{}
	mi := &file_proto_ipc_tournament_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RoundStandings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoundStandings) ProtoMessage() {}

func (x *RoundStandings) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ipc_tournament_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoundStandings.ProtoReflect.Descriptor instead.
func (*RoundStandings) Descriptor() ([]byte, []int) {
	return file_proto_ipc_tournament_proto_rawDescGZIP(), []int{10}
}

func (x *RoundStandings) GetStandings() []*PlayerStanding {
	if x != nil {
		return x.Standings
	}
	return nil
}

type DivisionPairingsResponse struct {
	state             protoimpl.MessageState    `protogen:"open.v1"`
	Id                string                    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Division          string                    `protobuf:"bytes,2,opt,name=division,proto3" json:"division,omitempty"`
	DivisionPairings  []*Pairing                `protobuf:"bytes,3,rep,name=division_pairings,json=divisionPairings,proto3" json:"division_pairings,omitempty"`
	DivisionStandings map[int32]*RoundStandings `protobuf:"bytes,4,rep,name=division_standings,json=divisionStandings,proto3" json:"division_standings,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *DivisionPairingsResponse) Reset() {
	*x = DivisionPairingsResponse{}
	mi := &file_proto_ipc_tournament_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DivisionPairingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DivisionPairingsResponse) ProtoMessage() {}

func (x *DivisionPairingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ipc_tournament_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DivisionPairingsResponse.ProtoReflect.Descriptor instead.
func (*DivisionPairingsResponse) Descriptor() ([]byte, []int) {
	return file_proto_ipc_tournament_proto_rawDescGZIP(), []int{11}
}

func (x *DivisionPairingsResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DivisionPairingsResponse) GetDivision() string {
	if x != nil {
		return x.Division
	}
	return ""
}

func (x *DivisionPairingsResponse) GetDivisionPairings() []*Pairing {
	if x != nil {
		return x.DivisionPairings
	}
	return nil
}

func (x *DivisionPairingsResponse) GetDivisionStandings() map[int32]*RoundStandings {
	if x != nil {
		return x.DivisionStandings
	}
	return nil
}

type DivisionPairingsDeletedResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Division      string                 `protobuf:"bytes,2,opt,name=division,proto3" json:"division,omitempty"`
	Round         int32                  `protobuf:"varint,3,opt,name=round,proto3" json:"round,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DivisionPairingsDeletedResponse) Reset() {
	*x = DivisionPairingsDeletedResponse{}
	mi := &file_proto_ipc_tournament_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DivisionPairingsDeletedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DivisionPairingsDeletedResponse) ProtoMessage() {}

func (x *DivisionPairingsDeletedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ipc_tournament_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DivisionPairingsDeletedResponse.ProtoReflect.Descriptor instead.
func (*DivisionPairingsDeletedResponse) Descriptor() ([]byte, []int) {
	return file_proto_ipc_tournament_proto_rawDescGZIP(), []int{12}
}

func (x *DivisionPairingsDeletedResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DivisionPairingsDeletedResponse) GetDivision() string {
	if x != nil {
		return x.Division
	}
	return ""
}

func (x *DivisionPairingsDeletedResponse) GetRound() int32 {
	if x != nil {
		return x.Round
	}
	return 0
}

type PlayersAddedOrRemovedResponse struct {
	state             protoimpl.MessageState    `protogen:"open.v1"`
	Id                string                    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Division          string                    `protobuf:"bytes,2,opt,name=division,proto3" json:"division,omitempty"`
	Players           *TournamentPersons        `protobuf:"bytes,3,opt,name=players,proto3" json:"players,omitempty"`
	DivisionPairings  []*Pairing                `protobuf:"bytes,4,rep,name=division_pairings,json=divisionPairings,proto3" json:"division_pairings,omitempty"`
	DivisionStandings map[int32]*RoundStandings `protobuf:"bytes,5,rep,name=division_standings,json=divisionStandings,proto3" json:"division_standings,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *PlayersAddedOrRemovedResponse) Reset() {
	*x = PlayersAddedOrRemovedResponse{}
	mi := &file_proto_ipc_tournament_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayersAddedOrRemovedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayersAddedOrRemovedResponse) ProtoMessage() {}

func (x *PlayersAddedOrRemovedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ipc_tournament_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayersAddedOrRemovedResponse.ProtoReflect.Descriptor instead.
func (*PlayersAddedOrRemovedResponse) Descriptor() ([]byte, []int) {
	return file_proto_ipc_tournament_proto_rawDescGZIP(), []int{13}
}

func (x *PlayersAddedOrRemovedResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PlayersAddedOrRemovedResponse) GetDivision() string {
	if x != nil {
		return x.Division
	}
	return ""
}

func (x *PlayersAddedOrRemovedResponse) GetPlayers() *TournamentPersons {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *PlayersAddedOrRemovedResponse) GetDivisionPairings() []*Pairing {
	if x != nil {
		return x.DivisionPairings
	}
	return nil
}

func (x *PlayersAddedOrRemovedResponse) GetDivisionStandings() map[int32]*RoundStandings {
	if x != nil {
		return x.DivisionStandings
	}
	return nil
}

type DivisionRoundControls struct {
	state             protoimpl.MessageState    `protogen:"open.v1"`
	Id                string                    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Division          string                    `protobuf:"bytes,2,opt,name=division,proto3" json:"division,omitempty"`
	RoundControls     []*RoundControl           `protobuf:"bytes,3,rep,name=round_controls,json=roundControls,proto3" json:"round_controls,omitempty"`
	DivisionPairings  []*Pairing                `protobuf:"bytes,4,rep,name=division_pairings,json=divisionPairings,proto3" json:"division_pairings,omitempty"`
	DivisionStandings map[int32]*RoundStandings `protobuf:"bytes,5,rep,name=division_standings,json=divisionStandings,proto3" json:"division_standings,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *DivisionRoundControls) Reset() {
	*x = DivisionRoundControls{}
	mi := &file_proto_ipc_tournament_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DivisionRoundControls) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DivisionRoundControls) ProtoMessage() {}

func (x *DivisionRoundControls) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ipc_tournament_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DivisionRoundControls.ProtoReflect.Descriptor instead.
func (*DivisionRoundControls) Descriptor() ([]byte, []int) {
	return file_proto_ipc_tournament_proto_rawDescGZIP(), []int{14}
}

func (x *DivisionRoundControls) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DivisionRoundControls) GetDivision() string {
	if x != nil {
		return x.Division
	}
	return ""
}

func (x *DivisionRoundControls) GetRoundControls() []*RoundControl {
	if x != nil {
		return x.RoundControls
	}
	return nil
}

func (x *DivisionRoundControls) GetDivisionPairings() []*Pairing {
	if x != nil {
		return x.DivisionPairings
	}
	return nil
}

func (x *DivisionRoundControls) GetDivisionStandings() map[int32]*RoundStandings {
	if x != nil {
		return x.DivisionStandings
	}
	return nil
}

type DivisionControlsResponse struct {
	state             protoimpl.MessageState    `protogen:"open.v1"`
	Id                string                    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Division          string                    `protobuf:"bytes,2,opt,name=division,proto3" json:"division,omitempty"`
	DivisionControls  *DivisionControls         `protobuf:"bytes,3,opt,name=division_controls,json=divisionControls,proto3" json:"division_controls,omitempty"`
	DivisionStandings map[int32]*RoundStandings `protobuf:"bytes,4,rep,name=division_standings,json=divisionStandings,proto3" json:"division_standings,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *DivisionControlsResponse) Reset() {
	*x = DivisionControlsResponse{}
	mi := &file_proto_ipc_tournament_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DivisionControlsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DivisionControlsResponse) ProtoMessage() {}

func (x *DivisionControlsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ipc_tournament_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DivisionControlsResponse.ProtoReflect.Descriptor instead.
func (*DivisionControlsResponse) Descriptor() ([]byte, []int) {
	return file_proto_ipc_tournament_proto_rawDescGZIP(), []int{15}
}

func (x *DivisionControlsResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DivisionControlsResponse) GetDivision() string {
	if x != nil {
		return x.Division
	}
	return ""
}

func (x *DivisionControlsResponse) GetDivisionControls() *DivisionControls {
	if x != nil {
		return x.DivisionControls
	}
	return nil
}

func (x *DivisionControlsResponse) GetDivisionStandings() map[int32]*RoundStandings {
	if x != nil {
		return x.DivisionStandings
	}
	return nil
}

type TournamentDivisionDataResponse struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Id            string                    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Division      string                    `protobuf:"bytes,2,opt,name=division,proto3" json:"division,omitempty"`
	Players       *TournamentPersons        `protobuf:"bytes,3,opt,name=players,proto3" json:"players,omitempty"`
	Standings     map[int32]*RoundStandings `protobuf:"bytes,4,rep,name=standings,proto3" json:"standings,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	PairingMap    map[string]*Pairing       `protobuf:"bytes,5,rep,name=pairing_map,json=pairingMap,proto3" json:"pairing_map,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Controls      *DivisionControls         `protobuf:"bytes,6,opt,name=controls,proto3" json:"controls,omitempty"`
	RoundControls []*RoundControl           `protobuf:"bytes,7,rep,name=round_controls,json=roundControls,proto3" json:"round_controls,omitempty"`
	CurrentRound  int32                     `protobuf:"varint,8,opt,name=current_round,json=currentRound,proto3" json:"current_round,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TournamentDivisionDataResponse) Reset() {
	*x = TournamentDivisionDataResponse{}
	mi := &file_proto_ipc_tournament_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TournamentDivisionDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TournamentDivisionDataResponse) ProtoMessage() {}

func (x *TournamentDivisionDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ipc_tournament_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TournamentDivisionDataResponse.ProtoReflect.Descriptor instead.
func (*TournamentDivisionDataResponse) Descriptor() ([]byte, []int) {
	return file_proto_ipc_tournament_proto_rawDescGZIP(), []int{16}
}

func (x *TournamentDivisionDataResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TournamentDivisionDataResponse) GetDivision() string {
	if x != nil {
		return x.Division
	}
	return ""
}

func (x *TournamentDivisionDataResponse) GetPlayers() *TournamentPersons {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *TournamentDivisionDataResponse) GetStandings() map[int32]*RoundStandings {
	if x != nil {
		return x.Standings
	}
	return nil
}

func (x *TournamentDivisionDataResponse) GetPairingMap() map[string]*Pairing {
	if x != nil {
		return x.PairingMap
	}
	return nil
}

func (x *TournamentDivisionDataResponse) GetControls() *DivisionControls {
	if x != nil {
		return x.Controls
	}
	return nil
}

func (x *TournamentDivisionDataResponse) GetRoundControls() []*RoundControl {
	if x != nil {
		return x.RoundControls
	}
	return nil
}

func (x *TournamentDivisionDataResponse) GetCurrentRound() int32 {
	if x != nil {
		return x.CurrentRound
	}
	return 0
}

type FullTournamentDivisions struct {
	state         protoimpl.MessageState                     `protogen:"open.v1"`
	Divisions     map[string]*TournamentDivisionDataResponse `protobuf:"bytes,1,rep,name=divisions,proto3" json:"divisions,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Started       bool                                       `protobuf:"varint,2,opt,name=started,proto3" json:"started,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FullTournamentDivisions) Reset() {
	*x = FullTournamentDivisions{}
	mi := &file_proto_ipc_tournament_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FullTournamentDivisions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FullTournamentDivisions) ProtoMessage() {}

func (x *FullTournamentDivisions) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ipc_tournament_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FullTournamentDivisions.ProtoReflect.Descriptor instead.
func (*FullTournamentDivisions) Descriptor() ([]byte, []int) {
	return file_proto_ipc_tournament_proto_rawDescGZIP(), []int{17}
}

func (x *FullTournamentDivisions) GetDivisions() map[string]*TournamentDivisionDataResponse {
	if x != nil {
		return x.Divisions
	}
	return nil
}

func (x *FullTournamentDivisions) GetStarted() bool {
	if x != nil {
		return x.Started
	}
	return false
}

type TournamentFinishedResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TournamentFinishedResponse) Reset() {
	*x = TournamentFinishedResponse{}
	mi := &file_proto_ipc_tournament_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TournamentFinishedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TournamentFinishedResponse) ProtoMessage() {}

func (x *TournamentFinishedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ipc_tournament_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TournamentFinishedResponse.ProtoReflect.Descriptor instead.
func (*TournamentFinishedResponse) Descriptor() ([]byte, []int) {
	return file_proto_ipc_tournament_proto_rawDescGZIP(), []int{18}
}

func (x *TournamentFinishedResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type TournamentDataResponse struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Id                string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name              string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description       string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	ExecutiveDirector string                 `protobuf:"bytes,4,opt,name=executive_director,json=executiveDirector,proto3" json:"executive_director,omitempty"`
	Directors         *TournamentPersons     `protobuf:"bytes,5,opt,name=directors,proto3" json:"directors,omitempty"`
	IsStarted         bool                   `protobuf:"varint,6,opt,name=is_started,json=isStarted,proto3" json:"is_started,omitempty"`
	// Note: this field seems totally unused
	StartTime          *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	ScheduledStartTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=scheduled_start_time,json=scheduledStartTime,proto3" json:"scheduled_start_time,omitempty"`
	ScheduledEndTime   *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=scheduled_end_time,json=scheduledEndTime,proto3" json:"scheduled_end_time,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *TournamentDataResponse) Reset() {
	*x = TournamentDataResponse{}
	mi := &file_proto_ipc_tournament_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TournamentDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TournamentDataResponse) ProtoMessage() {}

func (x *TournamentDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ipc_tournament_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TournamentDataResponse.ProtoReflect.Descriptor instead.
func (*TournamentDataResponse) Descriptor() ([]byte, []int) {
	return file_proto_ipc_tournament_proto_rawDescGZIP(), []int{19}
}

func (x *TournamentDataResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TournamentDataResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TournamentDataResponse) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TournamentDataResponse) GetExecutiveDirector() string {
	if x != nil {
		return x.ExecutiveDirector
	}
	return ""
}

func (x *TournamentDataResponse) GetDirectors() *TournamentPersons {
	if x != nil {
		return x.Directors
	}
	return nil
}

func (x *TournamentDataResponse) GetIsStarted() bool {
	if x != nil {
		return x.IsStarted
	}
	return false
}

func (x *TournamentDataResponse) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *TournamentDataResponse) GetScheduledStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ScheduledStartTime
	}
	return nil
}

func (x *TournamentDataResponse) GetScheduledEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ScheduledEndTime
	}
	return nil
}

type TournamentDivisionDeletedResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Division      string                 `protobuf:"bytes,2,opt,name=division,proto3" json:"division,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TournamentDivisionDeletedResponse) Reset() {
	*x = TournamentDivisionDeletedResponse{}
	mi := &file_proto_ipc_tournament_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TournamentDivisionDeletedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TournamentDivisionDeletedResponse) ProtoMessage() {}

func (x *TournamentDivisionDeletedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ipc_tournament_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TournamentDivisionDeletedResponse.ProtoReflect.Descriptor instead.
func (*TournamentDivisionDeletedResponse) Descriptor() ([]byte, []int) {
	return file_proto_ipc_tournament_proto_rawDescGZIP(), []int{20}
}

func (x *TournamentDivisionDeletedResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TournamentDivisionDeletedResponse) GetDivision() string {
	if x != nil {
		return x.Division
	}
	return ""
}

type TournamentGameEndedEvent_Player struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Username      string                 `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Score         int32                  `protobuf:"varint,2,opt,name=score,proto3" json:"score,omitempty"`
	Result        TournamentGameResult   `protobuf:"varint,3,opt,name=result,proto3,enum=ipc.TournamentGameResult" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TournamentGameEndedEvent_Player) Reset() {
	*x = TournamentGameEndedEvent_Player{}
	mi := &file_proto_ipc_tournament_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TournamentGameEndedEvent_Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TournamentGameEndedEvent_Player) ProtoMessage() {}

func (x *TournamentGameEndedEvent_Player) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ipc_tournament_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TournamentGameEndedEvent_Player.ProtoReflect.Descriptor instead.
func (*TournamentGameEndedEvent_Player) Descriptor() ([]byte, []int) {
	return file_proto_ipc_tournament_proto_rawDescGZIP(), []int{0, 0}
}

func (x *TournamentGameEndedEvent_Player) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *TournamentGameEndedEvent_Player) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *TournamentGameEndedEvent_Player) GetResult() TournamentGameResult {
	if x != nil {
		return x.Result
	}
	return TournamentGameResult_NO_RESULT
}

var File_proto_ipc_tournament_proto protoreflect.FileDescriptor

var file_proto_ipc_tournament_proto_rawDesc = string([]byte{
	0x0a, 0x1a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x69, 0x70, 0x63, 0x2f, 0x74, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x69, 0x70,
	0x63, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x18, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x69, 0x70, 0x63, 0x2f, 0x6f, 0x6d,
	0x67, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfa, 0x02, 0x0a,
	0x18, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x45,
	0x6e, 0x64, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65,
	0x49, 0x64, 0x12, 0x3e, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x69, 0x70, 0x63, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x65, 0x64, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x73, 0x12, 0x31, 0x0a, 0x0a, 0x65, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x69, 0x70, 0x63, 0x2e, 0x47, 0x61, 0x6d,
	0x65, 0x45, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x1a, 0x6d, 0x0a, 0x06, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x69, 0x70, 0x63, 0x2e, 0x54, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xc6, 0x01, 0x0a, 0x16, 0x54, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x69, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x36, 0x0a, 0x08, 0x64, 0x65,
	0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69,
	0x6e, 0x65, 0x22, 0xc5, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x61, 0x64, 0x79, 0x46, 0x6f, 0x72, 0x54,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x18, 0x0a, 0x07, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x79, 0x22, 0x58, 0x0a, 0x10, 0x54, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e,
	0x64, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x75, 0x73, 0x70, 0x65,
	0x6e, 0x64, 0x65, 0x64, 0x22, 0x70, 0x0a, 0x11, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x6e, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x69, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x07, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69, 0x70, 0x63, 0x2e, 0x54, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x07, 0x70,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x73, 0x22, 0x9f, 0x04, 0x0a, 0x0c, 0x52, 0x6f, 0x75, 0x6e, 0x64,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x39, 0x0a, 0x0e, 0x70, 0x61, 0x69, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x12, 0x2e, 0x69, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x52, 0x0d, 0x70, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x12, 0x33, 0x0a, 0x0c, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x69, 0x70, 0x63, 0x2e, 0x46,
	0x69, 0x72, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x0b, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x67, 0x61, 0x6d, 0x65, 0x73,
	0x5f, 0x70, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x50, 0x65, 0x72, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x25, 0x0a,
	0x0e, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x66, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x46, 0x6f,
	0x6e, 0x74, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x70, 0x65,
	0x61, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x52, 0x65,
	0x70, 0x65, 0x61, 0x74, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6f,
	0x76, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4f, 0x76, 0x65, 0x72,
	0x4d, 0x61, 0x78, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x72, 0x65,
	0x70, 0x65, 0x61, 0x74, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x72, 0x65, 0x70, 0x65,
	0x61, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x43, 0x0a, 0x1e, 0x77, 0x69, 0x6e, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1b, 0x77, 0x69, 0x6e, 0x44, 0x69, 0x66,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x57,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x33, 0x0a, 0x13, 0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x5f,
	0x63, 0x61, 0x70, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x00, 0x52, 0x11, 0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x43, 0x61, 0x70, 0x4f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x88, 0x01, 0x01, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x73,
	0x70, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x61, 0x70, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69,
	0x64, 0x65, 0x4a, 0x04, 0x08, 0x0b, 0x10, 0x0c, 0x22, 0xc6, 0x03, 0x0a, 0x10, 0x44, 0x69, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x0c, 0x67, 0x61, 0x6d,
	0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x69, 0x70, 0x63, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44,
	0x0a, 0x10, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x69, 0x70, 0x63, 0x2e, 0x54,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x0f, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x5f, 0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f,
	0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x53, 0x70, 0x72, 0x65, 0x61, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x75, 0x74, 0x6f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x61, 0x70, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x43, 0x61, 0x70, 0x12, 0x1c, 0x0a,
	0x09, 0x67, 0x69, 0x62, 0x73, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x67, 0x69, 0x62, 0x73, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x67,
	0x69, 0x62, 0x73, 0x6f, 0x6e, 0x5f, 0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x67, 0x69, 0x62, 0x73, 0x6f, 0x6e, 0x53, 0x70, 0x72, 0x65, 0x61, 0x64,
	0x12, 0x2b, 0x0a, 0x11, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6d, 0x69, 0x6e,
	0x69, 0x6d, 0x75, 0x6d, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a,
	0x15, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x62, 0x79, 0x65, 0x5f, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x6d, 0x61,
	0x78, 0x69, 0x6d, 0x75, 0x6d, 0x42, 0x79, 0x65, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x22, 0xa9, 0x01, 0x0a, 0x0e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74,
	0x47, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x07,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x19, 0x2e,
	0x69, 0x70, 0x63, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x12, 0x3a, 0x0a, 0x0f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x69, 0x70, 0x63,
	0x2e, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x0d,
	0x67, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xbe, 0x01,
	0x0a, 0x07, 0x50, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x29, 0x0a, 0x05, 0x67, 0x61, 0x6d,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x70, 0x63, 0x2e, 0x54,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x05, 0x67,
	0x61, 0x6d, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x69, 0x70, 0x63, 0x2e, 0x54, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x72,
	0x65, 0x61, 0x64, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x22, 0xa7,
	0x01, 0x0a, 0x0e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x77, 0x69, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x77, 0x69,
	0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x73, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x6c, 0x6f, 0x73, 0x73, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x72,
	0x61, 0x77, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x64, 0x72, 0x61, 0x77, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x69, 0x62, 0x73,
	0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x67, 0x69,
	0x62, 0x73, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x64, 0x22, 0x43, 0x0a, 0x0e, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x31, 0x0a, 0x09, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x69, 0x70, 0x63, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x52, 0x09, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x22, 0xc1, 0x02,
	0x0a, 0x18, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x69, 0x72, 0x69, 0x6e,
	0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x69,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x11, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x69, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x10, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x63, 0x0a, 0x12, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e,
	0x69, 0x70, 0x63, 0x2e, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x69, 0x72,
	0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x69, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x11, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0x59, 0x0a, 0x16, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x69, 0x70, 0x63, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x63, 0x0a, 0x1f, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x69,
	0x72, 0x69, 0x6e, 0x67, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x22, 0xfd, 0x02, 0x0a, 0x1d, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x73, 0x41, 0x64, 0x64, 0x65, 0x64, 0x4f, 0x72, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x69, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x70, 0x63, 0x2e, 0x54, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x39, 0x0a, 0x11, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x69, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x10, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x68, 0x0a, 0x12, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e,
	0x69, 0x70, 0x63, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x41, 0x64, 0x64, 0x65, 0x64,
	0x4f, 0x72, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0x59, 0x0a, 0x16, 0x44,
	0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x70, 0x63, 0x2e, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf5, 0x02, 0x0a, 0x15, 0x44, 0x69, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0e,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x69, 0x70, 0x63, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x0d, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x12, 0x39, 0x0a, 0x11, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x69, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x10, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x60, 0x0a, 0x12, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x69, 0x70, 0x63, 0x2e, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x2e, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x11, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x73, 0x1a, 0x59, 0x0a, 0x16, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x69, 0x70, 0x63, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xca,
	0x02, 0x0a, 0x18, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64,
	0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64,
	0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x11, 0x64, 0x69, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69, 0x70, 0x63, 0x2e, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x52, 0x10, 0x64, 0x69, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x12, 0x63, 0x0a, 0x12, 0x64,
	0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x69, 0x70, 0x63, 0x2e, 0x44, 0x69,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x64,
	0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73,
	0x1a, 0x59, 0x0a, 0x16, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x70,
	0x63, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd8, 0x04, 0x0a, 0x1e,
	0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x07, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x70,
	0x63, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x73, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x50, 0x0a, 0x09,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x69, 0x70, 0x63, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74,
	0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x09, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x54,
	0x0a, 0x0b, 0x70, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x69, 0x70, 0x63, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x70, 0x61, 0x69, 0x72, 0x69, 0x6e,
	0x67, 0x4d, 0x61, 0x70, 0x12, 0x31, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69, 0x70, 0x63, 0x2e, 0x44, 0x69, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x52, 0x08, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x12, 0x38, 0x0a, 0x0e, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x69, 0x70, 0x63, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x52, 0x0d, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x73, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x1a, 0x51, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x70, 0x63, 0x2e,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4b, 0x0a, 0x0f, 0x50, 0x61, 0x69,
	0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x22,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x69, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe1, 0x01, 0x0a, 0x17, 0x46, 0x75, 0x6c, 0x6c, 0x54,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x49, 0x0a, 0x09, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x69, 0x70, 0x63, 0x2e, 0x46, 0x75, 0x6c, 0x6c,
	0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x09, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x1a, 0x61, 0x0a, 0x0e, 0x44, 0x69, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x39, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x69, 0x70, 0x63,
	0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2c, 0x0a, 0x1a, 0x54, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xb5, 0x03, 0x0a, 0x16, 0x54, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x76, 0x65,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x34, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x70,
	0x63, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x73, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x39, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x14, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x12, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x12, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0x4f, 0x0a, 0x21, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x69,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x2a, 0x88, 0x01, 0x0a, 0x14, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74,
	0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f,
	0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x57, 0x49, 0x4e,
	0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x4f, 0x53, 0x53, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04,
	0x44, 0x52, 0x41, 0x57, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x59, 0x45, 0x10, 0x04, 0x12,
	0x0f, 0x0a, 0x0b, 0x46, 0x4f, 0x52, 0x46, 0x45, 0x49, 0x54, 0x5f, 0x57, 0x49, 0x4e, 0x10, 0x05,
	0x12, 0x10, 0x0a, 0x0c, 0x46, 0x4f, 0x52, 0x46, 0x45, 0x49, 0x54, 0x5f, 0x4c, 0x4f, 0x53, 0x53,
	0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x4c, 0x49, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x45, 0x44,
	0x10, 0x07, 0x12, 0x08, 0x0a, 0x04, 0x56, 0x4f, 0x49, 0x44, 0x10, 0x08, 0x2a, 0xcc, 0x01, 0x0a,
	0x0d, 0x50, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x0a,
	0x0a, 0x06, 0x52, 0x41, 0x4e, 0x44, 0x4f, 0x4d, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x4f,
	0x55, 0x4e, 0x44, 0x5f, 0x52, 0x4f, 0x42, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x4b,
	0x49, 0x4e, 0x47, 0x5f, 0x4f, 0x46, 0x5f, 0x54, 0x48, 0x45, 0x5f, 0x48, 0x49, 0x4c, 0x4c, 0x10,
	0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x4c, 0x49, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x10, 0x04, 0x12, 0x12,
	0x0a, 0x0e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x46, 0x4f, 0x4e, 0x54, 0x45, 0x53,
	0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x57, 0x49, 0x53, 0x53, 0x10, 0x06, 0x12, 0x0d, 0x0a,
	0x09, 0x51, 0x55, 0x49, 0x43, 0x4b, 0x50, 0x41, 0x49, 0x52, 0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06,
	0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x10, 0x08, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x45, 0x41, 0x4d,
	0x5f, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x52, 0x4f, 0x42, 0x49, 0x4e, 0x10, 0x09, 0x12, 0x1b,
	0x0a, 0x17, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4c, 0x45, 0x41, 0x56, 0x45, 0x44, 0x5f, 0x52, 0x4f,
	0x55, 0x4e, 0x44, 0x5f, 0x52, 0x4f, 0x42, 0x49, 0x4e, 0x10, 0x0a, 0x2a, 0x46, 0x0a, 0x0b, 0x46,
	0x69, 0x72, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x41,
	0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c,
	0x52, 0x41, 0x4e, 0x44, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x10, 0x01, 0x12, 0x13,
	0x0a, 0x0f, 0x41, 0x55, 0x54, 0x4f, 0x4d, 0x41, 0x54, 0x49, 0x43, 0x5f, 0x46, 0x49, 0x52, 0x53,
	0x54, 0x10, 0x02, 0x42, 0x77, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x2e, 0x69, 0x70, 0x63, 0x42, 0x0f,
	0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x01, 0x5a, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x77, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x73, 0x2d, 0x69, 0x6f, 0x2f, 0x6c, 0x69, 0x77, 0x6f, 0x72, 0x64, 0x73,
	0x2f, 0x72, 0x70, 0x63, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x69,
	0x70, 0x63, 0xa2, 0x02, 0x03, 0x49, 0x58, 0x58, 0xaa, 0x02, 0x03, 0x49, 0x70, 0x63, 0xca, 0x02,
	0x03, 0x49, 0x70, 0x63, 0xe2, 0x02, 0x0f, 0x49, 0x70, 0x63, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x03, 0x49, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_proto_ipc_tournament_proto_rawDescOnce sync.Once
	file_proto_ipc_tournament_proto_rawDescData []byte
)

func file_proto_ipc_tournament_proto_rawDescGZIP() []byte {
	file_proto_ipc_tournament_proto_rawDescOnce.Do(func() {
		file_proto_ipc_tournament_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_ipc_tournament_proto_rawDesc), len(file_proto_ipc_tournament_proto_rawDesc)))
	})
	return file_proto_ipc_tournament_proto_rawDescData
}

var file_proto_ipc_tournament_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_proto_ipc_tournament_proto_msgTypes = make([]protoimpl.MessageInfo, 29)
var file_proto_ipc_tournament_proto_goTypes = []any{
	(TournamentGameResult)(0),                 // 0: ipc.TournamentGameResult
	(PairingMethod)(0),                        // 1: ipc.PairingMethod
	(FirstMethod)(0),                          // 2: ipc.FirstMethod
	(*TournamentGameEndedEvent)(nil),          // 3: ipc.TournamentGameEndedEvent
	(*TournamentRoundStarted)(nil),            // 4: ipc.TournamentRoundStarted
	(*ReadyForTournamentGame)(nil),            // 5: ipc.ReadyForTournamentGame
	(*TournamentPerson)(nil),                  // 6: ipc.TournamentPerson
	(*TournamentPersons)(nil),                 // 7: ipc.TournamentPersons
	(*RoundControl)(nil),                      // 8: ipc.RoundControl
	(*DivisionControls)(nil),                  // 9: ipc.DivisionControls
	(*TournamentGame)(nil),                    // 10: ipc.TournamentGame
	(*Pairing)(nil),                           // 11: ipc.Pairing
	(*PlayerStanding)(nil),                    // 12: ipc.PlayerStanding
	(*RoundStandings)(nil),                    // 13: ipc.RoundStandings
	(*DivisionPairingsResponse)(nil),          // 14: ipc.DivisionPairingsResponse
	(*DivisionPairingsDeletedResponse)(nil),   // 15: ipc.DivisionPairingsDeletedResponse
	(*PlayersAddedOrRemovedResponse)(nil),     // 16: ipc.PlayersAddedOrRemovedResponse
	(*DivisionRoundControls)(nil),             // 17: ipc.DivisionRoundControls
	(*DivisionControlsResponse)(nil),          // 18: ipc.DivisionControlsResponse
	(*TournamentDivisionDataResponse)(nil),    // 19: ipc.TournamentDivisionDataResponse
	(*FullTournamentDivisions)(nil),           // 20: ipc.FullTournamentDivisions
	(*TournamentFinishedResponse)(nil),        // 21: ipc.TournamentFinishedResponse
	(*TournamentDataResponse)(nil),            // 22: ipc.TournamentDataResponse
	(*TournamentDivisionDeletedResponse)(nil), // 23: ipc.TournamentDivisionDeletedResponse
	(*TournamentGameEndedEvent_Player)(nil),   // 24: ipc.TournamentGameEndedEvent.Player
	nil,                                       // 25: ipc.DivisionPairingsResponse.DivisionStandingsEntry
	nil,                                       // 26: ipc.PlayersAddedOrRemovedResponse.DivisionStandingsEntry
	nil,                                       // 27: ipc.DivisionRoundControls.DivisionStandingsEntry
	nil,                                       // 28: ipc.DivisionControlsResponse.DivisionStandingsEntry
	nil,                                       // 29: ipc.TournamentDivisionDataResponse.StandingsEntry
	nil,                                       // 30: ipc.TournamentDivisionDataResponse.PairingMapEntry
	nil,                                       // 31: ipc.FullTournamentDivisions.DivisionsEntry
	(GameEndReason)(0),                        // 32: ipc.GameEndReason
	(*timestamppb.Timestamp)(nil),             // 33: google.protobuf.Timestamp
	(*GameRequest)(nil),                       // 34: ipc.GameRequest
}
var file_proto_ipc_tournament_proto_depIdxs = []int32{
	24, // 0: ipc.TournamentGameEndedEvent.players:type_name -> ipc.TournamentGameEndedEvent.Player
	32, // 1: ipc.TournamentGameEndedEvent.end_reason:type_name -> ipc.GameEndReason
	33, // 2: ipc.TournamentRoundStarted.deadline:type_name -> google.protobuf.Timestamp
	6,  // 3: ipc.TournamentPersons.persons:type_name -> ipc.TournamentPerson
	1,  // 4: ipc.RoundControl.pairing_method:type_name -> ipc.PairingMethod
	2,  // 5: ipc.RoundControl.first_method:type_name -> ipc.FirstMethod
	34, // 6: ipc.DivisionControls.game_request:type_name -> ipc.GameRequest
	0,  // 7: ipc.DivisionControls.suspended_result:type_name -> ipc.TournamentGameResult
	0,  // 8: ipc.TournamentGame.results:type_name -> ipc.TournamentGameResult
	32, // 9: ipc.TournamentGame.game_end_reason:type_name -> ipc.GameEndReason
	10, // 10: ipc.Pairing.games:type_name -> ipc.TournamentGame
	0,  // 11: ipc.Pairing.outcomes:type_name -> ipc.TournamentGameResult
	12, // 12: ipc.RoundStandings.standings:type_name -> ipc.PlayerStanding
	11, // 13: ipc.DivisionPairingsResponse.division_pairings:type_name -> ipc.Pairing
	25, // 14: ipc.DivisionPairingsResponse.division_standings:type_name -> ipc.DivisionPairingsResponse.DivisionStandingsEntry
	7,  // 15: ipc.PlayersAddedOrRemovedResponse.players:type_name -> ipc.TournamentPersons
	11, // 16: ipc.PlayersAddedOrRemovedResponse.division_pairings:type_name -> ipc.Pairing
	26, // 17: ipc.PlayersAddedOrRemovedResponse.division_standings:type_name -> ipc.PlayersAddedOrRemovedResponse.DivisionStandingsEntry
	8,  // 18: ipc.DivisionRoundControls.round_controls:type_name -> ipc.RoundControl
	11, // 19: ipc.DivisionRoundControls.division_pairings:type_name -> ipc.Pairing
	27, // 20: ipc.DivisionRoundControls.division_standings:type_name -> ipc.DivisionRoundControls.DivisionStandingsEntry
	9,  // 21: ipc.DivisionControlsResponse.division_controls:type_name -> ipc.DivisionControls
	28, // 22: ipc.DivisionControlsResponse.division_standings:type_name -> ipc.DivisionControlsResponse.DivisionStandingsEntry
	7,  // 23: ipc.TournamentDivisionDataResponse.players:type_name -> ipc.TournamentPersons
	29, // 24: ipc.TournamentDivisionDataResponse.standings:type_name -> ipc.TournamentDivisionDataResponse.StandingsEntry
	30, // 25: ipc.TournamentDivisionDataResponse.pairing_map:type_name -> ipc.TournamentDivisionDataResponse.PairingMapEntry
	9,  // 26: ipc.TournamentDivisionDataResponse.controls:type_name -> ipc.DivisionControls
	8,  // 27: ipc.TournamentDivisionDataResponse.round_controls:type_name -> ipc.RoundControl
	31, // 28: ipc.FullTournamentDivisions.divisions:type_name -> ipc.FullTournamentDivisions.DivisionsEntry
	7,  // 29: ipc.TournamentDataResponse.directors:type_name -> ipc.TournamentPersons
	33, // 30: ipc.TournamentDataResponse.start_time:type_name -> google.protobuf.Timestamp
	33, // 31: ipc.TournamentDataResponse.scheduled_start_time:type_name -> google.protobuf.Timestamp
	33, // 32: ipc.TournamentDataResponse.scheduled_end_time:type_name -> google.protobuf.Timestamp
	0,  // 33: ipc.TournamentGameEndedEvent.Player.result:type_name -> ipc.TournamentGameResult
	13, // 34: ipc.DivisionPairingsResponse.DivisionStandingsEntry.value:type_name -> ipc.RoundStandings
	13, // 35: ipc.PlayersAddedOrRemovedResponse.DivisionStandingsEntry.value:type_name -> ipc.RoundStandings
	13, // 36: ipc.DivisionRoundControls.DivisionStandingsEntry.value:type_name -> ipc.RoundStandings
	13, // 37: ipc.DivisionControlsResponse.DivisionStandingsEntry.value:type_name -> ipc.RoundStandings
	13, // 38: ipc.TournamentDivisionDataResponse.StandingsEntry.value:type_name -> ipc.RoundStandings
	11, // 39: ipc.TournamentDivisionDataResponse.PairingMapEntry.value:type_name -> ipc.Pairing
	19, // 40: ipc.FullTournamentDivisions.DivisionsEntry.value:type_name -> ipc.TournamentDivisionDataResponse
	41, // [41:41] is the sub-list for method output_type
	41, // [41:41] is the sub-list for method input_type
	41, // [41:41] is the sub-list for extension type_name
	41, // [41:41] is the sub-list for extension extendee
	0,  // [0:41] is the sub-list for field type_name
}

func init() { file_proto_ipc_tournament_proto_init() }
func file_proto_ipc_tournament_proto_init() {
	if File_proto_ipc_tournament_proto != nil {
		return
	}
	file_proto_ipc_omgwords_proto_init()
	file_proto_ipc_tournament_proto_msgTypes[5].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_ipc_tournament_proto_rawDesc), len(file_proto_ipc_tournament_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   29,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_ipc_tournament_proto_goTypes,
		DependencyIndexes: file_proto_ipc_tournament_proto_depIdxs,
		EnumInfos:         file_proto_ipc_tournament_proto_enumTypes,
		MessageInfos:      file_proto_ipc_tournament_proto_msgTypes,
	}.Build()
	File_proto_ipc_tournament_proto = out.File
	file_proto_ipc_tournament_proto_goTypes = nil
	file_proto_ipc_tournament_proto_depIdxs = nil
}
