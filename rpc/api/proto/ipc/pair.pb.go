// Definitions for pairing messages

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        (unknown)
// source: proto/ipc/pair.proto

package ipc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PairMethod int32

const (
	PairMethod_COP PairMethod = 0
)

// Enum value maps for PairMethod.
var (
	PairMethod_name = map[int32]string{
		0: "COP",
	}
	PairMethod_value = map[string]int32{
		"COP": 0,
	}
)

func (x PairMethod) Enum() *PairMethod {
	p := new(PairMethod)
	*p = x
	return p
}

func (x PairMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PairMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_ipc_pair_proto_enumTypes[0].Descriptor()
}

func (PairMethod) Type() protoreflect.EnumType {
	return &file_proto_ipc_pair_proto_enumTypes[0]
}

func (x PairMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PairMethod.Descriptor instead.
func (PairMethod) EnumDescriptor() ([]byte, []int) {
	return file_proto_ipc_pair_proto_rawDescGZIP(), []int{0}
}

type PairError int32

const (
	PairError_SUCCESS                               PairError = 0
	PairError_PLAYER_COUNT_INSUFFICIENT             PairError = 1
	PairError_ROUND_COUNT_INSUFFICIENT              PairError = 2
	PairError_PLAYER_COUNT_TOO_LARGE                PairError = 3
	PairError_PLAYER_NAME_COUNT_INSUFFICIENT        PairError = 4
	PairError_PLAYER_NAME_EMPTY                     PairError = 5
	PairError_MORE_PAIRINGS_THAN_ROUNDS             PairError = 6
	PairError_ALL_ROUNDS_PAIRED                     PairError = 7
	PairError_INVALID_ROUND_PAIRINGS_COUNT          PairError = 8
	PairError_PLAYER_INDEX_OUT_OF_BOUNDS            PairError = 9
	PairError_UNPAIRED_PLAYER                       PairError = 10
	PairError_INVALID_PAIRING                       PairError = 11
	PairError_MORE_RESULTS_THAN_ROUNDS              PairError = 12
	PairError_MORE_RESULTS_THAN_PAIRINGS            PairError = 13
	PairError_INVALID_ROUND_RESULTS_COUNT           PairError = 14
	PairError_INVALID_PLAYER_CLASS_COUNT            PairError = 15
	PairError_INVALID_PLAYER_CLASS                  PairError = 16
	PairError_INVALID_CLASS_PRIZE                   PairError = 17
	PairError_INVALID_GIBSON_SPREAD                 PairError = 18
	PairError_INVALID_CONTROL_LOSS_THRESHOLD        PairError = 19
	PairError_INVALID_HOPEFULNESS_THRESHOLD         PairError = 20
	PairError_INVALID_DIVISION_SIMS                 PairError = 21
	PairError_INVALID_CONTROL_LOSS_SIMS             PairError = 22
	PairError_INVALID_CONTROL_LOSS_ACTIVATION_ROUND PairError = 23
	PairError_INVALID_PLACE_PRIZES                  PairError = 24
	PairError_INVALID_REMOVED_PLAYER                PairError = 25
	PairError_INVALID_VALID_PLAYER_COUNT            PairError = 26
	PairError_MIN_WEIGHT_MATCHING                   PairError = 27
	PairError_INVALID_PAIRINGS_LENGTH               PairError = 28
	PairError_OVERCONSTRAINED                       PairError = 29
	PairError_REQUEST_TO_JSON_FAILED                PairError = 30
	PairError_TIMEOUT                               PairError = 31
)

// Enum value maps for PairError.
var (
	PairError_name = map[int32]string{
		0:  "SUCCESS",
		1:  "PLAYER_COUNT_INSUFFICIENT",
		2:  "ROUND_COUNT_INSUFFICIENT",
		3:  "PLAYER_COUNT_TOO_LARGE",
		4:  "PLAYER_NAME_COUNT_INSUFFICIENT",
		5:  "PLAYER_NAME_EMPTY",
		6:  "MORE_PAIRINGS_THAN_ROUNDS",
		7:  "ALL_ROUNDS_PAIRED",
		8:  "INVALID_ROUND_PAIRINGS_COUNT",
		9:  "PLAYER_INDEX_OUT_OF_BOUNDS",
		10: "UNPAIRED_PLAYER",
		11: "INVALID_PAIRING",
		12: "MORE_RESULTS_THAN_ROUNDS",
		13: "MORE_RESULTS_THAN_PAIRINGS",
		14: "INVALID_ROUND_RESULTS_COUNT",
		15: "INVALID_PLAYER_CLASS_COUNT",
		16: "INVALID_PLAYER_CLASS",
		17: "INVALID_CLASS_PRIZE",
		18: "INVALID_GIBSON_SPREAD",
		19: "INVALID_CONTROL_LOSS_THRESHOLD",
		20: "INVALID_HOPEFULNESS_THRESHOLD",
		21: "INVALID_DIVISION_SIMS",
		22: "INVALID_CONTROL_LOSS_SIMS",
		23: "INVALID_CONTROL_LOSS_ACTIVATION_ROUND",
		24: "INVALID_PLACE_PRIZES",
		25: "INVALID_REMOVED_PLAYER",
		26: "INVALID_VALID_PLAYER_COUNT",
		27: "MIN_WEIGHT_MATCHING",
		28: "INVALID_PAIRINGS_LENGTH",
		29: "OVERCONSTRAINED",
		30: "REQUEST_TO_JSON_FAILED",
		31: "TIMEOUT",
	}
	PairError_value = map[string]int32{
		"SUCCESS":                               0,
		"PLAYER_COUNT_INSUFFICIENT":             1,
		"ROUND_COUNT_INSUFFICIENT":              2,
		"PLAYER_COUNT_TOO_LARGE":                3,
		"PLAYER_NAME_COUNT_INSUFFICIENT":        4,
		"PLAYER_NAME_EMPTY":                     5,
		"MORE_PAIRINGS_THAN_ROUNDS":             6,
		"ALL_ROUNDS_PAIRED":                     7,
		"INVALID_ROUND_PAIRINGS_COUNT":          8,
		"PLAYER_INDEX_OUT_OF_BOUNDS":            9,
		"UNPAIRED_PLAYER":                       10,
		"INVALID_PAIRING":                       11,
		"MORE_RESULTS_THAN_ROUNDS":              12,
		"MORE_RESULTS_THAN_PAIRINGS":            13,
		"INVALID_ROUND_RESULTS_COUNT":           14,
		"INVALID_PLAYER_CLASS_COUNT":            15,
		"INVALID_PLAYER_CLASS":                  16,
		"INVALID_CLASS_PRIZE":                   17,
		"INVALID_GIBSON_SPREAD":                 18,
		"INVALID_CONTROL_LOSS_THRESHOLD":        19,
		"INVALID_HOPEFULNESS_THRESHOLD":         20,
		"INVALID_DIVISION_SIMS":                 21,
		"INVALID_CONTROL_LOSS_SIMS":             22,
		"INVALID_CONTROL_LOSS_ACTIVATION_ROUND": 23,
		"INVALID_PLACE_PRIZES":                  24,
		"INVALID_REMOVED_PLAYER":                25,
		"INVALID_VALID_PLAYER_COUNT":            26,
		"MIN_WEIGHT_MATCHING":                   27,
		"INVALID_PAIRINGS_LENGTH":               28,
		"OVERCONSTRAINED":                       29,
		"REQUEST_TO_JSON_FAILED":                30,
		"TIMEOUT":                               31,
	}
)

func (x PairError) Enum() *PairError {
	p := new(PairError)
	*p = x
	return p
}

func (x PairError) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PairError) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_ipc_pair_proto_enumTypes[1].Descriptor()
}

func (PairError) Type() protoreflect.EnumType {
	return &file_proto_ipc_pair_proto_enumTypes[1]
}

func (x PairError) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PairError.Descriptor instead.
func (PairError) EnumDescriptor() ([]byte, []int) {
	return file_proto_ipc_pair_proto_rawDescGZIP(), []int{1}
}

type RoundPairings struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pairings      []int32                `protobuf:"varint,1,rep,packed,name=pairings,proto3" json:"pairings,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RoundPairings) Reset() {
	*x = RoundPairings{}
	mi := &file_proto_ipc_pair_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RoundPairings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoundPairings) ProtoMessage() {}

func (x *RoundPairings) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ipc_pair_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoundPairings.ProtoReflect.Descriptor instead.
func (*RoundPairings) Descriptor() ([]byte, []int) {
	return file_proto_ipc_pair_proto_rawDescGZIP(), []int{0}
}

func (x *RoundPairings) GetPairings() []int32 {
	if x != nil {
		return x.Pairings
	}
	return nil
}

type RoundResults struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Results       []int32                `protobuf:"varint,1,rep,packed,name=results,proto3" json:"results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RoundResults) Reset() {
	*x = RoundResults{}
	mi := &file_proto_ipc_pair_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RoundResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoundResults) ProtoMessage() {}

func (x *RoundResults) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ipc_pair_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoundResults.ProtoReflect.Descriptor instead.
func (*RoundResults) Descriptor() ([]byte, []int) {
	return file_proto_ipc_pair_proto_rawDescGZIP(), []int{1}
}

func (x *RoundResults) GetResults() []int32 {
	if x != nil {
		return x.Results
	}
	return nil
}

type PairRequest struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	PairMethod                 PairMethod             `protobuf:"varint,1,opt,name=pair_method,json=pairMethod,proto3,enum=ipc.PairMethod" json:"pair_method,omitempty"`
	PlayerNames                []string               `protobuf:"bytes,2,rep,name=player_names,json=playerNames,proto3" json:"player_names,omitempty"`
	PlayerClasses              []int32                `protobuf:"varint,3,rep,packed,name=player_classes,json=playerClasses,proto3" json:"player_classes,omitempty"`
	DivisionPairings           []*RoundPairings       `protobuf:"bytes,4,rep,name=division_pairings,json=divisionPairings,proto3" json:"division_pairings,omitempty"`
	DivisionResults            []*RoundResults        `protobuf:"bytes,5,rep,name=division_results,json=divisionResults,proto3" json:"division_results,omitempty"`
	ClassPrizes                []int32                `protobuf:"varint,6,rep,packed,name=class_prizes,json=classPrizes,proto3" json:"class_prizes,omitempty"`
	GibsonSpread               int32                  `protobuf:"varint,7,opt,name=gibson_spread,json=gibsonSpread,proto3" json:"gibson_spread,omitempty"`
	ControlLossThreshold       float64                `protobuf:"fixed64,8,opt,name=control_loss_threshold,json=controlLossThreshold,proto3" json:"control_loss_threshold,omitempty"`
	HopefulnessThreshold       float64                `protobuf:"fixed64,9,opt,name=hopefulness_threshold,json=hopefulnessThreshold,proto3" json:"hopefulness_threshold,omitempty"`
	AllPlayers                 int32                  `protobuf:"varint,10,opt,name=all_players,json=allPlayers,proto3" json:"all_players,omitempty"`
	ValidPlayers               int32                  `protobuf:"varint,11,opt,name=valid_players,json=validPlayers,proto3" json:"valid_players,omitempty"`
	Rounds                     int32                  `protobuf:"varint,12,opt,name=rounds,proto3" json:"rounds,omitempty"`
	PlacePrizes                int32                  `protobuf:"varint,13,opt,name=place_prizes,json=placePrizes,proto3" json:"place_prizes,omitempty"`
	DivisionSims               int32                  `protobuf:"varint,14,opt,name=division_sims,json=divisionSims,proto3" json:"division_sims,omitempty"`
	ControlLossSims            int32                  `protobuf:"varint,15,opt,name=control_loss_sims,json=controlLossSims,proto3" json:"control_loss_sims,omitempty"`
	ControlLossActivationRound int32                  `protobuf:"varint,16,opt,name=control_loss_activation_round,json=controlLossActivationRound,proto3" json:"control_loss_activation_round,omitempty"`
	AllowRepeatByes            bool                   `protobuf:"varint,17,opt,name=allow_repeat_byes,json=allowRepeatByes,proto3" json:"allow_repeat_byes,omitempty"`
	RemovedPlayers             []int32                `protobuf:"varint,18,rep,packed,name=removed_players,json=removedPlayers,proto3" json:"removed_players,omitempty"`
	Seed                       int64                  `protobuf:"varint,19,opt,name=seed,proto3" json:"seed,omitempty"`
	TopDownByes                bool                   `protobuf:"varint,20,opt,name=top_down_byes,json=topDownByes,proto3" json:"top_down_byes,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *PairRequest) Reset() {
	*x = PairRequest{}
	mi := &file_proto_ipc_pair_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PairRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PairRequest) ProtoMessage() {}

func (x *PairRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ipc_pair_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PairRequest.ProtoReflect.Descriptor instead.
func (*PairRequest) Descriptor() ([]byte, []int) {
	return file_proto_ipc_pair_proto_rawDescGZIP(), []int{2}
}

func (x *PairRequest) GetPairMethod() PairMethod {
	if x != nil {
		return x.PairMethod
	}
	return PairMethod_COP
}

func (x *PairRequest) GetPlayerNames() []string {
	if x != nil {
		return x.PlayerNames
	}
	return nil
}

func (x *PairRequest) GetPlayerClasses() []int32 {
	if x != nil {
		return x.PlayerClasses
	}
	return nil
}

func (x *PairRequest) GetDivisionPairings() []*RoundPairings {
	if x != nil {
		return x.DivisionPairings
	}
	return nil
}

func (x *PairRequest) GetDivisionResults() []*RoundResults {
	if x != nil {
		return x.DivisionResults
	}
	return nil
}

func (x *PairRequest) GetClassPrizes() []int32 {
	if x != nil {
		return x.ClassPrizes
	}
	return nil
}

func (x *PairRequest) GetGibsonSpread() int32 {
	if x != nil {
		return x.GibsonSpread
	}
	return 0
}

func (x *PairRequest) GetControlLossThreshold() float64 {
	if x != nil {
		return x.ControlLossThreshold
	}
	return 0
}

func (x *PairRequest) GetHopefulnessThreshold() float64 {
	if x != nil {
		return x.HopefulnessThreshold
	}
	return 0
}

func (x *PairRequest) GetAllPlayers() int32 {
	if x != nil {
		return x.AllPlayers
	}
	return 0
}

func (x *PairRequest) GetValidPlayers() int32 {
	if x != nil {
		return x.ValidPlayers
	}
	return 0
}

func (x *PairRequest) GetRounds() int32 {
	if x != nil {
		return x.Rounds
	}
	return 0
}

func (x *PairRequest) GetPlacePrizes() int32 {
	if x != nil {
		return x.PlacePrizes
	}
	return 0
}

func (x *PairRequest) GetDivisionSims() int32 {
	if x != nil {
		return x.DivisionSims
	}
	return 0
}

func (x *PairRequest) GetControlLossSims() int32 {
	if x != nil {
		return x.ControlLossSims
	}
	return 0
}

func (x *PairRequest) GetControlLossActivationRound() int32 {
	if x != nil {
		return x.ControlLossActivationRound
	}
	return 0
}

func (x *PairRequest) GetAllowRepeatByes() bool {
	if x != nil {
		return x.AllowRepeatByes
	}
	return false
}

func (x *PairRequest) GetRemovedPlayers() []int32 {
	if x != nil {
		return x.RemovedPlayers
	}
	return nil
}

func (x *PairRequest) GetSeed() int64 {
	if x != nil {
		return x.Seed
	}
	return 0
}

func (x *PairRequest) GetTopDownByes() bool {
	if x != nil {
		return x.TopDownByes
	}
	return false
}

type PairResponse struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	ErrorCode         PairError              `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3,enum=ipc.PairError" json:"error_code,omitempty"`
	ErrorMessage      string                 `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	Log               string                 `protobuf:"bytes,3,opt,name=log,proto3" json:"log,omitempty"`
	Pairings          []int32                `protobuf:"varint,4,rep,packed,name=pairings,proto3" json:"pairings,omitempty"`
	GibsonizedPlayers []bool                 `protobuf:"varint,5,rep,packed,name=gibsonized_players,json=gibsonizedPlayers,proto3" json:"gibsonized_players,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *PairResponse) Reset() {
	*x = PairResponse{}
	mi := &file_proto_ipc_pair_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PairResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PairResponse) ProtoMessage() {}

func (x *PairResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ipc_pair_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PairResponse.ProtoReflect.Descriptor instead.
func (*PairResponse) Descriptor() ([]byte, []int) {
	return file_proto_ipc_pair_proto_rawDescGZIP(), []int{3}
}

func (x *PairResponse) GetErrorCode() PairError {
	if x != nil {
		return x.ErrorCode
	}
	return PairError_SUCCESS
}

func (x *PairResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *PairResponse) GetLog() string {
	if x != nil {
		return x.Log
	}
	return ""
}

func (x *PairResponse) GetPairings() []int32 {
	if x != nil {
		return x.Pairings
	}
	return nil
}

func (x *PairResponse) GetGibsonizedPlayers() []bool {
	if x != nil {
		return x.GibsonizedPlayers
	}
	return nil
}

var File_proto_ipc_pair_proto protoreflect.FileDescriptor

const file_proto_ipc_pair_proto_rawDesc = "" +
	"\n" +
	"\x14proto/ipc/pair.proto\x12\x03ipc\"+\n" +
	"\rRoundPairings\x12\x1a\n" +
	"\bpairings\x18\x01 \x03(\x05R\bpairings\"(\n" +
	"\fRoundResults\x12\x18\n" +
	"\aresults\x18\x01 \x03(\x05R\aresults\"\xdd\x06\n" +
	"\vPairRequest\x120\n" +
	"\vpair_method\x18\x01 \x01(\x0e2\x0f.ipc.PairMethodR\n" +
	"pairMethod\x12!\n" +
	"\fplayer_names\x18\x02 \x03(\tR\vplayerNames\x12%\n" +
	"\x0eplayer_classes\x18\x03 \x03(\x05R\rplayerClasses\x12?\n" +
	"\x11division_pairings\x18\x04 \x03(\v2\x12.ipc.RoundPairingsR\x10divisionPairings\x12<\n" +
	"\x10division_results\x18\x05 \x03(\v2\x11.ipc.RoundResultsR\x0fdivisionResults\x12!\n" +
	"\fclass_prizes\x18\x06 \x03(\x05R\vclassPrizes\x12#\n" +
	"\rgibson_spread\x18\a \x01(\x05R\fgibsonSpread\x124\n" +
	"\x16control_loss_threshold\x18\b \x01(\x01R\x14controlLossThreshold\x123\n" +
	"\x15hopefulness_threshold\x18\t \x01(\x01R\x14hopefulnessThreshold\x12\x1f\n" +
	"\vall_players\x18\n" +
	" \x01(\x05R\n" +
	"allPlayers\x12#\n" +
	"\rvalid_players\x18\v \x01(\x05R\fvalidPlayers\x12\x16\n" +
	"\x06rounds\x18\f \x01(\x05R\x06rounds\x12!\n" +
	"\fplace_prizes\x18\r \x01(\x05R\vplacePrizes\x12#\n" +
	"\rdivision_sims\x18\x0e \x01(\x05R\fdivisionSims\x12*\n" +
	"\x11control_loss_sims\x18\x0f \x01(\x05R\x0fcontrolLossSims\x12A\n" +
	"\x1dcontrol_loss_activation_round\x18\x10 \x01(\x05R\x1acontrolLossActivationRound\x12*\n" +
	"\x11allow_repeat_byes\x18\x11 \x01(\bR\x0fallowRepeatByes\x12'\n" +
	"\x0fremoved_players\x18\x12 \x03(\x05R\x0eremovedPlayers\x12\x12\n" +
	"\x04seed\x18\x13 \x01(\x03R\x04seed\x12\"\n" +
	"\rtop_down_byes\x18\x14 \x01(\bR\vtopDownByes\"\xbf\x01\n" +
	"\fPairResponse\x12-\n" +
	"\n" +
	"error_code\x18\x01 \x01(\x0e2\x0e.ipc.PairErrorR\terrorCode\x12#\n" +
	"\rerror_message\x18\x02 \x01(\tR\ferrorMessage\x12\x10\n" +
	"\x03log\x18\x03 \x01(\tR\x03log\x12\x1a\n" +
	"\bpairings\x18\x04 \x03(\x05R\bpairings\x12-\n" +
	"\x12gibsonized_players\x18\x05 \x03(\bR\x11gibsonizedPlayers*\x15\n" +
	"\n" +
	"PairMethod\x12\a\n" +
	"\x03COP\x10\x00*\x91\a\n" +
	"\tPairError\x12\v\n" +
	"\aSUCCESS\x10\x00\x12\x1d\n" +
	"\x19PLAYER_COUNT_INSUFFICIENT\x10\x01\x12\x1c\n" +
	"\x18ROUND_COUNT_INSUFFICIENT\x10\x02\x12\x1a\n" +
	"\x16PLAYER_COUNT_TOO_LARGE\x10\x03\x12\"\n" +
	"\x1ePLAYER_NAME_COUNT_INSUFFICIENT\x10\x04\x12\x15\n" +
	"\x11PLAYER_NAME_EMPTY\x10\x05\x12\x1d\n" +
	"\x19MORE_PAIRINGS_THAN_ROUNDS\x10\x06\x12\x15\n" +
	"\x11ALL_ROUNDS_PAIRED\x10\a\x12 \n" +
	"\x1cINVALID_ROUND_PAIRINGS_COUNT\x10\b\x12\x1e\n" +
	"\x1aPLAYER_INDEX_OUT_OF_BOUNDS\x10\t\x12\x13\n" +
	"\x0fUNPAIRED_PLAYER\x10\n" +
	"\x12\x13\n" +
	"\x0fINVALID_PAIRING\x10\v\x12\x1c\n" +
	"\x18MORE_RESULTS_THAN_ROUNDS\x10\f\x12\x1e\n" +
	"\x1aMORE_RESULTS_THAN_PAIRINGS\x10\r\x12\x1f\n" +
	"\x1bINVALID_ROUND_RESULTS_COUNT\x10\x0e\x12\x1e\n" +
	"\x1aINVALID_PLAYER_CLASS_COUNT\x10\x0f\x12\x18\n" +
	"\x14INVALID_PLAYER_CLASS\x10\x10\x12\x17\n" +
	"\x13INVALID_CLASS_PRIZE\x10\x11\x12\x19\n" +
	"\x15INVALID_GIBSON_SPREAD\x10\x12\x12\"\n" +
	"\x1eINVALID_CONTROL_LOSS_THRESHOLD\x10\x13\x12!\n" +
	"\x1dINVALID_HOPEFULNESS_THRESHOLD\x10\x14\x12\x19\n" +
	"\x15INVALID_DIVISION_SIMS\x10\x15\x12\x1d\n" +
	"\x19INVALID_CONTROL_LOSS_SIMS\x10\x16\x12)\n" +
	"%INVALID_CONTROL_LOSS_ACTIVATION_ROUND\x10\x17\x12\x18\n" +
	"\x14INVALID_PLACE_PRIZES\x10\x18\x12\x1a\n" +
	"\x16INVALID_REMOVED_PLAYER\x10\x19\x12\x1e\n" +
	"\x1aINVALID_VALID_PLAYER_COUNT\x10\x1a\x12\x17\n" +
	"\x13MIN_WEIGHT_MATCHING\x10\x1b\x12\x1b\n" +
	"\x17INVALID_PAIRINGS_LENGTH\x10\x1c\x12\x13\n" +
	"\x0fOVERCONSTRAINED\x10\x1d\x12\x1a\n" +
	"\x16REQUEST_TO_JSON_FAILED\x10\x1e\x12\v\n" +
	"\aTIMEOUT\x10\x1fBq\n" +
	"\acom.ipcB\tPairProtoP\x01Z/github.com/woogles-io/liwords/rpc/api/proto/ipc\xa2\x02\x03IXX\xaa\x02\x03Ipc\xca\x02\x03Ipc\xe2\x02\x0fIpc\\GPBMetadata\xea\x02\x03Ipcb\x06proto3"

var (
	file_proto_ipc_pair_proto_rawDescOnce sync.Once
	file_proto_ipc_pair_proto_rawDescData []byte
)

func file_proto_ipc_pair_proto_rawDescGZIP() []byte {
	file_proto_ipc_pair_proto_rawDescOnce.Do(func() {
		file_proto_ipc_pair_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_ipc_pair_proto_rawDesc), len(file_proto_ipc_pair_proto_rawDesc)))
	})
	return file_proto_ipc_pair_proto_rawDescData
}

var file_proto_ipc_pair_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_proto_ipc_pair_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_proto_ipc_pair_proto_goTypes = []any{
	(PairMethod)(0),       // 0: ipc.PairMethod
	(PairError)(0),        // 1: ipc.PairError
	(*RoundPairings)(nil), // 2: ipc.RoundPairings
	(*RoundResults)(nil),  // 3: ipc.RoundResults
	(*PairRequest)(nil),   // 4: ipc.PairRequest
	(*PairResponse)(nil),  // 5: ipc.PairResponse
}
var file_proto_ipc_pair_proto_depIdxs = []int32{
	0, // 0: ipc.PairRequest.pair_method:type_name -> ipc.PairMethod
	2, // 1: ipc.PairRequest.division_pairings:type_name -> ipc.RoundPairings
	3, // 2: ipc.PairRequest.division_results:type_name -> ipc.RoundResults
	1, // 3: ipc.PairResponse.error_code:type_name -> ipc.PairError
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_proto_ipc_pair_proto_init() }
func file_proto_ipc_pair_proto_init() {
	if File_proto_ipc_pair_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_ipc_pair_proto_rawDesc), len(file_proto_ipc_pair_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_ipc_pair_proto_goTypes,
		DependencyIndexes: file_proto_ipc_pair_proto_depIdxs,
		EnumInfos:         file_proto_ipc_pair_proto_enumTypes,
		MessageInfos:      file_proto_ipc_pair_proto_msgTypes,
	}.Build()
	File_proto_ipc_pair_proto = out.File
	file_proto_ipc_pair_proto_goTypes = nil
	file_proto_ipc_pair_proto_depIdxs = nil
}
