// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/comments_service/comments_service.proto

package comments_serviceconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	comments_service "github.com/woogles-io/liwords/rpc/api/proto/comments_service"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// GameCommentServiceName is the fully-qualified name of the GameCommentService service.
	GameCommentServiceName = "comments_service.GameCommentService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// GameCommentServiceAddGameCommentProcedure is the fully-qualified name of the GameCommentService's
	// AddGameComment RPC.
	GameCommentServiceAddGameCommentProcedure = "/comments_service.GameCommentService/AddGameComment"
	// GameCommentServiceGetGameCommentsProcedure is the fully-qualified name of the
	// GameCommentService's GetGameComments RPC.
	GameCommentServiceGetGameCommentsProcedure = "/comments_service.GameCommentService/GetGameComments"
	// GameCommentServiceEditGameCommentProcedure is the fully-qualified name of the
	// GameCommentService's EditGameComment RPC.
	GameCommentServiceEditGameCommentProcedure = "/comments_service.GameCommentService/EditGameComment"
	// GameCommentServiceDeleteGameCommentProcedure is the fully-qualified name of the
	// GameCommentService's DeleteGameComment RPC.
	GameCommentServiceDeleteGameCommentProcedure = "/comments_service.GameCommentService/DeleteGameComment"
	// GameCommentServiceGetCommentsForAllGamesProcedure is the fully-qualified name of the
	// GameCommentService's GetCommentsForAllGames RPC.
	GameCommentServiceGetCommentsForAllGamesProcedure = "/comments_service.GameCommentService/GetCommentsForAllGames"
	// GameCommentServiceGetCollectionCommentsProcedure is the fully-qualified name of the
	// GameCommentService's GetCollectionComments RPC.
	GameCommentServiceGetCollectionCommentsProcedure = "/comments_service.GameCommentService/GetCollectionComments"
)

// GameCommentServiceClient is a client for the comments_service.GameCommentService service.
type GameCommentServiceClient interface {
	AddGameComment(context.Context, *connect.Request[comments_service.AddCommentRequest]) (*connect.Response[comments_service.AddCommentResponse], error)
	GetGameComments(context.Context, *connect.Request[comments_service.GetCommentsRequest]) (*connect.Response[comments_service.GetCommentsResponse], error)
	EditGameComment(context.Context, *connect.Request[comments_service.EditCommentRequest]) (*connect.Response[comments_service.EditCommentResponse], error)
	DeleteGameComment(context.Context, *connect.Request[comments_service.DeleteCommentRequest]) (*connect.Response[comments_service.DeleteCommentResponse], error)
	GetCommentsForAllGames(context.Context, *connect.Request[comments_service.GetCommentsAllGamesRequest]) (*connect.Response[comments_service.GetCommentsResponse], error)
	GetCollectionComments(context.Context, *connect.Request[comments_service.GetCollectionCommentsRequest]) (*connect.Response[comments_service.GetCommentsResponse], error)
}

// NewGameCommentServiceClient constructs a client for the comments_service.GameCommentService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewGameCommentServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) GameCommentServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	gameCommentServiceMethods := comments_service.File_proto_comments_service_comments_service_proto.Services().ByName("GameCommentService").Methods()
	return &gameCommentServiceClient{
		addGameComment: connect.NewClient[comments_service.AddCommentRequest, comments_service.AddCommentResponse](
			httpClient,
			baseURL+GameCommentServiceAddGameCommentProcedure,
			connect.WithSchema(gameCommentServiceMethods.ByName("AddGameComment")),
			connect.WithClientOptions(opts...),
		),
		getGameComments: connect.NewClient[comments_service.GetCommentsRequest, comments_service.GetCommentsResponse](
			httpClient,
			baseURL+GameCommentServiceGetGameCommentsProcedure,
			connect.WithSchema(gameCommentServiceMethods.ByName("GetGameComments")),
			connect.WithClientOptions(opts...),
		),
		editGameComment: connect.NewClient[comments_service.EditCommentRequest, comments_service.EditCommentResponse](
			httpClient,
			baseURL+GameCommentServiceEditGameCommentProcedure,
			connect.WithSchema(gameCommentServiceMethods.ByName("EditGameComment")),
			connect.WithClientOptions(opts...),
		),
		deleteGameComment: connect.NewClient[comments_service.DeleteCommentRequest, comments_service.DeleteCommentResponse](
			httpClient,
			baseURL+GameCommentServiceDeleteGameCommentProcedure,
			connect.WithSchema(gameCommentServiceMethods.ByName("DeleteGameComment")),
			connect.WithClientOptions(opts...),
		),
		getCommentsForAllGames: connect.NewClient[comments_service.GetCommentsAllGamesRequest, comments_service.GetCommentsResponse](
			httpClient,
			baseURL+GameCommentServiceGetCommentsForAllGamesProcedure,
			connect.WithSchema(gameCommentServiceMethods.ByName("GetCommentsForAllGames")),
			connect.WithClientOptions(opts...),
		),
		getCollectionComments: connect.NewClient[comments_service.GetCollectionCommentsRequest, comments_service.GetCommentsResponse](
			httpClient,
			baseURL+GameCommentServiceGetCollectionCommentsProcedure,
			connect.WithSchema(gameCommentServiceMethods.ByName("GetCollectionComments")),
			connect.WithClientOptions(opts...),
		),
	}
}

// gameCommentServiceClient implements GameCommentServiceClient.
type gameCommentServiceClient struct {
	addGameComment         *connect.Client[comments_service.AddCommentRequest, comments_service.AddCommentResponse]
	getGameComments        *connect.Client[comments_service.GetCommentsRequest, comments_service.GetCommentsResponse]
	editGameComment        *connect.Client[comments_service.EditCommentRequest, comments_service.EditCommentResponse]
	deleteGameComment      *connect.Client[comments_service.DeleteCommentRequest, comments_service.DeleteCommentResponse]
	getCommentsForAllGames *connect.Client[comments_service.GetCommentsAllGamesRequest, comments_service.GetCommentsResponse]
	getCollectionComments  *connect.Client[comments_service.GetCollectionCommentsRequest, comments_service.GetCommentsResponse]
}

// AddGameComment calls comments_service.GameCommentService.AddGameComment.
func (c *gameCommentServiceClient) AddGameComment(ctx context.Context, req *connect.Request[comments_service.AddCommentRequest]) (*connect.Response[comments_service.AddCommentResponse], error) {
	return c.addGameComment.CallUnary(ctx, req)
}

// GetGameComments calls comments_service.GameCommentService.GetGameComments.
func (c *gameCommentServiceClient) GetGameComments(ctx context.Context, req *connect.Request[comments_service.GetCommentsRequest]) (*connect.Response[comments_service.GetCommentsResponse], error) {
	return c.getGameComments.CallUnary(ctx, req)
}

// EditGameComment calls comments_service.GameCommentService.EditGameComment.
func (c *gameCommentServiceClient) EditGameComment(ctx context.Context, req *connect.Request[comments_service.EditCommentRequest]) (*connect.Response[comments_service.EditCommentResponse], error) {
	return c.editGameComment.CallUnary(ctx, req)
}

// DeleteGameComment calls comments_service.GameCommentService.DeleteGameComment.
func (c *gameCommentServiceClient) DeleteGameComment(ctx context.Context, req *connect.Request[comments_service.DeleteCommentRequest]) (*connect.Response[comments_service.DeleteCommentResponse], error) {
	return c.deleteGameComment.CallUnary(ctx, req)
}

// GetCommentsForAllGames calls comments_service.GameCommentService.GetCommentsForAllGames.
func (c *gameCommentServiceClient) GetCommentsForAllGames(ctx context.Context, req *connect.Request[comments_service.GetCommentsAllGamesRequest]) (*connect.Response[comments_service.GetCommentsResponse], error) {
	return c.getCommentsForAllGames.CallUnary(ctx, req)
}

// GetCollectionComments calls comments_service.GameCommentService.GetCollectionComments.
func (c *gameCommentServiceClient) GetCollectionComments(ctx context.Context, req *connect.Request[comments_service.GetCollectionCommentsRequest]) (*connect.Response[comments_service.GetCommentsResponse], error) {
	return c.getCollectionComments.CallUnary(ctx, req)
}

// GameCommentServiceHandler is an implementation of the comments_service.GameCommentService
// service.
type GameCommentServiceHandler interface {
	AddGameComment(context.Context, *connect.Request[comments_service.AddCommentRequest]) (*connect.Response[comments_service.AddCommentResponse], error)
	GetGameComments(context.Context, *connect.Request[comments_service.GetCommentsRequest]) (*connect.Response[comments_service.GetCommentsResponse], error)
	EditGameComment(context.Context, *connect.Request[comments_service.EditCommentRequest]) (*connect.Response[comments_service.EditCommentResponse], error)
	DeleteGameComment(context.Context, *connect.Request[comments_service.DeleteCommentRequest]) (*connect.Response[comments_service.DeleteCommentResponse], error)
	GetCommentsForAllGames(context.Context, *connect.Request[comments_service.GetCommentsAllGamesRequest]) (*connect.Response[comments_service.GetCommentsResponse], error)
	GetCollectionComments(context.Context, *connect.Request[comments_service.GetCollectionCommentsRequest]) (*connect.Response[comments_service.GetCommentsResponse], error)
}

// NewGameCommentServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewGameCommentServiceHandler(svc GameCommentServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	gameCommentServiceMethods := comments_service.File_proto_comments_service_comments_service_proto.Services().ByName("GameCommentService").Methods()
	gameCommentServiceAddGameCommentHandler := connect.NewUnaryHandler(
		GameCommentServiceAddGameCommentProcedure,
		svc.AddGameComment,
		connect.WithSchema(gameCommentServiceMethods.ByName("AddGameComment")),
		connect.WithHandlerOptions(opts...),
	)
	gameCommentServiceGetGameCommentsHandler := connect.NewUnaryHandler(
		GameCommentServiceGetGameCommentsProcedure,
		svc.GetGameComments,
		connect.WithSchema(gameCommentServiceMethods.ByName("GetGameComments")),
		connect.WithHandlerOptions(opts...),
	)
	gameCommentServiceEditGameCommentHandler := connect.NewUnaryHandler(
		GameCommentServiceEditGameCommentProcedure,
		svc.EditGameComment,
		connect.WithSchema(gameCommentServiceMethods.ByName("EditGameComment")),
		connect.WithHandlerOptions(opts...),
	)
	gameCommentServiceDeleteGameCommentHandler := connect.NewUnaryHandler(
		GameCommentServiceDeleteGameCommentProcedure,
		svc.DeleteGameComment,
		connect.WithSchema(gameCommentServiceMethods.ByName("DeleteGameComment")),
		connect.WithHandlerOptions(opts...),
	)
	gameCommentServiceGetCommentsForAllGamesHandler := connect.NewUnaryHandler(
		GameCommentServiceGetCommentsForAllGamesProcedure,
		svc.GetCommentsForAllGames,
		connect.WithSchema(gameCommentServiceMethods.ByName("GetCommentsForAllGames")),
		connect.WithHandlerOptions(opts...),
	)
	gameCommentServiceGetCollectionCommentsHandler := connect.NewUnaryHandler(
		GameCommentServiceGetCollectionCommentsProcedure,
		svc.GetCollectionComments,
		connect.WithSchema(gameCommentServiceMethods.ByName("GetCollectionComments")),
		connect.WithHandlerOptions(opts...),
	)
	return "/comments_service.GameCommentService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case GameCommentServiceAddGameCommentProcedure:
			gameCommentServiceAddGameCommentHandler.ServeHTTP(w, r)
		case GameCommentServiceGetGameCommentsProcedure:
			gameCommentServiceGetGameCommentsHandler.ServeHTTP(w, r)
		case GameCommentServiceEditGameCommentProcedure:
			gameCommentServiceEditGameCommentHandler.ServeHTTP(w, r)
		case GameCommentServiceDeleteGameCommentProcedure:
			gameCommentServiceDeleteGameCommentHandler.ServeHTTP(w, r)
		case GameCommentServiceGetCommentsForAllGamesProcedure:
			gameCommentServiceGetCommentsForAllGamesHandler.ServeHTTP(w, r)
		case GameCommentServiceGetCollectionCommentsProcedure:
			gameCommentServiceGetCollectionCommentsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedGameCommentServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedGameCommentServiceHandler struct{}

func (UnimplementedGameCommentServiceHandler) AddGameComment(context.Context, *connect.Request[comments_service.AddCommentRequest]) (*connect.Response[comments_service.AddCommentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("comments_service.GameCommentService.AddGameComment is not implemented"))
}

func (UnimplementedGameCommentServiceHandler) GetGameComments(context.Context, *connect.Request[comments_service.GetCommentsRequest]) (*connect.Response[comments_service.GetCommentsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("comments_service.GameCommentService.GetGameComments is not implemented"))
}

func (UnimplementedGameCommentServiceHandler) EditGameComment(context.Context, *connect.Request[comments_service.EditCommentRequest]) (*connect.Response[comments_service.EditCommentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("comments_service.GameCommentService.EditGameComment is not implemented"))
}

func (UnimplementedGameCommentServiceHandler) DeleteGameComment(context.Context, *connect.Request[comments_service.DeleteCommentRequest]) (*connect.Response[comments_service.DeleteCommentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("comments_service.GameCommentService.DeleteGameComment is not implemented"))
}

func (UnimplementedGameCommentServiceHandler) GetCommentsForAllGames(context.Context, *connect.Request[comments_service.GetCommentsAllGamesRequest]) (*connect.Response[comments_service.GetCommentsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("comments_service.GameCommentService.GetCommentsForAllGames is not implemented"))
}

func (UnimplementedGameCommentServiceHandler) GetCollectionComments(context.Context, *connect.Request[comments_service.GetCollectionCommentsRequest]) (*connect.Response[comments_service.GetCommentsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("comments_service.GameCommentService.GetCollectionComments is not implemented"))
}
