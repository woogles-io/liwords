// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        (unknown)
// source: proto/tournament_service/tournament_service.proto

package tournament_service

import (
	ipc "github.com/woogles-io/liwords/rpc/api/proto/ipc"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TType int32

const (
	// A Standard tournament
	TType_STANDARD TType = 0
	// A new "clubhouse"
	TType_CLUB TType = 1
	// A club session or child tournament.
	TType_CHILD TType = 2
	// A legacy tournament
	TType_LEGACY TType = 3
)

// Enum value maps for TType.
var (
	TType_name = map[int32]string{
		0: "STANDARD",
		1: "CLUB",
		2: "CHILD",
		3: "LEGACY",
	}
	TType_value = map[string]int32{
		"STANDARD": 0,
		"CLUB":     1,
		"CHILD":    2,
		"LEGACY":   3,
	}
)

func (x TType) Enum() *TType {
	p := new(TType)
	*p = x
	return p
}

func (x TType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_tournament_service_tournament_service_proto_enumTypes[0].Descriptor()
}

func (TType) Type() protoreflect.EnumType {
	return &file_proto_tournament_service_tournament_service_proto_enumTypes[0]
}

func (x TType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TType.Descriptor instead.
func (TType) EnumDescriptor() ([]byte, []int) {
	return file_proto_tournament_service_tournament_service_proto_rawDescGZIP(), []int{0}
}

type StartRoundRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TournamentId  string                 `protobuf:"bytes,1,opt,name=tournament_id,json=tournamentId,proto3" json:"tournament_id,omitempty"`
	Round         int32                  `protobuf:"varint,2,opt,name=round,proto3" json:"round,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartRoundRequest) Reset() {
	*x = StartRoundRequest{}
	mi := &file_proto_tournament_service_tournament_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartRoundRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartRoundRequest) ProtoMessage() {}

func (x *StartRoundRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tournament_service_tournament_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartRoundRequest.ProtoReflect.Descriptor instead.
func (*StartRoundRequest) Descriptor() ([]byte, []int) {
	return file_proto_tournament_service_tournament_service_proto_rawDescGZIP(), []int{0}
}

func (x *StartRoundRequest) GetTournamentId() string {
	if x != nil {
		return x.TournamentId
	}
	return ""
}

func (x *StartRoundRequest) GetRound() int32 {
	if x != nil {
		return x.Round
	}
	return 0
}

type NewTournamentRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// If slug is not assigned, a random ID will be chosen.
	Slug               string                 `protobuf:"bytes,1,opt,name=slug,proto3" json:"slug,omitempty"`
	Name               string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description        string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	DirectorUsernames  []string               `protobuf:"bytes,4,rep,name=director_usernames,json=directorUsernames,proto3" json:"director_usernames,omitempty"`
	Type               TType                  `protobuf:"varint,5,opt,name=type,proto3,enum=tournament_service.TType" json:"type,omitempty"`
	ScheduledStartTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=scheduled_start_time,json=scheduledStartTime,proto3" json:"scheduled_start_time,omitempty"`
	ScheduledEndTime   *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=scheduled_end_time,json=scheduledEndTime,proto3" json:"scheduled_end_time,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *NewTournamentRequest) Reset() {
	*x = NewTournamentRequest{}
	mi := &file_proto_tournament_service_tournament_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewTournamentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewTournamentRequest) ProtoMessage() {}

func (x *NewTournamentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tournament_service_tournament_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewTournamentRequest.ProtoReflect.Descriptor instead.
func (*NewTournamentRequest) Descriptor() ([]byte, []int) {
	return file_proto_tournament_service_tournament_service_proto_rawDescGZIP(), []int{1}
}

func (x *NewTournamentRequest) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *NewTournamentRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NewTournamentRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *NewTournamentRequest) GetDirectorUsernames() []string {
	if x != nil {
		return x.DirectorUsernames
	}
	return nil
}

func (x *NewTournamentRequest) GetType() TType {
	if x != nil {
		return x.Type
	}
	return TType_STANDARD
}

func (x *NewTournamentRequest) GetScheduledStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ScheduledStartTime
	}
	return nil
}

func (x *NewTournamentRequest) GetScheduledEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ScheduledEndTime
	}
	return nil
}

type TournamentMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Id    string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name  string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// description is the markdown information for the tournament on the
	// right-hand side
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Slug        string `protobuf:"bytes,4,opt,name=slug,proto3" json:"slug,omitempty"`
	Type        TType  `protobuf:"varint,5,opt,name=type,proto3,enum=tournament_service.TType" json:"type,omitempty"`
	// a caption that shows up for the tournament in various places.
	Disclaimer string `protobuf:"bytes,6,opt,name=disclaimer,proto3" json:"disclaimer,omitempty"`
	// tile_style if set is default
	TileStyle string `protobuf:"bytes,7,opt,name=tile_style,json=tileStyle,proto3" json:"tile_style,omitempty"`
	// board_style if set is default
	BoardStyle string `protobuf:"bytes,8,opt,name=board_style,json=boardStyle,proto3" json:"board_style,omitempty"`
	// for clubs (not tournaments) we want to be able to hard-code settings
	// if the following parameter is set.
	DefaultClubSettings *ipc.GameRequest `protobuf:"bytes,9,opt,name=default_club_settings,json=defaultClubSettings,proto3" json:"default_club_settings,omitempty"`
	// When setting the game request, some clubs would like some parameters
	// to be more freeform (for example, lexicon option or time setting).
	// The following parameter is a list of field names that are freeform.
	// The acceptable values are:
	// lexicon, time, challenge_rule, rating_mode, variant_name
	FreeformClubSettingFields []string `protobuf:"bytes,10,rep,name=freeform_club_setting_fields,json=freeformClubSettingFields,proto3" json:"freeform_club_setting_fields,omitempty"`
	// a simple password for this tournament. Without it you can't see what is
	// happening. Likely front-end only implementation, although password
	// will be at least hashed. For clubs that want to be more private.
	Password string `protobuf:"bytes,11,opt,name=password,proto3" json:"password,omitempty"`
	// a url to a logo in the metadata card, disclaimer card and center square.
	Logo string `protobuf:"bytes,12,opt,name=logo,proto3" json:"logo,omitempty"`
	// an override color for the gradient in the tournament info
	Color           string `protobuf:"bytes,13,opt,name=color,proto3" json:"color,omitempty"`
	PrivateAnalysis bool   `protobuf:"varint,14,opt,name=private_analysis,json=privateAnalysis,proto3" json:"private_analysis,omitempty"`
	// irl_mode allows tournament mode to be used for pairings for an
	// over-the-board tournament, and will not enforce that usernames
	// are registered on the site.
	IrlMode            bool                   `protobuf:"varint,15,opt,name=irl_mode,json=irlMode,proto3" json:"irl_mode,omitempty"`
	ScheduledStartTime *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=scheduled_start_time,json=scheduledStartTime,proto3" json:"scheduled_start_time,omitempty"`
	ScheduledEndTime   *timestamppb.Timestamp `protobuf:"bytes,17,opt,name=scheduled_end_time,json=scheduledEndTime,proto3" json:"scheduled_end_time,omitempty"`
	CheckinsOpen       bool                   `protobuf:"varint,18,opt,name=checkins_open,json=checkinsOpen,proto3" json:"checkins_open,omitempty"`
	RegistrationOpen   bool                   `protobuf:"varint,19,opt,name=registration_open,json=registrationOpen,proto3" json:"registration_open,omitempty"`
	// monitored enables invigilation/monitoring mode requiring participants
	// to share camera and screenshot streams via vdo.ninja
	Monitored     bool `protobuf:"varint,20,opt,name=monitored,proto3" json:"monitored,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TournamentMetadata) Reset() {
	*x = TournamentMetadata{}
	mi := &file_proto_tournament_service_tournament_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TournamentMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TournamentMetadata) ProtoMessage() {}

func (x *TournamentMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tournament_service_tournament_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TournamentMetadata.ProtoReflect.Descriptor instead.
func (*TournamentMetadata) Descriptor() ([]byte, []int) {
	return file_proto_tournament_service_tournament_service_proto_rawDescGZIP(), []int{2}
}

func (x *TournamentMetadata) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TournamentMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TournamentMetadata) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TournamentMetadata) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *TournamentMetadata) GetType() TType {
	if x != nil {
		return x.Type
	}
	return TType_STANDARD
}

func (x *TournamentMetadata) GetDisclaimer() string {
	if x != nil {
		return x.Disclaimer
	}
	return ""
}

func (x *TournamentMetadata) GetTileStyle() string {
	if x != nil {
		return x.TileStyle
	}
	return ""
}

func (x *TournamentMetadata) GetBoardStyle() string {
	if x != nil {
		return x.BoardStyle
	}
	return ""
}

func (x *TournamentMetadata) GetDefaultClubSettings() *ipc.GameRequest {
	if x != nil {
		return x.DefaultClubSettings
	}
	return nil
}

func (x *TournamentMetadata) GetFreeformClubSettingFields() []string {
	if x != nil {
		return x.FreeformClubSettingFields
	}
	return nil
}

func (x *TournamentMetadata) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *TournamentMetadata) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *TournamentMetadata) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *TournamentMetadata) GetPrivateAnalysis() bool {
	if x != nil {
		return x.PrivateAnalysis
	}
	return false
}

func (x *TournamentMetadata) GetIrlMode() bool {
	if x != nil {
		return x.IrlMode
	}
	return false
}

func (x *TournamentMetadata) GetScheduledStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ScheduledStartTime
	}
	return nil
}

func (x *TournamentMetadata) GetScheduledEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ScheduledEndTime
	}
	return nil
}

func (x *TournamentMetadata) GetCheckinsOpen() bool {
	if x != nil {
		return x.CheckinsOpen
	}
	return false
}

func (x *TournamentMetadata) GetRegistrationOpen() bool {
	if x != nil {
		return x.RegistrationOpen
	}
	return false
}

func (x *TournamentMetadata) GetMonitored() bool {
	if x != nil {
		return x.Monitored
	}
	return false
}

type SetTournamentMetadataRequest struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	Metadata *TournamentMetadata    `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// set_only_specified sets only the specified fields,
	// and not the entire metadata.
	// non-zero-value fields will be treated as "specified"
	SetOnlySpecified bool `protobuf:"varint,2,opt,name=set_only_specified,json=setOnlySpecified,proto3" json:"set_only_specified,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *SetTournamentMetadataRequest) Reset() {
	*x = SetTournamentMetadataRequest{}
	mi := &file_proto_tournament_service_tournament_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetTournamentMetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTournamentMetadataRequest) ProtoMessage() {}

func (x *SetTournamentMetadataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tournament_service_tournament_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTournamentMetadataRequest.ProtoReflect.Descriptor instead.
func (*SetTournamentMetadataRequest) Descriptor() ([]byte, []int) {
	return file_proto_tournament_service_tournament_service_proto_rawDescGZIP(), []int{3}
}

func (x *SetTournamentMetadataRequest) GetMetadata() *TournamentMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *SetTournamentMetadataRequest) GetSetOnlySpecified() bool {
	if x != nil {
		return x.SetOnlySpecified
	}
	return false
}

type SingleRoundControlsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Division      string                 `protobuf:"bytes,2,opt,name=division,proto3" json:"division,omitempty"`
	RoundControls *ipc.RoundControl      `protobuf:"bytes,3,opt,name=round_controls,json=roundControls,proto3" json:"round_controls,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SingleRoundControlsRequest) Reset() {
	*x = SingleRoundControlsRequest{}
	mi := &file_proto_tournament_service_tournament_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SingleRoundControlsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleRoundControlsRequest) ProtoMessage() {}

func (x *SingleRoundControlsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tournament_service_tournament_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleRoundControlsRequest.ProtoReflect.Descriptor instead.
func (*SingleRoundControlsRequest) Descriptor() ([]byte, []int) {
	return file_proto_tournament_service_tournament_service_proto_rawDescGZIP(), []int{4}
}

func (x *SingleRoundControlsRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SingleRoundControlsRequest) GetDivision() string {
	if x != nil {
		return x.Division
	}
	return ""
}

func (x *SingleRoundControlsRequest) GetRoundControls() *ipc.RoundControl {
	if x != nil {
		return x.RoundControls
	}
	return nil
}

type PairRoundRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Division       string                 `protobuf:"bytes,2,opt,name=division,proto3" json:"division,omitempty"`
	Round          int32                  `protobuf:"varint,3,opt,name=round,proto3" json:"round,omitempty"`
	PreserveByes   bool                   `protobuf:"varint,4,opt,name=preserve_byes,json=preserveByes,proto3" json:"preserve_byes,omitempty"`
	DeletePairings bool                   `protobuf:"varint,5,opt,name=delete_pairings,json=deletePairings,proto3" json:"delete_pairings,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *PairRoundRequest) Reset() {
	*x = PairRoundRequest{}
	mi := &file_proto_tournament_service_tournament_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PairRoundRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PairRoundRequest) ProtoMessage() {}

func (x *PairRoundRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tournament_service_tournament_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PairRoundRequest.ProtoReflect.Descriptor instead.
func (*PairRoundRequest) Descriptor() ([]byte, []int) {
	return file_proto_tournament_service_tournament_service_proto_rawDescGZIP(), []int{5}
}

func (x *PairRoundRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PairRoundRequest) GetDivision() string {
	if x != nil {
		return x.Division
	}
	return ""
}

func (x *PairRoundRequest) GetRound() int32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *PairRoundRequest) GetPreserveByes() bool {
	if x != nil {
		return x.PreserveByes
	}
	return false
}

func (x *PairRoundRequest) GetDeletePairings() bool {
	if x != nil {
		return x.DeletePairings
	}
	return false
}

type TournamentDivisionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Division      string                 `protobuf:"bytes,2,opt,name=division,proto3" json:"division,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TournamentDivisionRequest) Reset() {
	*x = TournamentDivisionRequest{}
	mi := &file_proto_tournament_service_tournament_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TournamentDivisionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TournamentDivisionRequest) ProtoMessage() {}

func (x *TournamentDivisionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tournament_service_tournament_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TournamentDivisionRequest.ProtoReflect.Descriptor instead.
func (*TournamentDivisionRequest) Descriptor() ([]byte, []int) {
	return file_proto_tournament_service_tournament_service_proto_rawDescGZIP(), []int{6}
}

func (x *TournamentDivisionRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TournamentDivisionRequest) GetDivision() string {
	if x != nil {
		return x.Division
	}
	return ""
}

type TournamentPairingRequest struct {
	state       protoimpl.MessageState `protogen:"open.v1"`
	PlayerOneId string                 `protobuf:"bytes,1,opt,name=player_one_id,json=playerOneId,proto3" json:"player_one_id,omitempty"`
	PlayerTwoId string                 `protobuf:"bytes,2,opt,name=player_two_id,json=playerTwoId,proto3" json:"player_two_id,omitempty"`
	Round       int32                  `protobuf:"varint,3,opt,name=round,proto3" json:"round,omitempty"`
	// If player_one_id and player_two_id are the same, we should specify what
	// we want the result to be (BYE, FORFEIT_LOSS, VOID)
	SelfPlayResult ipc.TournamentGameResult `protobuf:"varint,4,opt,name=self_play_result,json=selfPlayResult,proto3,enum=ipc.TournamentGameResult" json:"self_play_result,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *TournamentPairingRequest) Reset() {
	*x = TournamentPairingRequest{}
	mi := &file_proto_tournament_service_tournament_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TournamentPairingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TournamentPairingRequest) ProtoMessage() {}

func (x *TournamentPairingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tournament_service_tournament_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TournamentPairingRequest.ProtoReflect.Descriptor instead.
func (*TournamentPairingRequest) Descriptor() ([]byte, []int) {
	return file_proto_tournament_service_tournament_service_proto_rawDescGZIP(), []int{7}
}

func (x *TournamentPairingRequest) GetPlayerOneId() string {
	if x != nil {
		return x.PlayerOneId
	}
	return ""
}

func (x *TournamentPairingRequest) GetPlayerTwoId() string {
	if x != nil {
		return x.PlayerTwoId
	}
	return ""
}

func (x *TournamentPairingRequest) GetRound() int32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *TournamentPairingRequest) GetSelfPlayResult() ipc.TournamentGameResult {
	if x != nil {
		return x.SelfPlayResult
	}
	return ipc.TournamentGameResult(0)
}

type DivisionRenameRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Division      string                 `protobuf:"bytes,2,opt,name=division,proto3" json:"division,omitempty"`
	NewName       string                 `protobuf:"bytes,3,opt,name=new_name,json=newName,proto3" json:"new_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DivisionRenameRequest) Reset() {
	*x = DivisionRenameRequest{}
	mi := &file_proto_tournament_service_tournament_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DivisionRenameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DivisionRenameRequest) ProtoMessage() {}

func (x *DivisionRenameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tournament_service_tournament_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DivisionRenameRequest.ProtoReflect.Descriptor instead.
func (*DivisionRenameRequest) Descriptor() ([]byte, []int) {
	return file_proto_tournament_service_tournament_service_proto_rawDescGZIP(), []int{8}
}

func (x *DivisionRenameRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DivisionRenameRequest) GetDivision() string {
	if x != nil {
		return x.Division
	}
	return ""
}

func (x *DivisionRenameRequest) GetNewName() string {
	if x != nil {
		return x.NewName
	}
	return ""
}

type TournamentPairingsRequest struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Id            string                      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Division      string                      `protobuf:"bytes,2,opt,name=division,proto3" json:"division,omitempty"`
	Pairings      []*TournamentPairingRequest `protobuf:"bytes,3,rep,name=pairings,proto3" json:"pairings,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TournamentPairingsRequest) Reset() {
	*x = TournamentPairingsRequest{}
	mi := &file_proto_tournament_service_tournament_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TournamentPairingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TournamentPairingsRequest) ProtoMessage() {}

func (x *TournamentPairingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tournament_service_tournament_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TournamentPairingsRequest.ProtoReflect.Descriptor instead.
func (*TournamentPairingsRequest) Descriptor() ([]byte, []int) {
	return file_proto_tournament_service_tournament_service_proto_rawDescGZIP(), []int{9}
}

func (x *TournamentPairingsRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TournamentPairingsRequest) GetDivision() string {
	if x != nil {
		return x.Division
	}
	return ""
}

func (x *TournamentPairingsRequest) GetPairings() []*TournamentPairingRequest {
	if x != nil {
		return x.Pairings
	}
	return nil
}

// TournamentResultOverrideRequest is sent when a score needs to be edited
// or added by a director. Note that player one and player two need to be
// the players that went first and second, respectively; otherwise,
// we will not be able to accurately track firsts/seconds.
type TournamentResultOverrideRequest struct {
	state           protoimpl.MessageState   `protogen:"open.v1"`
	Id              string                   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Division        string                   `protobuf:"bytes,2,opt,name=division,proto3" json:"division,omitempty"`
	PlayerOneId     string                   `protobuf:"bytes,3,opt,name=player_one_id,json=playerOneId,proto3" json:"player_one_id,omitempty"`
	PlayerTwoId     string                   `protobuf:"bytes,4,opt,name=player_two_id,json=playerTwoId,proto3" json:"player_two_id,omitempty"`
	Round           int32                    `protobuf:"varint,5,opt,name=round,proto3" json:"round,omitempty"`
	PlayerOneScore  int32                    `protobuf:"varint,6,opt,name=player_one_score,json=playerOneScore,proto3" json:"player_one_score,omitempty"`
	PlayerTwoScore  int32                    `protobuf:"varint,7,opt,name=player_two_score,json=playerTwoScore,proto3" json:"player_two_score,omitempty"`
	PlayerOneResult ipc.TournamentGameResult `protobuf:"varint,8,opt,name=player_one_result,json=playerOneResult,proto3,enum=ipc.TournamentGameResult" json:"player_one_result,omitempty"`
	PlayerTwoResult ipc.TournamentGameResult `protobuf:"varint,9,opt,name=player_two_result,json=playerTwoResult,proto3,enum=ipc.TournamentGameResult" json:"player_two_result,omitempty"`
	GameEndReason   ipc.GameEndReason        `protobuf:"varint,10,opt,name=game_end_reason,json=gameEndReason,proto3,enum=ipc.GameEndReason" json:"game_end_reason,omitempty"`
	Amendment       bool                     `protobuf:"varint,11,opt,name=amendment,proto3" json:"amendment,omitempty"`
	GameIndex       int32                    `protobuf:"varint,12,opt,name=game_index,json=gameIndex,proto3" json:"game_index,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *TournamentResultOverrideRequest) Reset() {
	*x = TournamentResultOverrideRequest{}
	mi := &file_proto_tournament_service_tournament_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TournamentResultOverrideRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TournamentResultOverrideRequest) ProtoMessage() {}

func (x *TournamentResultOverrideRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tournament_service_tournament_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TournamentResultOverrideRequest.ProtoReflect.Descriptor instead.
func (*TournamentResultOverrideRequest) Descriptor() ([]byte, []int) {
	return file_proto_tournament_service_tournament_service_proto_rawDescGZIP(), []int{10}
}

func (x *TournamentResultOverrideRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TournamentResultOverrideRequest) GetDivision() string {
	if x != nil {
		return x.Division
	}
	return ""
}

func (x *TournamentResultOverrideRequest) GetPlayerOneId() string {
	if x != nil {
		return x.PlayerOneId
	}
	return ""
}

func (x *TournamentResultOverrideRequest) GetPlayerTwoId() string {
	if x != nil {
		return x.PlayerTwoId
	}
	return ""
}

func (x *TournamentResultOverrideRequest) GetRound() int32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *TournamentResultOverrideRequest) GetPlayerOneScore() int32 {
	if x != nil {
		return x.PlayerOneScore
	}
	return 0
}

func (x *TournamentResultOverrideRequest) GetPlayerTwoScore() int32 {
	if x != nil {
		return x.PlayerTwoScore
	}
	return 0
}

func (x *TournamentResultOverrideRequest) GetPlayerOneResult() ipc.TournamentGameResult {
	if x != nil {
		return x.PlayerOneResult
	}
	return ipc.TournamentGameResult(0)
}

func (x *TournamentResultOverrideRequest) GetPlayerTwoResult() ipc.TournamentGameResult {
	if x != nil {
		return x.PlayerTwoResult
	}
	return ipc.TournamentGameResult(0)
}

func (x *TournamentResultOverrideRequest) GetGameEndReason() ipc.GameEndReason {
	if x != nil {
		return x.GameEndReason
	}
	return ipc.GameEndReason(0)
}

func (x *TournamentResultOverrideRequest) GetAmendment() bool {
	if x != nil {
		return x.Amendment
	}
	return false
}

func (x *TournamentResultOverrideRequest) GetGameIndex() int32 {
	if x != nil {
		return x.GameIndex
	}
	return 0
}

type TournamentStartRoundCountdownRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Division       string                 `protobuf:"bytes,2,opt,name=division,proto3" json:"division,omitempty"`
	Round          int32                  `protobuf:"varint,3,opt,name=round,proto3" json:"round,omitempty"`
	StartAllRounds bool                   `protobuf:"varint,4,opt,name=start_all_rounds,json=startAllRounds,proto3" json:"start_all_rounds,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *TournamentStartRoundCountdownRequest) Reset() {
	*x = TournamentStartRoundCountdownRequest{}
	mi := &file_proto_tournament_service_tournament_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TournamentStartRoundCountdownRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TournamentStartRoundCountdownRequest) ProtoMessage() {}

func (x *TournamentStartRoundCountdownRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tournament_service_tournament_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TournamentStartRoundCountdownRequest.ProtoReflect.Descriptor instead.
func (*TournamentStartRoundCountdownRequest) Descriptor() ([]byte, []int) {
	return file_proto_tournament_service_tournament_service_proto_rawDescGZIP(), []int{11}
}

func (x *TournamentStartRoundCountdownRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TournamentStartRoundCountdownRequest) GetDivision() string {
	if x != nil {
		return x.Division
	}
	return ""
}

func (x *TournamentStartRoundCountdownRequest) GetRound() int32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *TournamentStartRoundCountdownRequest) GetStartAllRounds() bool {
	if x != nil {
		return x.StartAllRounds
	}
	return false
}

type TournamentResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TournamentResponse) Reset() {
	*x = TournamentResponse{}
	mi := &file_proto_tournament_service_tournament_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TournamentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TournamentResponse) ProtoMessage() {}

func (x *TournamentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tournament_service_tournament_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TournamentResponse.ProtoReflect.Descriptor instead.
func (*TournamentResponse) Descriptor() ([]byte, []int) {
	return file_proto_tournament_service_tournament_service_proto_rawDescGZIP(), []int{12}
}

type NewTournamentResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Slug          string                 `protobuf:"bytes,2,opt,name=slug,proto3" json:"slug,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NewTournamentResponse) Reset() {
	*x = NewTournamentResponse{}
	mi := &file_proto_tournament_service_tournament_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewTournamentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewTournamentResponse) ProtoMessage() {}

func (x *NewTournamentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tournament_service_tournament_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewTournamentResponse.ProtoReflect.Descriptor instead.
func (*NewTournamentResponse) Descriptor() ([]byte, []int) {
	return file_proto_tournament_service_tournament_service_proto_rawDescGZIP(), []int{13}
}

func (x *NewTournamentResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *NewTournamentResponse) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

type GetTournamentMetadataRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// User must provide the ID, or the slug (but not both)
	Id            string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Slug          string `protobuf:"bytes,2,opt,name=slug,proto3" json:"slug,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTournamentMetadataRequest) Reset() {
	*x = GetTournamentMetadataRequest{}
	mi := &file_proto_tournament_service_tournament_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTournamentMetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTournamentMetadataRequest) ProtoMessage() {}

func (x *GetTournamentMetadataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tournament_service_tournament_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTournamentMetadataRequest.ProtoReflect.Descriptor instead.
func (*GetTournamentMetadataRequest) Descriptor() ([]byte, []int) {
	return file_proto_tournament_service_tournament_service_proto_rawDescGZIP(), []int{14}
}

func (x *GetTournamentMetadataRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetTournamentMetadataRequest) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

type GetTournamentRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTournamentRequest) Reset() {
	*x = GetTournamentRequest{}
	mi := &file_proto_tournament_service_tournament_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTournamentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTournamentRequest) ProtoMessage() {}

func (x *GetTournamentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tournament_service_tournament_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTournamentRequest.ProtoReflect.Descriptor instead.
func (*GetTournamentRequest) Descriptor() ([]byte, []int) {
	return file_proto_tournament_service_tournament_service_proto_rawDescGZIP(), []int{15}
}

func (x *GetTournamentRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type FinishTournamentRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FinishTournamentRequest) Reset() {
	*x = FinishTournamentRequest{}
	mi := &file_proto_tournament_service_tournament_service_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FinishTournamentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinishTournamentRequest) ProtoMessage() {}

func (x *FinishTournamentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tournament_service_tournament_service_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinishTournamentRequest.ProtoReflect.Descriptor instead.
func (*FinishTournamentRequest) Descriptor() ([]byte, []int) {
	return file_proto_tournament_service_tournament_service_proto_rawDescGZIP(), []int{16}
}

func (x *FinishTournamentRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type UnfinishTournamentRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UnfinishTournamentRequest) Reset() {
	*x = UnfinishTournamentRequest{}
	mi := &file_proto_tournament_service_tournament_service_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnfinishTournamentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnfinishTournamentRequest) ProtoMessage() {}

func (x *UnfinishTournamentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tournament_service_tournament_service_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnfinishTournamentRequest.ProtoReflect.Descriptor instead.
func (*UnfinishTournamentRequest) Descriptor() ([]byte, []int) {
	return file_proto_tournament_service_tournament_service_proto_rawDescGZIP(), []int{17}
}

func (x *UnfinishTournamentRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type TournamentMetadataResponse struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	Metadata *TournamentMetadata    `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// directors are not part of the metadata. We decided to make those
	// individually addable/removable (See AddDirectors)
	Directors     []string `protobuf:"bytes,2,rep,name=directors,proto3" json:"directors,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TournamentMetadataResponse) Reset() {
	*x = TournamentMetadataResponse{}
	mi := &file_proto_tournament_service_tournament_service_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TournamentMetadataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TournamentMetadataResponse) ProtoMessage() {}

func (x *TournamentMetadataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tournament_service_tournament_service_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TournamentMetadataResponse.ProtoReflect.Descriptor instead.
func (*TournamentMetadataResponse) Descriptor() ([]byte, []int) {
	return file_proto_tournament_service_tournament_service_proto_rawDescGZIP(), []int{18}
}

func (x *TournamentMetadataResponse) GetMetadata() *TournamentMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *TournamentMetadataResponse) GetDirectors() []string {
	if x != nil {
		return x.Directors
	}
	return nil
}

type RecentGamesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// tournament id
	Id            string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	NumGames      int32  `protobuf:"varint,2,opt,name=num_games,json=numGames,proto3" json:"num_games,omitempty"`
	Offset        int32  `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RecentGamesRequest) Reset() {
	*x = RecentGamesRequest{}
	mi := &file_proto_tournament_service_tournament_service_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecentGamesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecentGamesRequest) ProtoMessage() {}

func (x *RecentGamesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tournament_service_tournament_service_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecentGamesRequest.ProtoReflect.Descriptor instead.
func (*RecentGamesRequest) Descriptor() ([]byte, []int) {
	return file_proto_tournament_service_tournament_service_proto_rawDescGZIP(), []int{19}
}

func (x *RecentGamesRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RecentGamesRequest) GetNumGames() int32 {
	if x != nil {
		return x.NumGames
	}
	return 0
}

func (x *RecentGamesRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type RecentGamesResponse struct {
	state         protoimpl.MessageState          `protogen:"open.v1"`
	Games         []*ipc.TournamentGameEndedEvent `protobuf:"bytes,1,rep,name=games,proto3" json:"games,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RecentGamesResponse) Reset() {
	*x = RecentGamesResponse{}
	mi := &file_proto_tournament_service_tournament_service_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecentGamesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecentGamesResponse) ProtoMessage() {}

func (x *RecentGamesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tournament_service_tournament_service_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecentGamesResponse.ProtoReflect.Descriptor instead.
func (*RecentGamesResponse) Descriptor() ([]byte, []int) {
	return file_proto_tournament_service_tournament_service_proto_rawDescGZIP(), []int{20}
}

func (x *RecentGamesResponse) GetGames() []*ipc.TournamentGameEndedEvent {
	if x != nil {
		return x.Games
	}
	return nil
}

type UnstartTournamentRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UnstartTournamentRequest) Reset() {
	*x = UnstartTournamentRequest{}
	mi := &file_proto_tournament_service_tournament_service_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnstartTournamentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnstartTournamentRequest) ProtoMessage() {}

func (x *UnstartTournamentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tournament_service_tournament_service_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnstartTournamentRequest.ProtoReflect.Descriptor instead.
func (*UnstartTournamentRequest) Descriptor() ([]byte, []int) {
	return file_proto_tournament_service_tournament_service_proto_rawDescGZIP(), []int{21}
}

func (x *UnstartTournamentRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type UncheckAllInRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UncheckAllInRequest) Reset() {
	*x = UncheckAllInRequest{}
	mi := &file_proto_tournament_service_tournament_service_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UncheckAllInRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UncheckAllInRequest) ProtoMessage() {}

func (x *UncheckAllInRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tournament_service_tournament_service_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UncheckAllInRequest.ProtoReflect.Descriptor instead.
func (*UncheckAllInRequest) Descriptor() ([]byte, []int) {
	return file_proto_tournament_service_tournament_service_proto_rawDescGZIP(), []int{22}
}

func (x *UncheckAllInRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type RemoveAllPlayersNotCheckedInRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveAllPlayersNotCheckedInRequest) Reset() {
	*x = RemoveAllPlayersNotCheckedInRequest{}
	mi := &file_proto_tournament_service_tournament_service_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveAllPlayersNotCheckedInRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveAllPlayersNotCheckedInRequest) ProtoMessage() {}

func (x *RemoveAllPlayersNotCheckedInRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tournament_service_tournament_service_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveAllPlayersNotCheckedInRequest.ProtoReflect.Descriptor instead.
func (*RemoveAllPlayersNotCheckedInRequest) Descriptor() ([]byte, []int) {
	return file_proto_tournament_service_tournament_service_proto_rawDescGZIP(), []int{23}
}

func (x *RemoveAllPlayersNotCheckedInRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CheckinRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Checkin       bool                   `protobuf:"varint,2,opt,name=checkin,proto3" json:"checkin,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CheckinRequest) Reset() {
	*x = CheckinRequest{}
	mi := &file_proto_tournament_service_tournament_service_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckinRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckinRequest) ProtoMessage() {}

func (x *CheckinRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tournament_service_tournament_service_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckinRequest.ProtoReflect.Descriptor instead.
func (*CheckinRequest) Descriptor() ([]byte, []int) {
	return file_proto_tournament_service_tournament_service_proto_rawDescGZIP(), []int{24}
}

func (x *CheckinRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CheckinRequest) GetCheckin() bool {
	if x != nil {
		return x.Checkin
	}
	return false
}

type RegisterRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Division      string                 `protobuf:"bytes,2,opt,name=division,proto3" json:"division,omitempty"`
	Register      bool                   `protobuf:"varint,3,opt,name=register,proto3" json:"register,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterRequest) Reset() {
	*x = RegisterRequest{}
	mi := &file_proto_tournament_service_tournament_service_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterRequest) ProtoMessage() {}

func (x *RegisterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tournament_service_tournament_service_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterRequest.ProtoReflect.Descriptor instead.
func (*RegisterRequest) Descriptor() ([]byte, []int) {
	return file_proto_tournament_service_tournament_service_proto_rawDescGZIP(), []int{25}
}

func (x *RegisterRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RegisterRequest) GetDivision() string {
	if x != nil {
		return x.Division
	}
	return ""
}

func (x *RegisterRequest) GetRegister() bool {
	if x != nil {
		return x.Register
	}
	return false
}

type OpenRegistrationRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OpenRegistrationRequest) Reset() {
	*x = OpenRegistrationRequest{}
	mi := &file_proto_tournament_service_tournament_service_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OpenRegistrationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenRegistrationRequest) ProtoMessage() {}

func (x *OpenRegistrationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tournament_service_tournament_service_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenRegistrationRequest.ProtoReflect.Descriptor instead.
func (*OpenRegistrationRequest) Descriptor() ([]byte, []int) {
	return file_proto_tournament_service_tournament_service_proto_rawDescGZIP(), []int{26}
}

func (x *OpenRegistrationRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CloseRegistrationRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CloseRegistrationRequest) Reset() {
	*x = CloseRegistrationRequest{}
	mi := &file_proto_tournament_service_tournament_service_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloseRegistrationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseRegistrationRequest) ProtoMessage() {}

func (x *CloseRegistrationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tournament_service_tournament_service_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseRegistrationRequest.ProtoReflect.Descriptor instead.
func (*CloseRegistrationRequest) Descriptor() ([]byte, []int) {
	return file_proto_tournament_service_tournament_service_proto_rawDescGZIP(), []int{27}
}

func (x *CloseRegistrationRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type OpenCheckinsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OpenCheckinsRequest) Reset() {
	*x = OpenCheckinsRequest{}
	mi := &file_proto_tournament_service_tournament_service_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OpenCheckinsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenCheckinsRequest) ProtoMessage() {}

func (x *OpenCheckinsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tournament_service_tournament_service_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenCheckinsRequest.ProtoReflect.Descriptor instead.
func (*OpenCheckinsRequest) Descriptor() ([]byte, []int) {
	return file_proto_tournament_service_tournament_service_proto_rawDescGZIP(), []int{28}
}

func (x *OpenCheckinsRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CloseCheckinsRequest struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Id                 string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DeleteNonCheckedIn bool                   `protobuf:"varint,2,opt,name=delete_non_checked_in,json=deleteNonCheckedIn,proto3" json:"delete_non_checked_in,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CloseCheckinsRequest) Reset() {
	*x = CloseCheckinsRequest{}
	mi := &file_proto_tournament_service_tournament_service_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloseCheckinsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseCheckinsRequest) ProtoMessage() {}

func (x *CloseCheckinsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tournament_service_tournament_service_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseCheckinsRequest.ProtoReflect.Descriptor instead.
func (*CloseCheckinsRequest) Descriptor() ([]byte, []int) {
	return file_proto_tournament_service_tournament_service_proto_rawDescGZIP(), []int{29}
}

func (x *CloseCheckinsRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CloseCheckinsRequest) GetDeleteNonCheckedIn() bool {
	if x != nil {
		return x.DeleteNonCheckedIn
	}
	return false
}

type TournamentScorecardRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ShowOpponents bool                   `protobuf:"varint,2,opt,name=show_opponents,json=showOpponents,proto3" json:"show_opponents,omitempty"`
	ShowSeeds     bool                   `protobuf:"varint,3,opt,name=show_seeds,json=showSeeds,proto3" json:"show_seeds,omitempty"`
	ShowQrCode    bool                   `protobuf:"varint,4,opt,name=show_qr_code,json=showQrCode,proto3" json:"show_qr_code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TournamentScorecardRequest) Reset() {
	*x = TournamentScorecardRequest{}
	mi := &file_proto_tournament_service_tournament_service_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TournamentScorecardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TournamentScorecardRequest) ProtoMessage() {}

func (x *TournamentScorecardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tournament_service_tournament_service_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TournamentScorecardRequest.ProtoReflect.Descriptor instead.
func (*TournamentScorecardRequest) Descriptor() ([]byte, []int) {
	return file_proto_tournament_service_tournament_service_proto_rawDescGZIP(), []int{30}
}

func (x *TournamentScorecardRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TournamentScorecardRequest) GetShowOpponents() bool {
	if x != nil {
		return x.ShowOpponents
	}
	return false
}

func (x *TournamentScorecardRequest) GetShowSeeds() bool {
	if x != nil {
		return x.ShowSeeds
	}
	return false
}

func (x *TournamentScorecardRequest) GetShowQrCode() bool {
	if x != nil {
		return x.ShowQrCode
	}
	return false
}

type TournamentScorecardResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PdfZip        []byte                 `protobuf:"bytes,1,opt,name=pdf_zip,json=pdfZip,proto3" json:"pdf_zip,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TournamentScorecardResponse) Reset() {
	*x = TournamentScorecardResponse{}
	mi := &file_proto_tournament_service_tournament_service_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TournamentScorecardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TournamentScorecardResponse) ProtoMessage() {}

func (x *TournamentScorecardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tournament_service_tournament_service_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TournamentScorecardResponse.ProtoReflect.Descriptor instead.
func (*TournamentScorecardResponse) Descriptor() ([]byte, []int) {
	return file_proto_tournament_service_tournament_service_proto_rawDescGZIP(), []int{31}
}

func (x *TournamentScorecardResponse) GetPdfZip() []byte {
	if x != nil {
		return x.PdfZip
	}
	return nil
}

type GetRecentAndUpcomingTournamentsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRecentAndUpcomingTournamentsRequest) Reset() {
	*x = GetRecentAndUpcomingTournamentsRequest{}
	mi := &file_proto_tournament_service_tournament_service_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRecentAndUpcomingTournamentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecentAndUpcomingTournamentsRequest) ProtoMessage() {}

func (x *GetRecentAndUpcomingTournamentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tournament_service_tournament_service_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecentAndUpcomingTournamentsRequest.ProtoReflect.Descriptor instead.
func (*GetRecentAndUpcomingTournamentsRequest) Descriptor() ([]byte, []int) {
	return file_proto_tournament_service_tournament_service_proto_rawDescGZIP(), []int{32}
}

type GetRecentAndUpcomingTournamentsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tournaments   []*TournamentMetadata  `protobuf:"bytes,1,rep,name=tournaments,proto3" json:"tournaments,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRecentAndUpcomingTournamentsResponse) Reset() {
	*x = GetRecentAndUpcomingTournamentsResponse{}
	mi := &file_proto_tournament_service_tournament_service_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRecentAndUpcomingTournamentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecentAndUpcomingTournamentsResponse) ProtoMessage() {}

func (x *GetRecentAndUpcomingTournamentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tournament_service_tournament_service_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecentAndUpcomingTournamentsResponse.ProtoReflect.Descriptor instead.
func (*GetRecentAndUpcomingTournamentsResponse) Descriptor() ([]byte, []int) {
	return file_proto_tournament_service_tournament_service_proto_rawDescGZIP(), []int{33}
}

func (x *GetRecentAndUpcomingTournamentsResponse) GetTournaments() []*TournamentMetadata {
	if x != nil {
		return x.Tournaments
	}
	return nil
}

type RunCopRequest struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	Id                         string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Division                   string                 `protobuf:"bytes,2,opt,name=division,proto3" json:"division,omitempty"`
	Round                      int32                  `protobuf:"varint,3,opt,name=round,proto3" json:"round,omitempty"`
	PlayerClasses              []int32                `protobuf:"varint,4,rep,packed,name=player_classes,json=playerClasses,proto3" json:"player_classes,omitempty"`
	ClassPrizes                []int32                `protobuf:"varint,5,rep,packed,name=class_prizes,json=classPrizes,proto3" json:"class_prizes,omitempty"`
	ControlLossThreshold       float64                `protobuf:"fixed64,6,opt,name=control_loss_threshold,json=controlLossThreshold,proto3" json:"control_loss_threshold,omitempty"`
	HopefulnessThreshold       float64                `protobuf:"fixed64,7,opt,name=hopefulness_threshold,json=hopefulnessThreshold,proto3" json:"hopefulness_threshold,omitempty"`
	PlacePrizes                int32                  `protobuf:"varint,8,opt,name=place_prizes,json=placePrizes,proto3" json:"place_prizes,omitempty"`
	DivisionSims               int32                  `protobuf:"varint,9,opt,name=division_sims,json=divisionSims,proto3" json:"division_sims,omitempty"`
	ControlLossSims            int32                  `protobuf:"varint,10,opt,name=control_loss_sims,json=controlLossSims,proto3" json:"control_loss_sims,omitempty"`
	ControlLossActivationRound int32                  `protobuf:"varint,11,opt,name=control_loss_activation_round,json=controlLossActivationRound,proto3" json:"control_loss_activation_round,omitempty"`
	AllowRepeatByes            bool                   `protobuf:"varint,12,opt,name=allow_repeat_byes,json=allowRepeatByes,proto3" json:"allow_repeat_byes,omitempty"`
	GibsonSpread               int32                  `protobuf:"varint,13,opt,name=gibson_spread,json=gibsonSpread,proto3" json:"gibson_spread,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *RunCopRequest) Reset() {
	*x = RunCopRequest{}
	mi := &file_proto_tournament_service_tournament_service_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunCopRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunCopRequest) ProtoMessage() {}

func (x *RunCopRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tournament_service_tournament_service_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunCopRequest.ProtoReflect.Descriptor instead.
func (*RunCopRequest) Descriptor() ([]byte, []int) {
	return file_proto_tournament_service_tournament_service_proto_rawDescGZIP(), []int{34}
}

func (x *RunCopRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RunCopRequest) GetDivision() string {
	if x != nil {
		return x.Division
	}
	return ""
}

func (x *RunCopRequest) GetRound() int32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *RunCopRequest) GetPlayerClasses() []int32 {
	if x != nil {
		return x.PlayerClasses
	}
	return nil
}

func (x *RunCopRequest) GetClassPrizes() []int32 {
	if x != nil {
		return x.ClassPrizes
	}
	return nil
}

func (x *RunCopRequest) GetControlLossThreshold() float64 {
	if x != nil {
		return x.ControlLossThreshold
	}
	return 0
}

func (x *RunCopRequest) GetHopefulnessThreshold() float64 {
	if x != nil {
		return x.HopefulnessThreshold
	}
	return 0
}

func (x *RunCopRequest) GetPlacePrizes() int32 {
	if x != nil {
		return x.PlacePrizes
	}
	return 0
}

func (x *RunCopRequest) GetDivisionSims() int32 {
	if x != nil {
		return x.DivisionSims
	}
	return 0
}

func (x *RunCopRequest) GetControlLossSims() int32 {
	if x != nil {
		return x.ControlLossSims
	}
	return 0
}

func (x *RunCopRequest) GetControlLossActivationRound() int32 {
	if x != nil {
		return x.ControlLossActivationRound
	}
	return 0
}

func (x *RunCopRequest) GetAllowRepeatByes() bool {
	if x != nil {
		return x.AllowRepeatByes
	}
	return false
}

func (x *RunCopRequest) GetGibsonSpread() int32 {
	if x != nil {
		return x.GibsonSpread
	}
	return 0
}

type ExportTournamentRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Format        string                 `protobuf:"bytes,2,opt,name=format,proto3" json:"format,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExportTournamentRequest) Reset() {
	*x = ExportTournamentRequest{}
	mi := &file_proto_tournament_service_tournament_service_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExportTournamentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportTournamentRequest) ProtoMessage() {}

func (x *ExportTournamentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tournament_service_tournament_service_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportTournamentRequest.ProtoReflect.Descriptor instead.
func (*ExportTournamentRequest) Descriptor() ([]byte, []int) {
	return file_proto_tournament_service_tournament_service_proto_rawDescGZIP(), []int{35}
}

func (x *ExportTournamentRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ExportTournamentRequest) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

type ExportTournamentResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Exported      string                 `protobuf:"bytes,1,opt,name=exported,proto3" json:"exported,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExportTournamentResponse) Reset() {
	*x = ExportTournamentResponse{}
	mi := &file_proto_tournament_service_tournament_service_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExportTournamentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportTournamentResponse) ProtoMessage() {}

func (x *ExportTournamentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tournament_service_tournament_service_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportTournamentResponse.ProtoReflect.Descriptor instead.
func (*ExportTournamentResponse) Descriptor() ([]byte, []int) {
	return file_proto_tournament_service_tournament_service_proto_rawDescGZIP(), []int{36}
}

func (x *ExportTournamentResponse) GetExported() string {
	if x != nil {
		return x.Exported
	}
	return ""
}

type NewClubSessionRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// date is the date of the session
	// This is used as scheduled_start_time for the tournament now that
	// we store this data.
	Date          *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	ClubId        string                 `protobuf:"bytes,2,opt,name=club_id,json=clubId,proto3" json:"club_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NewClubSessionRequest) Reset() {
	*x = NewClubSessionRequest{}
	mi := &file_proto_tournament_service_tournament_service_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewClubSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewClubSessionRequest) ProtoMessage() {}

func (x *NewClubSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tournament_service_tournament_service_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewClubSessionRequest.ProtoReflect.Descriptor instead.
func (*NewClubSessionRequest) Descriptor() ([]byte, []int) {
	return file_proto_tournament_service_tournament_service_proto_rawDescGZIP(), []int{37}
}

func (x *NewClubSessionRequest) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *NewClubSessionRequest) GetClubId() string {
	if x != nil {
		return x.ClubId
	}
	return ""
}

type ClubSessionResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Note that club sessions are tournaments in our backend. We return
	// the created tournament ID here:
	TournamentId string `protobuf:"bytes,1,opt,name=tournament_id,json=tournamentId,proto3" json:"tournament_id,omitempty"`
	// slug will look like /club/{club_name}/{date}. It should be
	// case-insensitive.
	Slug          string `protobuf:"bytes,2,opt,name=slug,proto3" json:"slug,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClubSessionResponse) Reset() {
	*x = ClubSessionResponse{}
	mi := &file_proto_tournament_service_tournament_service_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClubSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClubSessionResponse) ProtoMessage() {}

func (x *ClubSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tournament_service_tournament_service_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClubSessionResponse.ProtoReflect.Descriptor instead.
func (*ClubSessionResponse) Descriptor() ([]byte, []int) {
	return file_proto_tournament_service_tournament_service_proto_rawDescGZIP(), []int{38}
}

func (x *ClubSessionResponse) GetTournamentId() string {
	if x != nil {
		return x.TournamentId
	}
	return ""
}

func (x *ClubSessionResponse) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

type RecentClubSessionsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// club_id
	Id            string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Count         int32  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Offset        int32  `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RecentClubSessionsRequest) Reset() {
	*x = RecentClubSessionsRequest{}
	mi := &file_proto_tournament_service_tournament_service_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecentClubSessionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecentClubSessionsRequest) ProtoMessage() {}

func (x *RecentClubSessionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tournament_service_tournament_service_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecentClubSessionsRequest.ProtoReflect.Descriptor instead.
func (*RecentClubSessionsRequest) Descriptor() ([]byte, []int) {
	return file_proto_tournament_service_tournament_service_proto_rawDescGZIP(), []int{39}
}

func (x *RecentClubSessionsRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RecentClubSessionsRequest) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *RecentClubSessionsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type ClubSessionsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sessions      []*ClubSessionResponse `protobuf:"bytes,1,rep,name=sessions,proto3" json:"sessions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClubSessionsResponse) Reset() {
	*x = ClubSessionsResponse{}
	mi := &file_proto_tournament_service_tournament_service_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClubSessionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClubSessionsResponse) ProtoMessage() {}

func (x *ClubSessionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tournament_service_tournament_service_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClubSessionsResponse.ProtoReflect.Descriptor instead.
func (*ClubSessionsResponse) Descriptor() ([]byte, []int) {
	return file_proto_tournament_service_tournament_service_proto_rawDescGZIP(), []int{40}
}

func (x *ClubSessionsResponse) GetSessions() []*ClubSessionResponse {
	if x != nil {
		return x.Sessions
	}
	return nil
}

type InitializeMonitoringKeysRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TournamentId  string                 `protobuf:"bytes,1,opt,name=tournament_id,json=tournamentId,proto3" json:"tournament_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InitializeMonitoringKeysRequest) Reset() {
	*x = InitializeMonitoringKeysRequest{}
	mi := &file_proto_tournament_service_tournament_service_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InitializeMonitoringKeysRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitializeMonitoringKeysRequest) ProtoMessage() {}

func (x *InitializeMonitoringKeysRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tournament_service_tournament_service_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitializeMonitoringKeysRequest.ProtoReflect.Descriptor instead.
func (*InitializeMonitoringKeysRequest) Descriptor() ([]byte, []int) {
	return file_proto_tournament_service_tournament_service_proto_rawDescGZIP(), []int{41}
}

func (x *InitializeMonitoringKeysRequest) GetTournamentId() string {
	if x != nil {
		return x.TournamentId
	}
	return ""
}

type RequestMonitoringStreamRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TournamentId  string                 `protobuf:"bytes,1,opt,name=tournament_id,json=tournamentId,proto3" json:"tournament_id,omitempty"`
	StreamType    string                 `protobuf:"bytes,2,opt,name=stream_type,json=streamType,proto3" json:"stream_type,omitempty"` // "camera" or "screenshot"
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RequestMonitoringStreamRequest) Reset() {
	*x = RequestMonitoringStreamRequest{}
	mi := &file_proto_tournament_service_tournament_service_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestMonitoringStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestMonitoringStreamRequest) ProtoMessage() {}

func (x *RequestMonitoringStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tournament_service_tournament_service_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestMonitoringStreamRequest.ProtoReflect.Descriptor instead.
func (*RequestMonitoringStreamRequest) Descriptor() ([]byte, []int) {
	return file_proto_tournament_service_tournament_service_proto_rawDescGZIP(), []int{42}
}

func (x *RequestMonitoringStreamRequest) GetTournamentId() string {
	if x != nil {
		return x.TournamentId
	}
	return ""
}

func (x *RequestMonitoringStreamRequest) GetStreamType() string {
	if x != nil {
		return x.StreamType
	}
	return ""
}

type ResetMonitoringStreamRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TournamentId  string                 `protobuf:"bytes,1,opt,name=tournament_id,json=tournamentId,proto3" json:"tournament_id,omitempty"`
	UserId        string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	StreamType    string                 `protobuf:"bytes,3,opt,name=stream_type,json=streamType,proto3" json:"stream_type,omitempty"` // "camera" or "screenshot"
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResetMonitoringStreamRequest) Reset() {
	*x = ResetMonitoringStreamRequest{}
	mi := &file_proto_tournament_service_tournament_service_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResetMonitoringStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetMonitoringStreamRequest) ProtoMessage() {}

func (x *ResetMonitoringStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tournament_service_tournament_service_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetMonitoringStreamRequest.ProtoReflect.Descriptor instead.
func (*ResetMonitoringStreamRequest) Descriptor() ([]byte, []int) {
	return file_proto_tournament_service_tournament_service_proto_rawDescGZIP(), []int{43}
}

func (x *ResetMonitoringStreamRequest) GetTournamentId() string {
	if x != nil {
		return x.TournamentId
	}
	return ""
}

func (x *ResetMonitoringStreamRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ResetMonitoringStreamRequest) GetStreamType() string {
	if x != nil {
		return x.StreamType
	}
	return ""
}

type GetTournamentMonitoringRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TournamentId  string                 `protobuf:"bytes,1,opt,name=tournament_id,json=tournamentId,proto3" json:"tournament_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTournamentMonitoringRequest) Reset() {
	*x = GetTournamentMonitoringRequest{}
	mi := &file_proto_tournament_service_tournament_service_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTournamentMonitoringRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTournamentMonitoringRequest) ProtoMessage() {}

func (x *GetTournamentMonitoringRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tournament_service_tournament_service_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTournamentMonitoringRequest.ProtoReflect.Descriptor instead.
func (*GetTournamentMonitoringRequest) Descriptor() ([]byte, []int) {
	return file_proto_tournament_service_tournament_service_proto_rawDescGZIP(), []int{44}
}

func (x *GetTournamentMonitoringRequest) GetTournamentId() string {
	if x != nil {
		return x.TournamentId
	}
	return ""
}

type GetTournamentMonitoringResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Participants  []*ipc.MonitoringData  `protobuf:"bytes,1,rep,name=participants,proto3" json:"participants,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTournamentMonitoringResponse) Reset() {
	*x = GetTournamentMonitoringResponse{}
	mi := &file_proto_tournament_service_tournament_service_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTournamentMonitoringResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTournamentMonitoringResponse) ProtoMessage() {}

func (x *GetTournamentMonitoringResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tournament_service_tournament_service_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTournamentMonitoringResponse.ProtoReflect.Descriptor instead.
func (*GetTournamentMonitoringResponse) Descriptor() ([]byte, []int) {
	return file_proto_tournament_service_tournament_service_proto_rawDescGZIP(), []int{45}
}

func (x *GetTournamentMonitoringResponse) GetParticipants() []*ipc.MonitoringData {
	if x != nil {
		return x.Participants
	}
	return nil
}

var File_proto_tournament_service_tournament_service_proto protoreflect.FileDescriptor

const file_proto_tournament_service_tournament_service_proto_rawDesc = "" +
	"\n" +
	"1proto/tournament_service/tournament_service.proto\x12\x12tournament_service\x1a\x18proto/ipc/omgwords.proto\x1a\x1aproto/ipc/tournament.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x14proto/ipc/pair.proto\"N\n" +
	"\x11StartRoundRequest\x12#\n" +
	"\rtournament_id\x18\x01 \x01(\tR\ftournamentId\x12\x14\n" +
	"\x05round\x18\x02 \x01(\x05R\x05round\"\xd6\x02\n" +
	"\x14NewTournamentRequest\x12\x12\n" +
	"\x04slug\x18\x01 \x01(\tR\x04slug\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x12-\n" +
	"\x12director_usernames\x18\x04 \x03(\tR\x11directorUsernames\x12-\n" +
	"\x04type\x18\x05 \x01(\x0e2\x19.tournament_service.TTypeR\x04type\x12L\n" +
	"\x14scheduled_start_time\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampR\x12scheduledStartTime\x12H\n" +
	"\x12scheduled_end_time\x18\a \x01(\v2\x1a.google.protobuf.TimestampR\x10scheduledEndTime\"\x98\x06\n" +
	"\x12TournamentMetadata\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x12\x12\n" +
	"\x04slug\x18\x04 \x01(\tR\x04slug\x12-\n" +
	"\x04type\x18\x05 \x01(\x0e2\x19.tournament_service.TTypeR\x04type\x12\x1e\n" +
	"\n" +
	"disclaimer\x18\x06 \x01(\tR\n" +
	"disclaimer\x12\x1d\n" +
	"\n" +
	"tile_style\x18\a \x01(\tR\ttileStyle\x12\x1f\n" +
	"\vboard_style\x18\b \x01(\tR\n" +
	"boardStyle\x12D\n" +
	"\x15default_club_settings\x18\t \x01(\v2\x10.ipc.GameRequestR\x13defaultClubSettings\x12?\n" +
	"\x1cfreeform_club_setting_fields\x18\n" +
	" \x03(\tR\x19freeformClubSettingFields\x12\x1a\n" +
	"\bpassword\x18\v \x01(\tR\bpassword\x12\x12\n" +
	"\x04logo\x18\f \x01(\tR\x04logo\x12\x14\n" +
	"\x05color\x18\r \x01(\tR\x05color\x12)\n" +
	"\x10private_analysis\x18\x0e \x01(\bR\x0fprivateAnalysis\x12\x19\n" +
	"\birl_mode\x18\x0f \x01(\bR\airlMode\x12L\n" +
	"\x14scheduled_start_time\x18\x10 \x01(\v2\x1a.google.protobuf.TimestampR\x12scheduledStartTime\x12H\n" +
	"\x12scheduled_end_time\x18\x11 \x01(\v2\x1a.google.protobuf.TimestampR\x10scheduledEndTime\x12#\n" +
	"\rcheckins_open\x18\x12 \x01(\bR\fcheckinsOpen\x12+\n" +
	"\x11registration_open\x18\x13 \x01(\bR\x10registrationOpen\x12\x1c\n" +
	"\tmonitored\x18\x14 \x01(\bR\tmonitored\"\x90\x01\n" +
	"\x1cSetTournamentMetadataRequest\x12B\n" +
	"\bmetadata\x18\x01 \x01(\v2&.tournament_service.TournamentMetadataR\bmetadata\x12,\n" +
	"\x12set_only_specified\x18\x02 \x01(\bR\x10setOnlySpecified\"\x82\x01\n" +
	"\x1aSingleRoundControlsRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1a\n" +
	"\bdivision\x18\x02 \x01(\tR\bdivision\x128\n" +
	"\x0eround_controls\x18\x03 \x01(\v2\x11.ipc.RoundControlR\rroundControls\"\xa2\x01\n" +
	"\x10PairRoundRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1a\n" +
	"\bdivision\x18\x02 \x01(\tR\bdivision\x12\x14\n" +
	"\x05round\x18\x03 \x01(\x05R\x05round\x12#\n" +
	"\rpreserve_byes\x18\x04 \x01(\bR\fpreserveByes\x12'\n" +
	"\x0fdelete_pairings\x18\x05 \x01(\bR\x0edeletePairings\"G\n" +
	"\x19TournamentDivisionRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1a\n" +
	"\bdivision\x18\x02 \x01(\tR\bdivision\"\xbd\x01\n" +
	"\x18TournamentPairingRequest\x12\"\n" +
	"\rplayer_one_id\x18\x01 \x01(\tR\vplayerOneId\x12\"\n" +
	"\rplayer_two_id\x18\x02 \x01(\tR\vplayerTwoId\x12\x14\n" +
	"\x05round\x18\x03 \x01(\x05R\x05round\x12C\n" +
	"\x10self_play_result\x18\x04 \x01(\x0e2\x19.ipc.TournamentGameResultR\x0eselfPlayResult\"^\n" +
	"\x15DivisionRenameRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1a\n" +
	"\bdivision\x18\x02 \x01(\tR\bdivision\x12\x19\n" +
	"\bnew_name\x18\x03 \x01(\tR\anewName\"\x91\x01\n" +
	"\x19TournamentPairingsRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1a\n" +
	"\bdivision\x18\x02 \x01(\tR\bdivision\x12H\n" +
	"\bpairings\x18\x03 \x03(\v2,.tournament_service.TournamentPairingRequestR\bpairings\"\x86\x04\n" +
	"\x1fTournamentResultOverrideRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1a\n" +
	"\bdivision\x18\x02 \x01(\tR\bdivision\x12\"\n" +
	"\rplayer_one_id\x18\x03 \x01(\tR\vplayerOneId\x12\"\n" +
	"\rplayer_two_id\x18\x04 \x01(\tR\vplayerTwoId\x12\x14\n" +
	"\x05round\x18\x05 \x01(\x05R\x05round\x12(\n" +
	"\x10player_one_score\x18\x06 \x01(\x05R\x0eplayerOneScore\x12(\n" +
	"\x10player_two_score\x18\a \x01(\x05R\x0eplayerTwoScore\x12E\n" +
	"\x11player_one_result\x18\b \x01(\x0e2\x19.ipc.TournamentGameResultR\x0fplayerOneResult\x12E\n" +
	"\x11player_two_result\x18\t \x01(\x0e2\x19.ipc.TournamentGameResultR\x0fplayerTwoResult\x12:\n" +
	"\x0fgame_end_reason\x18\n" +
	" \x01(\x0e2\x12.ipc.GameEndReasonR\rgameEndReason\x12\x1c\n" +
	"\tamendment\x18\v \x01(\bR\tamendment\x12\x1d\n" +
	"\n" +
	"game_index\x18\f \x01(\x05R\tgameIndex\"\x92\x01\n" +
	"$TournamentStartRoundCountdownRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1a\n" +
	"\bdivision\x18\x02 \x01(\tR\bdivision\x12\x14\n" +
	"\x05round\x18\x03 \x01(\x05R\x05round\x12(\n" +
	"\x10start_all_rounds\x18\x04 \x01(\bR\x0estartAllRounds\"\x14\n" +
	"\x12TournamentResponse\";\n" +
	"\x15NewTournamentResponse\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04slug\x18\x02 \x01(\tR\x04slug\"B\n" +
	"\x1cGetTournamentMetadataRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04slug\x18\x02 \x01(\tR\x04slug\"&\n" +
	"\x14GetTournamentRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\")\n" +
	"\x17FinishTournamentRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\"+\n" +
	"\x19UnfinishTournamentRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\"~\n" +
	"\x1aTournamentMetadataResponse\x12B\n" +
	"\bmetadata\x18\x01 \x01(\v2&.tournament_service.TournamentMetadataR\bmetadata\x12\x1c\n" +
	"\tdirectors\x18\x02 \x03(\tR\tdirectors\"Y\n" +
	"\x12RecentGamesRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1b\n" +
	"\tnum_games\x18\x02 \x01(\x05R\bnumGames\x12\x16\n" +
	"\x06offset\x18\x03 \x01(\x05R\x06offset\"J\n" +
	"\x13RecentGamesResponse\x123\n" +
	"\x05games\x18\x01 \x03(\v2\x1d.ipc.TournamentGameEndedEventR\x05games\"*\n" +
	"\x18UnstartTournamentRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\"%\n" +
	"\x13UncheckAllInRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\"5\n" +
	"#RemoveAllPlayersNotCheckedInRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\":\n" +
	"\x0eCheckinRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x18\n" +
	"\acheckin\x18\x02 \x01(\bR\acheckin\"Y\n" +
	"\x0fRegisterRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1a\n" +
	"\bdivision\x18\x02 \x01(\tR\bdivision\x12\x1a\n" +
	"\bregister\x18\x03 \x01(\bR\bregister\")\n" +
	"\x17OpenRegistrationRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\"*\n" +
	"\x18CloseRegistrationRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\"%\n" +
	"\x13OpenCheckinsRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\"Y\n" +
	"\x14CloseCheckinsRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x121\n" +
	"\x15delete_non_checked_in\x18\x02 \x01(\bR\x12deleteNonCheckedIn\"\x94\x01\n" +
	"\x1aTournamentScorecardRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12%\n" +
	"\x0eshow_opponents\x18\x02 \x01(\bR\rshowOpponents\x12\x1d\n" +
	"\n" +
	"show_seeds\x18\x03 \x01(\bR\tshowSeeds\x12 \n" +
	"\fshow_qr_code\x18\x04 \x01(\bR\n" +
	"showQrCode\"6\n" +
	"\x1bTournamentScorecardResponse\x12\x17\n" +
	"\apdf_zip\x18\x01 \x01(\fR\x06pdfZip\"(\n" +
	"&GetRecentAndUpcomingTournamentsRequest\"s\n" +
	"'GetRecentAndUpcomingTournamentsResponse\x12H\n" +
	"\vtournaments\x18\x01 \x03(\v2&.tournament_service.TournamentMetadataR\vtournaments\"\x8e\x04\n" +
	"\rRunCopRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1a\n" +
	"\bdivision\x18\x02 \x01(\tR\bdivision\x12\x14\n" +
	"\x05round\x18\x03 \x01(\x05R\x05round\x12%\n" +
	"\x0eplayer_classes\x18\x04 \x03(\x05R\rplayerClasses\x12!\n" +
	"\fclass_prizes\x18\x05 \x03(\x05R\vclassPrizes\x124\n" +
	"\x16control_loss_threshold\x18\x06 \x01(\x01R\x14controlLossThreshold\x123\n" +
	"\x15hopefulness_threshold\x18\a \x01(\x01R\x14hopefulnessThreshold\x12!\n" +
	"\fplace_prizes\x18\b \x01(\x05R\vplacePrizes\x12#\n" +
	"\rdivision_sims\x18\t \x01(\x05R\fdivisionSims\x12*\n" +
	"\x11control_loss_sims\x18\n" +
	" \x01(\x05R\x0fcontrolLossSims\x12A\n" +
	"\x1dcontrol_loss_activation_round\x18\v \x01(\x05R\x1acontrolLossActivationRound\x12*\n" +
	"\x11allow_repeat_byes\x18\f \x01(\bR\x0fallowRepeatByes\x12#\n" +
	"\rgibson_spread\x18\r \x01(\x05R\fgibsonSpread\"A\n" +
	"\x17ExportTournamentRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x16\n" +
	"\x06format\x18\x02 \x01(\tR\x06format\"6\n" +
	"\x18ExportTournamentResponse\x12\x1a\n" +
	"\bexported\x18\x01 \x01(\tR\bexported\"`\n" +
	"\x15NewClubSessionRequest\x12.\n" +
	"\x04date\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\x04date\x12\x17\n" +
	"\aclub_id\x18\x02 \x01(\tR\x06clubId\"N\n" +
	"\x13ClubSessionResponse\x12#\n" +
	"\rtournament_id\x18\x01 \x01(\tR\ftournamentId\x12\x12\n" +
	"\x04slug\x18\x02 \x01(\tR\x04slug\"Y\n" +
	"\x19RecentClubSessionsRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x14\n" +
	"\x05count\x18\x02 \x01(\x05R\x05count\x12\x16\n" +
	"\x06offset\x18\x03 \x01(\x05R\x06offset\"[\n" +
	"\x14ClubSessionsResponse\x12C\n" +
	"\bsessions\x18\x01 \x03(\v2'.tournament_service.ClubSessionResponseR\bsessions\"F\n" +
	"\x1fInitializeMonitoringKeysRequest\x12#\n" +
	"\rtournament_id\x18\x01 \x01(\tR\ftournamentId\"f\n" +
	"\x1eRequestMonitoringStreamRequest\x12#\n" +
	"\rtournament_id\x18\x01 \x01(\tR\ftournamentId\x12\x1f\n" +
	"\vstream_type\x18\x02 \x01(\tR\n" +
	"streamType\"}\n" +
	"\x1cResetMonitoringStreamRequest\x12#\n" +
	"\rtournament_id\x18\x01 \x01(\tR\ftournamentId\x12\x17\n" +
	"\auser_id\x18\x02 \x01(\tR\x06userId\x12\x1f\n" +
	"\vstream_type\x18\x03 \x01(\tR\n" +
	"streamType\"E\n" +
	"\x1eGetTournamentMonitoringRequest\x12#\n" +
	"\rtournament_id\x18\x01 \x01(\tR\ftournamentId\"Z\n" +
	"\x1fGetTournamentMonitoringResponse\x127\n" +
	"\fparticipants\x18\x01 \x03(\v2\x13.ipc.MonitoringDataR\fparticipants*6\n" +
	"\x05TType\x12\f\n" +
	"\bSTANDARD\x10\x00\x12\b\n" +
	"\x04CLUB\x10\x01\x12\t\n" +
	"\x05CHILD\x10\x02\x12\n" +
	"\n" +
	"\x06LEGACY\x10\x032\xf7 \n" +
	"\x11TournamentService\x12d\n" +
	"\rNewTournament\x12(.tournament_service.NewTournamentRequest\x1a).tournament_service.NewTournamentResponse\x12~\n" +
	"\x15GetTournamentMetadata\x120.tournament_service.GetTournamentMetadataRequest\x1a..tournament_service.TournamentMetadataResponse\"\x03\x90\x02\x01\x12\\\n" +
	"\rGetTournament\x12(.tournament_service.GetTournamentRequest\x1a\x1c.ipc.FullTournamentDivisions\"\x03\x90\x02\x01\x12k\n" +
	"\x12UnfinishTournament\x12-.tournament_service.UnfinishTournamentRequest\x1a&.tournament_service.TournamentResponse\x12g\n" +
	"\x10FinishTournament\x12+.tournament_service.FinishTournamentRequest\x1a&.tournament_service.TournamentResponse\x12q\n" +
	"\x15SetTournamentMetadata\x120.tournament_service.SetTournamentMetadataRequest\x1a&.tournament_service.TournamentResponse\x12Y\n" +
	"\tPairRound\x12$.tournament_service.PairRoundRequest\x1a&.tournament_service.TournamentResponse\x12p\n" +
	"\x16SetSingleRoundControls\x12..tournament_service.SingleRoundControlsRequest\x1a&.tournament_service.TournamentResponse\x12V\n" +
	"\x10SetRoundControls\x12\x1a.ipc.DivisionRoundControls\x1a&.tournament_service.TournamentResponse\x12T\n" +
	"\x13SetDivisionControls\x12\x15.ipc.DivisionControls\x1a&.tournament_service.TournamentResponse\x12N\n" +
	"\fAddDirectors\x12\x16.ipc.TournamentPersons\x1a&.tournament_service.TournamentResponse\x12Q\n" +
	"\x0fRemoveDirectors\x12\x16.ipc.TournamentPersons\x1a&.tournament_service.TournamentResponse\x12d\n" +
	"\vAddDivision\x12-.tournament_service.TournamentDivisionRequest\x1a&.tournament_service.TournamentResponse\x12c\n" +
	"\x0eRenameDivision\x12).tournament_service.DivisionRenameRequest\x1a&.tournament_service.TournamentResponse\x12g\n" +
	"\x0eRemoveDivision\x12-.tournament_service.TournamentDivisionRequest\x1a&.tournament_service.TournamentResponse\x12L\n" +
	"\n" +
	"AddPlayers\x12\x16.ipc.TournamentPersons\x1a&.tournament_service.TournamentResponse\x12O\n" +
	"\rRemovePlayers\x12\x16.ipc.TournamentPersons\x1a&.tournament_service.TournamentResponse\x12c\n" +
	"\n" +
	"SetPairing\x12-.tournament_service.TournamentPairingsRequest\x1a&.tournament_service.TournamentResponse\x12h\n" +
	"\tSetResult\x123.tournament_service.TournamentResultOverrideRequest\x1a&.tournament_service.TournamentResponse\x12w\n" +
	"\x13StartRoundCountdown\x128.tournament_service.TournamentStartRoundCountdownRequest\x1a&.tournament_service.TournamentResponse\x12c\n" +
	"\vRecentGames\x12&.tournament_service.RecentGamesRequest\x1a'.tournament_service.RecentGamesResponse\"\x03\x90\x02\x01\x12g\n" +
	"\x11CreateClubSession\x12).tournament_service.NewClubSessionRequest\x1a'.tournament_service.ClubSessionResponse\x12u\n" +
	"\x15GetRecentClubSessions\x12-.tournament_service.RecentClubSessionsRequest\x1a(.tournament_service.ClubSessionsResponse\"\x03\x90\x02\x01\x12i\n" +
	"\x11UnstartTournament\x12,.tournament_service.UnstartTournamentRequest\x1a&.tournament_service.TournamentResponse\x12g\n" +
	"\x10OpenRegistration\x12+.tournament_service.OpenRegistrationRequest\x1a&.tournament_service.TournamentResponse\x12i\n" +
	"\x11CloseRegistration\x12,.tournament_service.CloseRegistrationRequest\x1a&.tournament_service.TournamentResponse\x12_\n" +
	"\fOpenCheckins\x12'.tournament_service.OpenCheckinsRequest\x1a&.tournament_service.TournamentResponse\x12a\n" +
	"\rCloseCheckins\x12(.tournament_service.CloseCheckinsRequest\x1a&.tournament_service.TournamentResponse\x12_\n" +
	"\fUncheckAllIn\x12'.tournament_service.UncheckAllInRequest\x1a&.tournament_service.TournamentResponse\x12\x7f\n" +
	"\x1cRemoveAllPlayersNotCheckedIn\x127.tournament_service.RemoveAllPlayersNotCheckedInRequest\x1a&.tournament_service.TournamentResponse\x12U\n" +
	"\aCheckIn\x12\".tournament_service.CheckinRequest\x1a&.tournament_service.TournamentResponse\x12W\n" +
	"\bRegister\x12#.tournament_service.RegisterRequest\x1a&.tournament_service.TournamentResponse\x12r\n" +
	"\x10ExportTournament\x12+.tournament_service.ExportTournamentRequest\x1a,.tournament_service.ExportTournamentResponse\"\x03\x90\x02\x01\x12\x7f\n" +
	"\x17GetTournamentScorecards\x12..tournament_service.TournamentScorecardRequest\x1a/.tournament_service.TournamentScorecardResponse\"\x03\x90\x02\x01\x12\x9f\x01\n" +
	"\x1fGetRecentAndUpcomingTournaments\x12:.tournament_service.GetRecentAndUpcomingTournamentsRequest\x1a;.tournament_service.GetRecentAndUpcomingTournamentsResponse\"\x03\x90\x02\x01\x12>\n" +
	"\x06RunCOP\x12!.tournament_service.RunCopRequest\x1a\x11.ipc.PairResponse\x12w\n" +
	"\x18InitializeMonitoringKeys\x123.tournament_service.InitializeMonitoringKeysRequest\x1a&.tournament_service.TournamentResponse\x12u\n" +
	"\x17RequestMonitoringStream\x122.tournament_service.RequestMonitoringStreamRequest\x1a&.tournament_service.TournamentResponse\x12q\n" +
	"\x15ResetMonitoringStream\x120.tournament_service.ResetMonitoringStreamRequest\x1a&.tournament_service.TournamentResponse\x12\x87\x01\n" +
	"\x17GetTournamentMonitoring\x122.tournament_service.GetTournamentMonitoringRequest\x1a3.tournament_service.GetTournamentMonitoringResponse\"\x03\x90\x02\x01B\xd4\x01\n" +
	"\x16com.tournament_serviceB\x16TournamentServiceProtoP\x01Z>github.com/woogles-io/liwords/rpc/api/proto/tournament_service\xa2\x02\x03TXX\xaa\x02\x11TournamentService\xca\x02\x11TournamentService\xe2\x02\x1dTournamentService\\GPBMetadata\xea\x02\x11TournamentServiceb\x06proto3"

var (
	file_proto_tournament_service_tournament_service_proto_rawDescOnce sync.Once
	file_proto_tournament_service_tournament_service_proto_rawDescData []byte
)

func file_proto_tournament_service_tournament_service_proto_rawDescGZIP() []byte {
	file_proto_tournament_service_tournament_service_proto_rawDescOnce.Do(func() {
		file_proto_tournament_service_tournament_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_tournament_service_tournament_service_proto_rawDesc), len(file_proto_tournament_service_tournament_service_proto_rawDesc)))
	})
	return file_proto_tournament_service_tournament_service_proto_rawDescData
}

var file_proto_tournament_service_tournament_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_proto_tournament_service_tournament_service_proto_msgTypes = make([]protoimpl.MessageInfo, 46)
var file_proto_tournament_service_tournament_service_proto_goTypes = []any{
	(TType)(0),                                      // 0: tournament_service.TType
	(*StartRoundRequest)(nil),                       // 1: tournament_service.StartRoundRequest
	(*NewTournamentRequest)(nil),                    // 2: tournament_service.NewTournamentRequest
	(*TournamentMetadata)(nil),                      // 3: tournament_service.TournamentMetadata
	(*SetTournamentMetadataRequest)(nil),            // 4: tournament_service.SetTournamentMetadataRequest
	(*SingleRoundControlsRequest)(nil),              // 5: tournament_service.SingleRoundControlsRequest
	(*PairRoundRequest)(nil),                        // 6: tournament_service.PairRoundRequest
	(*TournamentDivisionRequest)(nil),               // 7: tournament_service.TournamentDivisionRequest
	(*TournamentPairingRequest)(nil),                // 8: tournament_service.TournamentPairingRequest
	(*DivisionRenameRequest)(nil),                   // 9: tournament_service.DivisionRenameRequest
	(*TournamentPairingsRequest)(nil),               // 10: tournament_service.TournamentPairingsRequest
	(*TournamentResultOverrideRequest)(nil),         // 11: tournament_service.TournamentResultOverrideRequest
	(*TournamentStartRoundCountdownRequest)(nil),    // 12: tournament_service.TournamentStartRoundCountdownRequest
	(*TournamentResponse)(nil),                      // 13: tournament_service.TournamentResponse
	(*NewTournamentResponse)(nil),                   // 14: tournament_service.NewTournamentResponse
	(*GetTournamentMetadataRequest)(nil),            // 15: tournament_service.GetTournamentMetadataRequest
	(*GetTournamentRequest)(nil),                    // 16: tournament_service.GetTournamentRequest
	(*FinishTournamentRequest)(nil),                 // 17: tournament_service.FinishTournamentRequest
	(*UnfinishTournamentRequest)(nil),               // 18: tournament_service.UnfinishTournamentRequest
	(*TournamentMetadataResponse)(nil),              // 19: tournament_service.TournamentMetadataResponse
	(*RecentGamesRequest)(nil),                      // 20: tournament_service.RecentGamesRequest
	(*RecentGamesResponse)(nil),                     // 21: tournament_service.RecentGamesResponse
	(*UnstartTournamentRequest)(nil),                // 22: tournament_service.UnstartTournamentRequest
	(*UncheckAllInRequest)(nil),                     // 23: tournament_service.UncheckAllInRequest
	(*RemoveAllPlayersNotCheckedInRequest)(nil),     // 24: tournament_service.RemoveAllPlayersNotCheckedInRequest
	(*CheckinRequest)(nil),                          // 25: tournament_service.CheckinRequest
	(*RegisterRequest)(nil),                         // 26: tournament_service.RegisterRequest
	(*OpenRegistrationRequest)(nil),                 // 27: tournament_service.OpenRegistrationRequest
	(*CloseRegistrationRequest)(nil),                // 28: tournament_service.CloseRegistrationRequest
	(*OpenCheckinsRequest)(nil),                     // 29: tournament_service.OpenCheckinsRequest
	(*CloseCheckinsRequest)(nil),                    // 30: tournament_service.CloseCheckinsRequest
	(*TournamentScorecardRequest)(nil),              // 31: tournament_service.TournamentScorecardRequest
	(*TournamentScorecardResponse)(nil),             // 32: tournament_service.TournamentScorecardResponse
	(*GetRecentAndUpcomingTournamentsRequest)(nil),  // 33: tournament_service.GetRecentAndUpcomingTournamentsRequest
	(*GetRecentAndUpcomingTournamentsResponse)(nil), // 34: tournament_service.GetRecentAndUpcomingTournamentsResponse
	(*RunCopRequest)(nil),                           // 35: tournament_service.RunCopRequest
	(*ExportTournamentRequest)(nil),                 // 36: tournament_service.ExportTournamentRequest
	(*ExportTournamentResponse)(nil),                // 37: tournament_service.ExportTournamentResponse
	(*NewClubSessionRequest)(nil),                   // 38: tournament_service.NewClubSessionRequest
	(*ClubSessionResponse)(nil),                     // 39: tournament_service.ClubSessionResponse
	(*RecentClubSessionsRequest)(nil),               // 40: tournament_service.RecentClubSessionsRequest
	(*ClubSessionsResponse)(nil),                    // 41: tournament_service.ClubSessionsResponse
	(*InitializeMonitoringKeysRequest)(nil),         // 42: tournament_service.InitializeMonitoringKeysRequest
	(*RequestMonitoringStreamRequest)(nil),          // 43: tournament_service.RequestMonitoringStreamRequest
	(*ResetMonitoringStreamRequest)(nil),            // 44: tournament_service.ResetMonitoringStreamRequest
	(*GetTournamentMonitoringRequest)(nil),          // 45: tournament_service.GetTournamentMonitoringRequest
	(*GetTournamentMonitoringResponse)(nil),         // 46: tournament_service.GetTournamentMonitoringResponse
	(*timestamppb.Timestamp)(nil),                   // 47: google.protobuf.Timestamp
	(*ipc.GameRequest)(nil),                         // 48: ipc.GameRequest
	(*ipc.RoundControl)(nil),                        // 49: ipc.RoundControl
	(ipc.TournamentGameResult)(0),                   // 50: ipc.TournamentGameResult
	(ipc.GameEndReason)(0),                          // 51: ipc.GameEndReason
	(*ipc.TournamentGameEndedEvent)(nil),            // 52: ipc.TournamentGameEndedEvent
	(*ipc.MonitoringData)(nil),                      // 53: ipc.MonitoringData
	(*ipc.DivisionRoundControls)(nil),               // 54: ipc.DivisionRoundControls
	(*ipc.DivisionControls)(nil),                    // 55: ipc.DivisionControls
	(*ipc.TournamentPersons)(nil),                   // 56: ipc.TournamentPersons
	(*ipc.FullTournamentDivisions)(nil),             // 57: ipc.FullTournamentDivisions
	(*ipc.PairResponse)(nil),                        // 58: ipc.PairResponse
}
var file_proto_tournament_service_tournament_service_proto_depIdxs = []int32{
	0,  // 0: tournament_service.NewTournamentRequest.type:type_name -> tournament_service.TType
	47, // 1: tournament_service.NewTournamentRequest.scheduled_start_time:type_name -> google.protobuf.Timestamp
	47, // 2: tournament_service.NewTournamentRequest.scheduled_end_time:type_name -> google.protobuf.Timestamp
	0,  // 3: tournament_service.TournamentMetadata.type:type_name -> tournament_service.TType
	48, // 4: tournament_service.TournamentMetadata.default_club_settings:type_name -> ipc.GameRequest
	47, // 5: tournament_service.TournamentMetadata.scheduled_start_time:type_name -> google.protobuf.Timestamp
	47, // 6: tournament_service.TournamentMetadata.scheduled_end_time:type_name -> google.protobuf.Timestamp
	3,  // 7: tournament_service.SetTournamentMetadataRequest.metadata:type_name -> tournament_service.TournamentMetadata
	49, // 8: tournament_service.SingleRoundControlsRequest.round_controls:type_name -> ipc.RoundControl
	50, // 9: tournament_service.TournamentPairingRequest.self_play_result:type_name -> ipc.TournamentGameResult
	8,  // 10: tournament_service.TournamentPairingsRequest.pairings:type_name -> tournament_service.TournamentPairingRequest
	50, // 11: tournament_service.TournamentResultOverrideRequest.player_one_result:type_name -> ipc.TournamentGameResult
	50, // 12: tournament_service.TournamentResultOverrideRequest.player_two_result:type_name -> ipc.TournamentGameResult
	51, // 13: tournament_service.TournamentResultOverrideRequest.game_end_reason:type_name -> ipc.GameEndReason
	3,  // 14: tournament_service.TournamentMetadataResponse.metadata:type_name -> tournament_service.TournamentMetadata
	52, // 15: tournament_service.RecentGamesResponse.games:type_name -> ipc.TournamentGameEndedEvent
	3,  // 16: tournament_service.GetRecentAndUpcomingTournamentsResponse.tournaments:type_name -> tournament_service.TournamentMetadata
	47, // 17: tournament_service.NewClubSessionRequest.date:type_name -> google.protobuf.Timestamp
	39, // 18: tournament_service.ClubSessionsResponse.sessions:type_name -> tournament_service.ClubSessionResponse
	53, // 19: tournament_service.GetTournamentMonitoringResponse.participants:type_name -> ipc.MonitoringData
	2,  // 20: tournament_service.TournamentService.NewTournament:input_type -> tournament_service.NewTournamentRequest
	15, // 21: tournament_service.TournamentService.GetTournamentMetadata:input_type -> tournament_service.GetTournamentMetadataRequest
	16, // 22: tournament_service.TournamentService.GetTournament:input_type -> tournament_service.GetTournamentRequest
	18, // 23: tournament_service.TournamentService.UnfinishTournament:input_type -> tournament_service.UnfinishTournamentRequest
	17, // 24: tournament_service.TournamentService.FinishTournament:input_type -> tournament_service.FinishTournamentRequest
	4,  // 25: tournament_service.TournamentService.SetTournamentMetadata:input_type -> tournament_service.SetTournamentMetadataRequest
	6,  // 26: tournament_service.TournamentService.PairRound:input_type -> tournament_service.PairRoundRequest
	5,  // 27: tournament_service.TournamentService.SetSingleRoundControls:input_type -> tournament_service.SingleRoundControlsRequest
	54, // 28: tournament_service.TournamentService.SetRoundControls:input_type -> ipc.DivisionRoundControls
	55, // 29: tournament_service.TournamentService.SetDivisionControls:input_type -> ipc.DivisionControls
	56, // 30: tournament_service.TournamentService.AddDirectors:input_type -> ipc.TournamentPersons
	56, // 31: tournament_service.TournamentService.RemoveDirectors:input_type -> ipc.TournamentPersons
	7,  // 32: tournament_service.TournamentService.AddDivision:input_type -> tournament_service.TournamentDivisionRequest
	9,  // 33: tournament_service.TournamentService.RenameDivision:input_type -> tournament_service.DivisionRenameRequest
	7,  // 34: tournament_service.TournamentService.RemoveDivision:input_type -> tournament_service.TournamentDivisionRequest
	56, // 35: tournament_service.TournamentService.AddPlayers:input_type -> ipc.TournamentPersons
	56, // 36: tournament_service.TournamentService.RemovePlayers:input_type -> ipc.TournamentPersons
	10, // 37: tournament_service.TournamentService.SetPairing:input_type -> tournament_service.TournamentPairingsRequest
	11, // 38: tournament_service.TournamentService.SetResult:input_type -> tournament_service.TournamentResultOverrideRequest
	12, // 39: tournament_service.TournamentService.StartRoundCountdown:input_type -> tournament_service.TournamentStartRoundCountdownRequest
	20, // 40: tournament_service.TournamentService.RecentGames:input_type -> tournament_service.RecentGamesRequest
	38, // 41: tournament_service.TournamentService.CreateClubSession:input_type -> tournament_service.NewClubSessionRequest
	40, // 42: tournament_service.TournamentService.GetRecentClubSessions:input_type -> tournament_service.RecentClubSessionsRequest
	22, // 43: tournament_service.TournamentService.UnstartTournament:input_type -> tournament_service.UnstartTournamentRequest
	27, // 44: tournament_service.TournamentService.OpenRegistration:input_type -> tournament_service.OpenRegistrationRequest
	28, // 45: tournament_service.TournamentService.CloseRegistration:input_type -> tournament_service.CloseRegistrationRequest
	29, // 46: tournament_service.TournamentService.OpenCheckins:input_type -> tournament_service.OpenCheckinsRequest
	30, // 47: tournament_service.TournamentService.CloseCheckins:input_type -> tournament_service.CloseCheckinsRequest
	23, // 48: tournament_service.TournamentService.UncheckAllIn:input_type -> tournament_service.UncheckAllInRequest
	24, // 49: tournament_service.TournamentService.RemoveAllPlayersNotCheckedIn:input_type -> tournament_service.RemoveAllPlayersNotCheckedInRequest
	25, // 50: tournament_service.TournamentService.CheckIn:input_type -> tournament_service.CheckinRequest
	26, // 51: tournament_service.TournamentService.Register:input_type -> tournament_service.RegisterRequest
	36, // 52: tournament_service.TournamentService.ExportTournament:input_type -> tournament_service.ExportTournamentRequest
	31, // 53: tournament_service.TournamentService.GetTournamentScorecards:input_type -> tournament_service.TournamentScorecardRequest
	33, // 54: tournament_service.TournamentService.GetRecentAndUpcomingTournaments:input_type -> tournament_service.GetRecentAndUpcomingTournamentsRequest
	35, // 55: tournament_service.TournamentService.RunCOP:input_type -> tournament_service.RunCopRequest
	42, // 56: tournament_service.TournamentService.InitializeMonitoringKeys:input_type -> tournament_service.InitializeMonitoringKeysRequest
	43, // 57: tournament_service.TournamentService.RequestMonitoringStream:input_type -> tournament_service.RequestMonitoringStreamRequest
	44, // 58: tournament_service.TournamentService.ResetMonitoringStream:input_type -> tournament_service.ResetMonitoringStreamRequest
	45, // 59: tournament_service.TournamentService.GetTournamentMonitoring:input_type -> tournament_service.GetTournamentMonitoringRequest
	14, // 60: tournament_service.TournamentService.NewTournament:output_type -> tournament_service.NewTournamentResponse
	19, // 61: tournament_service.TournamentService.GetTournamentMetadata:output_type -> tournament_service.TournamentMetadataResponse
	57, // 62: tournament_service.TournamentService.GetTournament:output_type -> ipc.FullTournamentDivisions
	13, // 63: tournament_service.TournamentService.UnfinishTournament:output_type -> tournament_service.TournamentResponse
	13, // 64: tournament_service.TournamentService.FinishTournament:output_type -> tournament_service.TournamentResponse
	13, // 65: tournament_service.TournamentService.SetTournamentMetadata:output_type -> tournament_service.TournamentResponse
	13, // 66: tournament_service.TournamentService.PairRound:output_type -> tournament_service.TournamentResponse
	13, // 67: tournament_service.TournamentService.SetSingleRoundControls:output_type -> tournament_service.TournamentResponse
	13, // 68: tournament_service.TournamentService.SetRoundControls:output_type -> tournament_service.TournamentResponse
	13, // 69: tournament_service.TournamentService.SetDivisionControls:output_type -> tournament_service.TournamentResponse
	13, // 70: tournament_service.TournamentService.AddDirectors:output_type -> tournament_service.TournamentResponse
	13, // 71: tournament_service.TournamentService.RemoveDirectors:output_type -> tournament_service.TournamentResponse
	13, // 72: tournament_service.TournamentService.AddDivision:output_type -> tournament_service.TournamentResponse
	13, // 73: tournament_service.TournamentService.RenameDivision:output_type -> tournament_service.TournamentResponse
	13, // 74: tournament_service.TournamentService.RemoveDivision:output_type -> tournament_service.TournamentResponse
	13, // 75: tournament_service.TournamentService.AddPlayers:output_type -> tournament_service.TournamentResponse
	13, // 76: tournament_service.TournamentService.RemovePlayers:output_type -> tournament_service.TournamentResponse
	13, // 77: tournament_service.TournamentService.SetPairing:output_type -> tournament_service.TournamentResponse
	13, // 78: tournament_service.TournamentService.SetResult:output_type -> tournament_service.TournamentResponse
	13, // 79: tournament_service.TournamentService.StartRoundCountdown:output_type -> tournament_service.TournamentResponse
	21, // 80: tournament_service.TournamentService.RecentGames:output_type -> tournament_service.RecentGamesResponse
	39, // 81: tournament_service.TournamentService.CreateClubSession:output_type -> tournament_service.ClubSessionResponse
	41, // 82: tournament_service.TournamentService.GetRecentClubSessions:output_type -> tournament_service.ClubSessionsResponse
	13, // 83: tournament_service.TournamentService.UnstartTournament:output_type -> tournament_service.TournamentResponse
	13, // 84: tournament_service.TournamentService.OpenRegistration:output_type -> tournament_service.TournamentResponse
	13, // 85: tournament_service.TournamentService.CloseRegistration:output_type -> tournament_service.TournamentResponse
	13, // 86: tournament_service.TournamentService.OpenCheckins:output_type -> tournament_service.TournamentResponse
	13, // 87: tournament_service.TournamentService.CloseCheckins:output_type -> tournament_service.TournamentResponse
	13, // 88: tournament_service.TournamentService.UncheckAllIn:output_type -> tournament_service.TournamentResponse
	13, // 89: tournament_service.TournamentService.RemoveAllPlayersNotCheckedIn:output_type -> tournament_service.TournamentResponse
	13, // 90: tournament_service.TournamentService.CheckIn:output_type -> tournament_service.TournamentResponse
	13, // 91: tournament_service.TournamentService.Register:output_type -> tournament_service.TournamentResponse
	37, // 92: tournament_service.TournamentService.ExportTournament:output_type -> tournament_service.ExportTournamentResponse
	32, // 93: tournament_service.TournamentService.GetTournamentScorecards:output_type -> tournament_service.TournamentScorecardResponse
	34, // 94: tournament_service.TournamentService.GetRecentAndUpcomingTournaments:output_type -> tournament_service.GetRecentAndUpcomingTournamentsResponse
	58, // 95: tournament_service.TournamentService.RunCOP:output_type -> ipc.PairResponse
	13, // 96: tournament_service.TournamentService.InitializeMonitoringKeys:output_type -> tournament_service.TournamentResponse
	13, // 97: tournament_service.TournamentService.RequestMonitoringStream:output_type -> tournament_service.TournamentResponse
	13, // 98: tournament_service.TournamentService.ResetMonitoringStream:output_type -> tournament_service.TournamentResponse
	46, // 99: tournament_service.TournamentService.GetTournamentMonitoring:output_type -> tournament_service.GetTournamentMonitoringResponse
	60, // [60:100] is the sub-list for method output_type
	20, // [20:60] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_proto_tournament_service_tournament_service_proto_init() }
func file_proto_tournament_service_tournament_service_proto_init() {
	if File_proto_tournament_service_tournament_service_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_tournament_service_tournament_service_proto_rawDesc), len(file_proto_tournament_service_tournament_service_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   46,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_tournament_service_tournament_service_proto_goTypes,
		DependencyIndexes: file_proto_tournament_service_tournament_service_proto_depIdxs,
		EnumInfos:         file_proto_tournament_service_tournament_service_proto_enumTypes,
		MessageInfos:      file_proto_tournament_service_tournament_service_proto_msgTypes,
	}.Build()
	File_proto_tournament_service_tournament_service_proto = out.File
	file_proto_tournament_service_tournament_service_proto_goTypes = nil
	file_proto_tournament_service_tournament_service_proto_depIdxs = nil
}
