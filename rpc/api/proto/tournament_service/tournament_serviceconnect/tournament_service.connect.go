// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/tournament_service/tournament_service.proto

package tournament_serviceconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	ipc "github.com/woogles-io/liwords/rpc/api/proto/ipc"
	tournament_service "github.com/woogles-io/liwords/rpc/api/proto/tournament_service"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// TournamentServiceName is the fully-qualified name of the TournamentService service.
	TournamentServiceName = "tournament_service.TournamentService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TournamentServiceNewTournamentProcedure is the fully-qualified name of the TournamentService's
	// NewTournament RPC.
	TournamentServiceNewTournamentProcedure = "/tournament_service.TournamentService/NewTournament"
	// TournamentServiceGetTournamentMetadataProcedure is the fully-qualified name of the
	// TournamentService's GetTournamentMetadata RPC.
	TournamentServiceGetTournamentMetadataProcedure = "/tournament_service.TournamentService/GetTournamentMetadata"
	// TournamentServiceGetTournamentProcedure is the fully-qualified name of the TournamentService's
	// GetTournament RPC.
	TournamentServiceGetTournamentProcedure = "/tournament_service.TournamentService/GetTournament"
	// TournamentServiceUnfinishTournamentProcedure is the fully-qualified name of the
	// TournamentService's UnfinishTournament RPC.
	TournamentServiceUnfinishTournamentProcedure = "/tournament_service.TournamentService/UnfinishTournament"
	// TournamentServiceFinishTournamentProcedure is the fully-qualified name of the TournamentService's
	// FinishTournament RPC.
	TournamentServiceFinishTournamentProcedure = "/tournament_service.TournamentService/FinishTournament"
	// TournamentServiceSetTournamentMetadataProcedure is the fully-qualified name of the
	// TournamentService's SetTournamentMetadata RPC.
	TournamentServiceSetTournamentMetadataProcedure = "/tournament_service.TournamentService/SetTournamentMetadata"
	// TournamentServicePairRoundProcedure is the fully-qualified name of the TournamentService's
	// PairRound RPC.
	TournamentServicePairRoundProcedure = "/tournament_service.TournamentService/PairRound"
	// TournamentServiceSetSingleRoundControlsProcedure is the fully-qualified name of the
	// TournamentService's SetSingleRoundControls RPC.
	TournamentServiceSetSingleRoundControlsProcedure = "/tournament_service.TournamentService/SetSingleRoundControls"
	// TournamentServiceSetRoundControlsProcedure is the fully-qualified name of the TournamentService's
	// SetRoundControls RPC.
	TournamentServiceSetRoundControlsProcedure = "/tournament_service.TournamentService/SetRoundControls"
	// TournamentServiceSetDivisionControlsProcedure is the fully-qualified name of the
	// TournamentService's SetDivisionControls RPC.
	TournamentServiceSetDivisionControlsProcedure = "/tournament_service.TournamentService/SetDivisionControls"
	// TournamentServiceAddDirectorsProcedure is the fully-qualified name of the TournamentService's
	// AddDirectors RPC.
	TournamentServiceAddDirectorsProcedure = "/tournament_service.TournamentService/AddDirectors"
	// TournamentServiceRemoveDirectorsProcedure is the fully-qualified name of the TournamentService's
	// RemoveDirectors RPC.
	TournamentServiceRemoveDirectorsProcedure = "/tournament_service.TournamentService/RemoveDirectors"
	// TournamentServiceAddDivisionProcedure is the fully-qualified name of the TournamentService's
	// AddDivision RPC.
	TournamentServiceAddDivisionProcedure = "/tournament_service.TournamentService/AddDivision"
	// TournamentServiceRenameDivisionProcedure is the fully-qualified name of the TournamentService's
	// RenameDivision RPC.
	TournamentServiceRenameDivisionProcedure = "/tournament_service.TournamentService/RenameDivision"
	// TournamentServiceRemoveDivisionProcedure is the fully-qualified name of the TournamentService's
	// RemoveDivision RPC.
	TournamentServiceRemoveDivisionProcedure = "/tournament_service.TournamentService/RemoveDivision"
	// TournamentServiceAddPlayersProcedure is the fully-qualified name of the TournamentService's
	// AddPlayers RPC.
	TournamentServiceAddPlayersProcedure = "/tournament_service.TournamentService/AddPlayers"
	// TournamentServiceRemovePlayersProcedure is the fully-qualified name of the TournamentService's
	// RemovePlayers RPC.
	TournamentServiceRemovePlayersProcedure = "/tournament_service.TournamentService/RemovePlayers"
	// TournamentServiceMovePlayerProcedure is the fully-qualified name of the TournamentService's
	// MovePlayer RPC.
	TournamentServiceMovePlayerProcedure = "/tournament_service.TournamentService/MovePlayer"
	// TournamentServiceSetPairingProcedure is the fully-qualified name of the TournamentService's
	// SetPairing RPC.
	TournamentServiceSetPairingProcedure = "/tournament_service.TournamentService/SetPairing"
	// TournamentServiceSetResultProcedure is the fully-qualified name of the TournamentService's
	// SetResult RPC.
	TournamentServiceSetResultProcedure = "/tournament_service.TournamentService/SetResult"
	// TournamentServiceStartRoundCountdownProcedure is the fully-qualified name of the
	// TournamentService's StartRoundCountdown RPC.
	TournamentServiceStartRoundCountdownProcedure = "/tournament_service.TournamentService/StartRoundCountdown"
	// TournamentServiceRecentGamesProcedure is the fully-qualified name of the TournamentService's
	// RecentGames RPC.
	TournamentServiceRecentGamesProcedure = "/tournament_service.TournamentService/RecentGames"
	// TournamentServiceCreateClubSessionProcedure is the fully-qualified name of the
	// TournamentService's CreateClubSession RPC.
	TournamentServiceCreateClubSessionProcedure = "/tournament_service.TournamentService/CreateClubSession"
	// TournamentServiceGetRecentClubSessionsProcedure is the fully-qualified name of the
	// TournamentService's GetRecentClubSessions RPC.
	TournamentServiceGetRecentClubSessionsProcedure = "/tournament_service.TournamentService/GetRecentClubSessions"
	// TournamentServiceUnstartTournamentProcedure is the fully-qualified name of the
	// TournamentService's UnstartTournament RPC.
	TournamentServiceUnstartTournamentProcedure = "/tournament_service.TournamentService/UnstartTournament"
	// TournamentServiceOpenRegistrationProcedure is the fully-qualified name of the TournamentService's
	// OpenRegistration RPC.
	TournamentServiceOpenRegistrationProcedure = "/tournament_service.TournamentService/OpenRegistration"
	// TournamentServiceCloseRegistrationProcedure is the fully-qualified name of the
	// TournamentService's CloseRegistration RPC.
	TournamentServiceCloseRegistrationProcedure = "/tournament_service.TournamentService/CloseRegistration"
	// TournamentServiceOpenCheckinsProcedure is the fully-qualified name of the TournamentService's
	// OpenCheckins RPC.
	TournamentServiceOpenCheckinsProcedure = "/tournament_service.TournamentService/OpenCheckins"
	// TournamentServiceCloseCheckinsProcedure is the fully-qualified name of the TournamentService's
	// CloseCheckins RPC.
	TournamentServiceCloseCheckinsProcedure = "/tournament_service.TournamentService/CloseCheckins"
	// TournamentServiceUncheckAllInProcedure is the fully-qualified name of the TournamentService's
	// UncheckAllIn RPC.
	TournamentServiceUncheckAllInProcedure = "/tournament_service.TournamentService/UncheckAllIn"
	// TournamentServiceRemoveAllPlayersNotCheckedInProcedure is the fully-qualified name of the
	// TournamentService's RemoveAllPlayersNotCheckedIn RPC.
	TournamentServiceRemoveAllPlayersNotCheckedInProcedure = "/tournament_service.TournamentService/RemoveAllPlayersNotCheckedIn"
	// TournamentServiceCheckInProcedure is the fully-qualified name of the TournamentService's CheckIn
	// RPC.
	TournamentServiceCheckInProcedure = "/tournament_service.TournamentService/CheckIn"
	// TournamentServiceRegisterProcedure is the fully-qualified name of the TournamentService's
	// Register RPC.
	TournamentServiceRegisterProcedure = "/tournament_service.TournamentService/Register"
	// TournamentServiceExportTournamentProcedure is the fully-qualified name of the TournamentService's
	// ExportTournament RPC.
	TournamentServiceExportTournamentProcedure = "/tournament_service.TournamentService/ExportTournament"
	// TournamentServiceGetTournamentScorecardsProcedure is the fully-qualified name of the
	// TournamentService's GetTournamentScorecards RPC.
	TournamentServiceGetTournamentScorecardsProcedure = "/tournament_service.TournamentService/GetTournamentScorecards"
	// TournamentServiceGetRecentAndUpcomingTournamentsProcedure is the fully-qualified name of the
	// TournamentService's GetRecentAndUpcomingTournaments RPC.
	TournamentServiceGetRecentAndUpcomingTournamentsProcedure = "/tournament_service.TournamentService/GetRecentAndUpcomingTournaments"
	// TournamentServiceGetPastTournamentsProcedure is the fully-qualified name of the
	// TournamentService's GetPastTournaments RPC.
	TournamentServiceGetPastTournamentsProcedure = "/tournament_service.TournamentService/GetPastTournaments"
	// TournamentServiceRunCOPProcedure is the fully-qualified name of the TournamentService's RunCOP
	// RPC.
	TournamentServiceRunCOPProcedure = "/tournament_service.TournamentService/RunCOP"
	// TournamentServiceInitializeMonitoringKeysProcedure is the fully-qualified name of the
	// TournamentService's InitializeMonitoringKeys RPC.
	TournamentServiceInitializeMonitoringKeysProcedure = "/tournament_service.TournamentService/InitializeMonitoringKeys"
	// TournamentServiceRequestMonitoringStreamProcedure is the fully-qualified name of the
	// TournamentService's RequestMonitoringStream RPC.
	TournamentServiceRequestMonitoringStreamProcedure = "/tournament_service.TournamentService/RequestMonitoringStream"
	// TournamentServiceResetMonitoringStreamProcedure is the fully-qualified name of the
	// TournamentService's ResetMonitoringStream RPC.
	TournamentServiceResetMonitoringStreamProcedure = "/tournament_service.TournamentService/ResetMonitoringStream"
	// TournamentServiceGetTournamentMonitoringProcedure is the fully-qualified name of the
	// TournamentService's GetTournamentMonitoring RPC.
	TournamentServiceGetTournamentMonitoringProcedure = "/tournament_service.TournamentService/GetTournamentMonitoring"
)

// TournamentServiceClient is a client for the tournament_service.TournamentService service.
type TournamentServiceClient interface {
	NewTournament(context.Context, *connect.Request[tournament_service.NewTournamentRequest]) (*connect.Response[tournament_service.NewTournamentResponse], error)
	GetTournamentMetadata(context.Context, *connect.Request[tournament_service.GetTournamentMetadataRequest]) (*connect.Response[tournament_service.TournamentMetadataResponse], error)
	GetTournament(context.Context, *connect.Request[tournament_service.GetTournamentRequest]) (*connect.Response[ipc.FullTournamentDivisions], error)
	UnfinishTournament(context.Context, *connect.Request[tournament_service.UnfinishTournamentRequest]) (*connect.Response[tournament_service.TournamentResponse], error)
	FinishTournament(context.Context, *connect.Request[tournament_service.FinishTournamentRequest]) (*connect.Response[tournament_service.TournamentResponse], error)
	SetTournamentMetadata(context.Context, *connect.Request[tournament_service.SetTournamentMetadataRequest]) (*connect.Response[tournament_service.TournamentResponse], error)
	PairRound(context.Context, *connect.Request[tournament_service.PairRoundRequest]) (*connect.Response[tournament_service.TournamentResponse], error)
	SetSingleRoundControls(context.Context, *connect.Request[tournament_service.SingleRoundControlsRequest]) (*connect.Response[tournament_service.TournamentResponse], error)
	SetRoundControls(context.Context, *connect.Request[ipc.DivisionRoundControls]) (*connect.Response[tournament_service.TournamentResponse], error)
	SetDivisionControls(context.Context, *connect.Request[ipc.DivisionControls]) (*connect.Response[tournament_service.TournamentResponse], error)
	// Input to AddDirectors should be director usernames.
	AddDirectors(context.Context, *connect.Request[ipc.TournamentPersons]) (*connect.Response[tournament_service.TournamentResponse], error)
	// Input to RemoveDirectors should be director usernames.
	RemoveDirectors(context.Context, *connect.Request[ipc.TournamentPersons]) (*connect.Response[tournament_service.TournamentResponse], error)
	AddDivision(context.Context, *connect.Request[tournament_service.TournamentDivisionRequest]) (*connect.Response[tournament_service.TournamentResponse], error)
	RenameDivision(context.Context, *connect.Request[tournament_service.DivisionRenameRequest]) (*connect.Response[tournament_service.TournamentResponse], error)
	RemoveDivision(context.Context, *connect.Request[tournament_service.TournamentDivisionRequest]) (*connect.Response[tournament_service.TournamentResponse], error)
	// Input to AddPlayers should be player usernames
	AddPlayers(context.Context, *connect.Request[ipc.TournamentPersons]) (*connect.Response[tournament_service.TournamentResponse], error)
	// Input to RemovePlayers should be player usernames
	RemovePlayers(context.Context, *connect.Request[ipc.TournamentPersons]) (*connect.Response[tournament_service.TournamentResponse], error)
	// MovePlayer moves a player from one division to another
	MovePlayer(context.Context, *connect.Request[tournament_service.MovePlayerRequest]) (*connect.Response[tournament_service.TournamentResponse], error)
	SetPairing(context.Context, *connect.Request[tournament_service.TournamentPairingsRequest]) (*connect.Response[tournament_service.TournamentResponse], error)
	SetResult(context.Context, *connect.Request[tournament_service.TournamentResultOverrideRequest]) (*connect.Response[tournament_service.TournamentResponse], error)
	StartRoundCountdown(context.Context, *connect.Request[tournament_service.TournamentStartRoundCountdownRequest]) (*connect.Response[tournament_service.TournamentResponse], error)
	RecentGames(context.Context, *connect.Request[tournament_service.RecentGamesRequest]) (*connect.Response[tournament_service.RecentGamesResponse], error)
	CreateClubSession(context.Context, *connect.Request[tournament_service.NewClubSessionRequest]) (*connect.Response[tournament_service.ClubSessionResponse], error)
	GetRecentClubSessions(context.Context, *connect.Request[tournament_service.RecentClubSessionsRequest]) (*connect.Response[tournament_service.ClubSessionsResponse], error)
	UnstartTournament(context.Context, *connect.Request[tournament_service.UnstartTournamentRequest]) (*connect.Response[tournament_service.TournamentResponse], error)
	OpenRegistration(context.Context, *connect.Request[tournament_service.OpenRegistrationRequest]) (*connect.Response[tournament_service.TournamentResponse], error)
	CloseRegistration(context.Context, *connect.Request[tournament_service.CloseRegistrationRequest]) (*connect.Response[tournament_service.TournamentResponse], error)
	OpenCheckins(context.Context, *connect.Request[tournament_service.OpenCheckinsRequest]) (*connect.Response[tournament_service.TournamentResponse], error)
	CloseCheckins(context.Context, *connect.Request[tournament_service.CloseCheckinsRequest]) (*connect.Response[tournament_service.TournamentResponse], error)
	// Uncheck everyone in. Use this some time before the beginning of a session.
	UncheckAllIn(context.Context, *connect.Request[tournament_service.UncheckAllInRequest]) (*connect.Response[tournament_service.TournamentResponse], error)
	RemoveAllPlayersNotCheckedIn(context.Context, *connect.Request[tournament_service.RemoveAllPlayersNotCheckedInRequest]) (*connect.Response[tournament_service.TournamentResponse], error)
	// CheckIn allows players to check themselves in.
	CheckIn(context.Context, *connect.Request[tournament_service.CheckinRequest]) (*connect.Response[tournament_service.TournamentResponse], error)
	Register(context.Context, *connect.Request[tournament_service.RegisterRequest]) (*connect.Response[tournament_service.TournamentResponse], error)
	ExportTournament(context.Context, *connect.Request[tournament_service.ExportTournamentRequest]) (*connect.Response[tournament_service.ExportTournamentResponse], error)
	GetTournamentScorecards(context.Context, *connect.Request[tournament_service.TournamentScorecardRequest]) (*connect.Response[tournament_service.TournamentScorecardResponse], error)
	GetRecentAndUpcomingTournaments(context.Context, *connect.Request[tournament_service.GetRecentAndUpcomingTournamentsRequest]) (*connect.Response[tournament_service.GetRecentAndUpcomingTournamentsResponse], error)
	GetPastTournaments(context.Context, *connect.Request[tournament_service.GetPastTournamentsRequest]) (*connect.Response[tournament_service.GetPastTournamentsResponse], error)
	RunCOP(context.Context, *connect.Request[tournament_service.RunCopRequest]) (*connect.Response[ipc.PairResponse], error)
	// Monitoring/invigilation endpoints
	InitializeMonitoringKeys(context.Context, *connect.Request[tournament_service.InitializeMonitoringKeysRequest]) (*connect.Response[tournament_service.TournamentResponse], error)
	RequestMonitoringStream(context.Context, *connect.Request[tournament_service.RequestMonitoringStreamRequest]) (*connect.Response[tournament_service.TournamentResponse], error)
	ResetMonitoringStream(context.Context, *connect.Request[tournament_service.ResetMonitoringStreamRequest]) (*connect.Response[tournament_service.TournamentResponse], error)
	GetTournamentMonitoring(context.Context, *connect.Request[tournament_service.GetTournamentMonitoringRequest]) (*connect.Response[tournament_service.GetTournamentMonitoringResponse], error)
}

// NewTournamentServiceClient constructs a client for the tournament_service.TournamentService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTournamentServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TournamentServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	tournamentServiceMethods := tournament_service.File_proto_tournament_service_tournament_service_proto.Services().ByName("TournamentService").Methods()
	return &tournamentServiceClient{
		newTournament: connect.NewClient[tournament_service.NewTournamentRequest, tournament_service.NewTournamentResponse](
			httpClient,
			baseURL+TournamentServiceNewTournamentProcedure,
			connect.WithSchema(tournamentServiceMethods.ByName("NewTournament")),
			connect.WithClientOptions(opts...),
		),
		getTournamentMetadata: connect.NewClient[tournament_service.GetTournamentMetadataRequest, tournament_service.TournamentMetadataResponse](
			httpClient,
			baseURL+TournamentServiceGetTournamentMetadataProcedure,
			connect.WithSchema(tournamentServiceMethods.ByName("GetTournamentMetadata")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		getTournament: connect.NewClient[tournament_service.GetTournamentRequest, ipc.FullTournamentDivisions](
			httpClient,
			baseURL+TournamentServiceGetTournamentProcedure,
			connect.WithSchema(tournamentServiceMethods.ByName("GetTournament")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		unfinishTournament: connect.NewClient[tournament_service.UnfinishTournamentRequest, tournament_service.TournamentResponse](
			httpClient,
			baseURL+TournamentServiceUnfinishTournamentProcedure,
			connect.WithSchema(tournamentServiceMethods.ByName("UnfinishTournament")),
			connect.WithClientOptions(opts...),
		),
		finishTournament: connect.NewClient[tournament_service.FinishTournamentRequest, tournament_service.TournamentResponse](
			httpClient,
			baseURL+TournamentServiceFinishTournamentProcedure,
			connect.WithSchema(tournamentServiceMethods.ByName("FinishTournament")),
			connect.WithClientOptions(opts...),
		),
		setTournamentMetadata: connect.NewClient[tournament_service.SetTournamentMetadataRequest, tournament_service.TournamentResponse](
			httpClient,
			baseURL+TournamentServiceSetTournamentMetadataProcedure,
			connect.WithSchema(tournamentServiceMethods.ByName("SetTournamentMetadata")),
			connect.WithClientOptions(opts...),
		),
		pairRound: connect.NewClient[tournament_service.PairRoundRequest, tournament_service.TournamentResponse](
			httpClient,
			baseURL+TournamentServicePairRoundProcedure,
			connect.WithSchema(tournamentServiceMethods.ByName("PairRound")),
			connect.WithClientOptions(opts...),
		),
		setSingleRoundControls: connect.NewClient[tournament_service.SingleRoundControlsRequest, tournament_service.TournamentResponse](
			httpClient,
			baseURL+TournamentServiceSetSingleRoundControlsProcedure,
			connect.WithSchema(tournamentServiceMethods.ByName("SetSingleRoundControls")),
			connect.WithClientOptions(opts...),
		),
		setRoundControls: connect.NewClient[ipc.DivisionRoundControls, tournament_service.TournamentResponse](
			httpClient,
			baseURL+TournamentServiceSetRoundControlsProcedure,
			connect.WithSchema(tournamentServiceMethods.ByName("SetRoundControls")),
			connect.WithClientOptions(opts...),
		),
		setDivisionControls: connect.NewClient[ipc.DivisionControls, tournament_service.TournamentResponse](
			httpClient,
			baseURL+TournamentServiceSetDivisionControlsProcedure,
			connect.WithSchema(tournamentServiceMethods.ByName("SetDivisionControls")),
			connect.WithClientOptions(opts...),
		),
		addDirectors: connect.NewClient[ipc.TournamentPersons, tournament_service.TournamentResponse](
			httpClient,
			baseURL+TournamentServiceAddDirectorsProcedure,
			connect.WithSchema(tournamentServiceMethods.ByName("AddDirectors")),
			connect.WithClientOptions(opts...),
		),
		removeDirectors: connect.NewClient[ipc.TournamentPersons, tournament_service.TournamentResponse](
			httpClient,
			baseURL+TournamentServiceRemoveDirectorsProcedure,
			connect.WithSchema(tournamentServiceMethods.ByName("RemoveDirectors")),
			connect.WithClientOptions(opts...),
		),
		addDivision: connect.NewClient[tournament_service.TournamentDivisionRequest, tournament_service.TournamentResponse](
			httpClient,
			baseURL+TournamentServiceAddDivisionProcedure,
			connect.WithSchema(tournamentServiceMethods.ByName("AddDivision")),
			connect.WithClientOptions(opts...),
		),
		renameDivision: connect.NewClient[tournament_service.DivisionRenameRequest, tournament_service.TournamentResponse](
			httpClient,
			baseURL+TournamentServiceRenameDivisionProcedure,
			connect.WithSchema(tournamentServiceMethods.ByName("RenameDivision")),
			connect.WithClientOptions(opts...),
		),
		removeDivision: connect.NewClient[tournament_service.TournamentDivisionRequest, tournament_service.TournamentResponse](
			httpClient,
			baseURL+TournamentServiceRemoveDivisionProcedure,
			connect.WithSchema(tournamentServiceMethods.ByName("RemoveDivision")),
			connect.WithClientOptions(opts...),
		),
		addPlayers: connect.NewClient[ipc.TournamentPersons, tournament_service.TournamentResponse](
			httpClient,
			baseURL+TournamentServiceAddPlayersProcedure,
			connect.WithSchema(tournamentServiceMethods.ByName("AddPlayers")),
			connect.WithClientOptions(opts...),
		),
		removePlayers: connect.NewClient[ipc.TournamentPersons, tournament_service.TournamentResponse](
			httpClient,
			baseURL+TournamentServiceRemovePlayersProcedure,
			connect.WithSchema(tournamentServiceMethods.ByName("RemovePlayers")),
			connect.WithClientOptions(opts...),
		),
		movePlayer: connect.NewClient[tournament_service.MovePlayerRequest, tournament_service.TournamentResponse](
			httpClient,
			baseURL+TournamentServiceMovePlayerProcedure,
			connect.WithSchema(tournamentServiceMethods.ByName("MovePlayer")),
			connect.WithClientOptions(opts...),
		),
		setPairing: connect.NewClient[tournament_service.TournamentPairingsRequest, tournament_service.TournamentResponse](
			httpClient,
			baseURL+TournamentServiceSetPairingProcedure,
			connect.WithSchema(tournamentServiceMethods.ByName("SetPairing")),
			connect.WithClientOptions(opts...),
		),
		setResult: connect.NewClient[tournament_service.TournamentResultOverrideRequest, tournament_service.TournamentResponse](
			httpClient,
			baseURL+TournamentServiceSetResultProcedure,
			connect.WithSchema(tournamentServiceMethods.ByName("SetResult")),
			connect.WithClientOptions(opts...),
		),
		startRoundCountdown: connect.NewClient[tournament_service.TournamentStartRoundCountdownRequest, tournament_service.TournamentResponse](
			httpClient,
			baseURL+TournamentServiceStartRoundCountdownProcedure,
			connect.WithSchema(tournamentServiceMethods.ByName("StartRoundCountdown")),
			connect.WithClientOptions(opts...),
		),
		recentGames: connect.NewClient[tournament_service.RecentGamesRequest, tournament_service.RecentGamesResponse](
			httpClient,
			baseURL+TournamentServiceRecentGamesProcedure,
			connect.WithSchema(tournamentServiceMethods.ByName("RecentGames")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		createClubSession: connect.NewClient[tournament_service.NewClubSessionRequest, tournament_service.ClubSessionResponse](
			httpClient,
			baseURL+TournamentServiceCreateClubSessionProcedure,
			connect.WithSchema(tournamentServiceMethods.ByName("CreateClubSession")),
			connect.WithClientOptions(opts...),
		),
		getRecentClubSessions: connect.NewClient[tournament_service.RecentClubSessionsRequest, tournament_service.ClubSessionsResponse](
			httpClient,
			baseURL+TournamentServiceGetRecentClubSessionsProcedure,
			connect.WithSchema(tournamentServiceMethods.ByName("GetRecentClubSessions")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		unstartTournament: connect.NewClient[tournament_service.UnstartTournamentRequest, tournament_service.TournamentResponse](
			httpClient,
			baseURL+TournamentServiceUnstartTournamentProcedure,
			connect.WithSchema(tournamentServiceMethods.ByName("UnstartTournament")),
			connect.WithClientOptions(opts...),
		),
		openRegistration: connect.NewClient[tournament_service.OpenRegistrationRequest, tournament_service.TournamentResponse](
			httpClient,
			baseURL+TournamentServiceOpenRegistrationProcedure,
			connect.WithSchema(tournamentServiceMethods.ByName("OpenRegistration")),
			connect.WithClientOptions(opts...),
		),
		closeRegistration: connect.NewClient[tournament_service.CloseRegistrationRequest, tournament_service.TournamentResponse](
			httpClient,
			baseURL+TournamentServiceCloseRegistrationProcedure,
			connect.WithSchema(tournamentServiceMethods.ByName("CloseRegistration")),
			connect.WithClientOptions(opts...),
		),
		openCheckins: connect.NewClient[tournament_service.OpenCheckinsRequest, tournament_service.TournamentResponse](
			httpClient,
			baseURL+TournamentServiceOpenCheckinsProcedure,
			connect.WithSchema(tournamentServiceMethods.ByName("OpenCheckins")),
			connect.WithClientOptions(opts...),
		),
		closeCheckins: connect.NewClient[tournament_service.CloseCheckinsRequest, tournament_service.TournamentResponse](
			httpClient,
			baseURL+TournamentServiceCloseCheckinsProcedure,
			connect.WithSchema(tournamentServiceMethods.ByName("CloseCheckins")),
			connect.WithClientOptions(opts...),
		),
		uncheckAllIn: connect.NewClient[tournament_service.UncheckAllInRequest, tournament_service.TournamentResponse](
			httpClient,
			baseURL+TournamentServiceUncheckAllInProcedure,
			connect.WithSchema(tournamentServiceMethods.ByName("UncheckAllIn")),
			connect.WithClientOptions(opts...),
		),
		removeAllPlayersNotCheckedIn: connect.NewClient[tournament_service.RemoveAllPlayersNotCheckedInRequest, tournament_service.TournamentResponse](
			httpClient,
			baseURL+TournamentServiceRemoveAllPlayersNotCheckedInProcedure,
			connect.WithSchema(tournamentServiceMethods.ByName("RemoveAllPlayersNotCheckedIn")),
			connect.WithClientOptions(opts...),
		),
		checkIn: connect.NewClient[tournament_service.CheckinRequest, tournament_service.TournamentResponse](
			httpClient,
			baseURL+TournamentServiceCheckInProcedure,
			connect.WithSchema(tournamentServiceMethods.ByName("CheckIn")),
			connect.WithClientOptions(opts...),
		),
		register: connect.NewClient[tournament_service.RegisterRequest, tournament_service.TournamentResponse](
			httpClient,
			baseURL+TournamentServiceRegisterProcedure,
			connect.WithSchema(tournamentServiceMethods.ByName("Register")),
			connect.WithClientOptions(opts...),
		),
		exportTournament: connect.NewClient[tournament_service.ExportTournamentRequest, tournament_service.ExportTournamentResponse](
			httpClient,
			baseURL+TournamentServiceExportTournamentProcedure,
			connect.WithSchema(tournamentServiceMethods.ByName("ExportTournament")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		getTournamentScorecards: connect.NewClient[tournament_service.TournamentScorecardRequest, tournament_service.TournamentScorecardResponse](
			httpClient,
			baseURL+TournamentServiceGetTournamentScorecardsProcedure,
			connect.WithSchema(tournamentServiceMethods.ByName("GetTournamentScorecards")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		getRecentAndUpcomingTournaments: connect.NewClient[tournament_service.GetRecentAndUpcomingTournamentsRequest, tournament_service.GetRecentAndUpcomingTournamentsResponse](
			httpClient,
			baseURL+TournamentServiceGetRecentAndUpcomingTournamentsProcedure,
			connect.WithSchema(tournamentServiceMethods.ByName("GetRecentAndUpcomingTournaments")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		getPastTournaments: connect.NewClient[tournament_service.GetPastTournamentsRequest, tournament_service.GetPastTournamentsResponse](
			httpClient,
			baseURL+TournamentServiceGetPastTournamentsProcedure,
			connect.WithSchema(tournamentServiceMethods.ByName("GetPastTournaments")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		runCOP: connect.NewClient[tournament_service.RunCopRequest, ipc.PairResponse](
			httpClient,
			baseURL+TournamentServiceRunCOPProcedure,
			connect.WithSchema(tournamentServiceMethods.ByName("RunCOP")),
			connect.WithClientOptions(opts...),
		),
		initializeMonitoringKeys: connect.NewClient[tournament_service.InitializeMonitoringKeysRequest, tournament_service.TournamentResponse](
			httpClient,
			baseURL+TournamentServiceInitializeMonitoringKeysProcedure,
			connect.WithSchema(tournamentServiceMethods.ByName("InitializeMonitoringKeys")),
			connect.WithClientOptions(opts...),
		),
		requestMonitoringStream: connect.NewClient[tournament_service.RequestMonitoringStreamRequest, tournament_service.TournamentResponse](
			httpClient,
			baseURL+TournamentServiceRequestMonitoringStreamProcedure,
			connect.WithSchema(tournamentServiceMethods.ByName("RequestMonitoringStream")),
			connect.WithClientOptions(opts...),
		),
		resetMonitoringStream: connect.NewClient[tournament_service.ResetMonitoringStreamRequest, tournament_service.TournamentResponse](
			httpClient,
			baseURL+TournamentServiceResetMonitoringStreamProcedure,
			connect.WithSchema(tournamentServiceMethods.ByName("ResetMonitoringStream")),
			connect.WithClientOptions(opts...),
		),
		getTournamentMonitoring: connect.NewClient[tournament_service.GetTournamentMonitoringRequest, tournament_service.GetTournamentMonitoringResponse](
			httpClient,
			baseURL+TournamentServiceGetTournamentMonitoringProcedure,
			connect.WithSchema(tournamentServiceMethods.ByName("GetTournamentMonitoring")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
	}
}

// tournamentServiceClient implements TournamentServiceClient.
type tournamentServiceClient struct {
	newTournament                   *connect.Client[tournament_service.NewTournamentRequest, tournament_service.NewTournamentResponse]
	getTournamentMetadata           *connect.Client[tournament_service.GetTournamentMetadataRequest, tournament_service.TournamentMetadataResponse]
	getTournament                   *connect.Client[tournament_service.GetTournamentRequest, ipc.FullTournamentDivisions]
	unfinishTournament              *connect.Client[tournament_service.UnfinishTournamentRequest, tournament_service.TournamentResponse]
	finishTournament                *connect.Client[tournament_service.FinishTournamentRequest, tournament_service.TournamentResponse]
	setTournamentMetadata           *connect.Client[tournament_service.SetTournamentMetadataRequest, tournament_service.TournamentResponse]
	pairRound                       *connect.Client[tournament_service.PairRoundRequest, tournament_service.TournamentResponse]
	setSingleRoundControls          *connect.Client[tournament_service.SingleRoundControlsRequest, tournament_service.TournamentResponse]
	setRoundControls                *connect.Client[ipc.DivisionRoundControls, tournament_service.TournamentResponse]
	setDivisionControls             *connect.Client[ipc.DivisionControls, tournament_service.TournamentResponse]
	addDirectors                    *connect.Client[ipc.TournamentPersons, tournament_service.TournamentResponse]
	removeDirectors                 *connect.Client[ipc.TournamentPersons, tournament_service.TournamentResponse]
	addDivision                     *connect.Client[tournament_service.TournamentDivisionRequest, tournament_service.TournamentResponse]
	renameDivision                  *connect.Client[tournament_service.DivisionRenameRequest, tournament_service.TournamentResponse]
	removeDivision                  *connect.Client[tournament_service.TournamentDivisionRequest, tournament_service.TournamentResponse]
	addPlayers                      *connect.Client[ipc.TournamentPersons, tournament_service.TournamentResponse]
	removePlayers                   *connect.Client[ipc.TournamentPersons, tournament_service.TournamentResponse]
	movePlayer                      *connect.Client[tournament_service.MovePlayerRequest, tournament_service.TournamentResponse]
	setPairing                      *connect.Client[tournament_service.TournamentPairingsRequest, tournament_service.TournamentResponse]
	setResult                       *connect.Client[tournament_service.TournamentResultOverrideRequest, tournament_service.TournamentResponse]
	startRoundCountdown             *connect.Client[tournament_service.TournamentStartRoundCountdownRequest, tournament_service.TournamentResponse]
	recentGames                     *connect.Client[tournament_service.RecentGamesRequest, tournament_service.RecentGamesResponse]
	createClubSession               *connect.Client[tournament_service.NewClubSessionRequest, tournament_service.ClubSessionResponse]
	getRecentClubSessions           *connect.Client[tournament_service.RecentClubSessionsRequest, tournament_service.ClubSessionsResponse]
	unstartTournament               *connect.Client[tournament_service.UnstartTournamentRequest, tournament_service.TournamentResponse]
	openRegistration                *connect.Client[tournament_service.OpenRegistrationRequest, tournament_service.TournamentResponse]
	closeRegistration               *connect.Client[tournament_service.CloseRegistrationRequest, tournament_service.TournamentResponse]
	openCheckins                    *connect.Client[tournament_service.OpenCheckinsRequest, tournament_service.TournamentResponse]
	closeCheckins                   *connect.Client[tournament_service.CloseCheckinsRequest, tournament_service.TournamentResponse]
	uncheckAllIn                    *connect.Client[tournament_service.UncheckAllInRequest, tournament_service.TournamentResponse]
	removeAllPlayersNotCheckedIn    *connect.Client[tournament_service.RemoveAllPlayersNotCheckedInRequest, tournament_service.TournamentResponse]
	checkIn                         *connect.Client[tournament_service.CheckinRequest, tournament_service.TournamentResponse]
	register                        *connect.Client[tournament_service.RegisterRequest, tournament_service.TournamentResponse]
	exportTournament                *connect.Client[tournament_service.ExportTournamentRequest, tournament_service.ExportTournamentResponse]
	getTournamentScorecards         *connect.Client[tournament_service.TournamentScorecardRequest, tournament_service.TournamentScorecardResponse]
	getRecentAndUpcomingTournaments *connect.Client[tournament_service.GetRecentAndUpcomingTournamentsRequest, tournament_service.GetRecentAndUpcomingTournamentsResponse]
	getPastTournaments              *connect.Client[tournament_service.GetPastTournamentsRequest, tournament_service.GetPastTournamentsResponse]
	runCOP                          *connect.Client[tournament_service.RunCopRequest, ipc.PairResponse]
	initializeMonitoringKeys        *connect.Client[tournament_service.InitializeMonitoringKeysRequest, tournament_service.TournamentResponse]
	requestMonitoringStream         *connect.Client[tournament_service.RequestMonitoringStreamRequest, tournament_service.TournamentResponse]
	resetMonitoringStream           *connect.Client[tournament_service.ResetMonitoringStreamRequest, tournament_service.TournamentResponse]
	getTournamentMonitoring         *connect.Client[tournament_service.GetTournamentMonitoringRequest, tournament_service.GetTournamentMonitoringResponse]
}

// NewTournament calls tournament_service.TournamentService.NewTournament.
func (c *tournamentServiceClient) NewTournament(ctx context.Context, req *connect.Request[tournament_service.NewTournamentRequest]) (*connect.Response[tournament_service.NewTournamentResponse], error) {
	return c.newTournament.CallUnary(ctx, req)
}

// GetTournamentMetadata calls tournament_service.TournamentService.GetTournamentMetadata.
func (c *tournamentServiceClient) GetTournamentMetadata(ctx context.Context, req *connect.Request[tournament_service.GetTournamentMetadataRequest]) (*connect.Response[tournament_service.TournamentMetadataResponse], error) {
	return c.getTournamentMetadata.CallUnary(ctx, req)
}

// GetTournament calls tournament_service.TournamentService.GetTournament.
func (c *tournamentServiceClient) GetTournament(ctx context.Context, req *connect.Request[tournament_service.GetTournamentRequest]) (*connect.Response[ipc.FullTournamentDivisions], error) {
	return c.getTournament.CallUnary(ctx, req)
}

// UnfinishTournament calls tournament_service.TournamentService.UnfinishTournament.
func (c *tournamentServiceClient) UnfinishTournament(ctx context.Context, req *connect.Request[tournament_service.UnfinishTournamentRequest]) (*connect.Response[tournament_service.TournamentResponse], error) {
	return c.unfinishTournament.CallUnary(ctx, req)
}

// FinishTournament calls tournament_service.TournamentService.FinishTournament.
func (c *tournamentServiceClient) FinishTournament(ctx context.Context, req *connect.Request[tournament_service.FinishTournamentRequest]) (*connect.Response[tournament_service.TournamentResponse], error) {
	return c.finishTournament.CallUnary(ctx, req)
}

// SetTournamentMetadata calls tournament_service.TournamentService.SetTournamentMetadata.
func (c *tournamentServiceClient) SetTournamentMetadata(ctx context.Context, req *connect.Request[tournament_service.SetTournamentMetadataRequest]) (*connect.Response[tournament_service.TournamentResponse], error) {
	return c.setTournamentMetadata.CallUnary(ctx, req)
}

// PairRound calls tournament_service.TournamentService.PairRound.
func (c *tournamentServiceClient) PairRound(ctx context.Context, req *connect.Request[tournament_service.PairRoundRequest]) (*connect.Response[tournament_service.TournamentResponse], error) {
	return c.pairRound.CallUnary(ctx, req)
}

// SetSingleRoundControls calls tournament_service.TournamentService.SetSingleRoundControls.
func (c *tournamentServiceClient) SetSingleRoundControls(ctx context.Context, req *connect.Request[tournament_service.SingleRoundControlsRequest]) (*connect.Response[tournament_service.TournamentResponse], error) {
	return c.setSingleRoundControls.CallUnary(ctx, req)
}

// SetRoundControls calls tournament_service.TournamentService.SetRoundControls.
func (c *tournamentServiceClient) SetRoundControls(ctx context.Context, req *connect.Request[ipc.DivisionRoundControls]) (*connect.Response[tournament_service.TournamentResponse], error) {
	return c.setRoundControls.CallUnary(ctx, req)
}

// SetDivisionControls calls tournament_service.TournamentService.SetDivisionControls.
func (c *tournamentServiceClient) SetDivisionControls(ctx context.Context, req *connect.Request[ipc.DivisionControls]) (*connect.Response[tournament_service.TournamentResponse], error) {
	return c.setDivisionControls.CallUnary(ctx, req)
}

// AddDirectors calls tournament_service.TournamentService.AddDirectors.
func (c *tournamentServiceClient) AddDirectors(ctx context.Context, req *connect.Request[ipc.TournamentPersons]) (*connect.Response[tournament_service.TournamentResponse], error) {
	return c.addDirectors.CallUnary(ctx, req)
}

// RemoveDirectors calls tournament_service.TournamentService.RemoveDirectors.
func (c *tournamentServiceClient) RemoveDirectors(ctx context.Context, req *connect.Request[ipc.TournamentPersons]) (*connect.Response[tournament_service.TournamentResponse], error) {
	return c.removeDirectors.CallUnary(ctx, req)
}

// AddDivision calls tournament_service.TournamentService.AddDivision.
func (c *tournamentServiceClient) AddDivision(ctx context.Context, req *connect.Request[tournament_service.TournamentDivisionRequest]) (*connect.Response[tournament_service.TournamentResponse], error) {
	return c.addDivision.CallUnary(ctx, req)
}

// RenameDivision calls tournament_service.TournamentService.RenameDivision.
func (c *tournamentServiceClient) RenameDivision(ctx context.Context, req *connect.Request[tournament_service.DivisionRenameRequest]) (*connect.Response[tournament_service.TournamentResponse], error) {
	return c.renameDivision.CallUnary(ctx, req)
}

// RemoveDivision calls tournament_service.TournamentService.RemoveDivision.
func (c *tournamentServiceClient) RemoveDivision(ctx context.Context, req *connect.Request[tournament_service.TournamentDivisionRequest]) (*connect.Response[tournament_service.TournamentResponse], error) {
	return c.removeDivision.CallUnary(ctx, req)
}

// AddPlayers calls tournament_service.TournamentService.AddPlayers.
func (c *tournamentServiceClient) AddPlayers(ctx context.Context, req *connect.Request[ipc.TournamentPersons]) (*connect.Response[tournament_service.TournamentResponse], error) {
	return c.addPlayers.CallUnary(ctx, req)
}

// RemovePlayers calls tournament_service.TournamentService.RemovePlayers.
func (c *tournamentServiceClient) RemovePlayers(ctx context.Context, req *connect.Request[ipc.TournamentPersons]) (*connect.Response[tournament_service.TournamentResponse], error) {
	return c.removePlayers.CallUnary(ctx, req)
}

// MovePlayer calls tournament_service.TournamentService.MovePlayer.
func (c *tournamentServiceClient) MovePlayer(ctx context.Context, req *connect.Request[tournament_service.MovePlayerRequest]) (*connect.Response[tournament_service.TournamentResponse], error) {
	return c.movePlayer.CallUnary(ctx, req)
}

// SetPairing calls tournament_service.TournamentService.SetPairing.
func (c *tournamentServiceClient) SetPairing(ctx context.Context, req *connect.Request[tournament_service.TournamentPairingsRequest]) (*connect.Response[tournament_service.TournamentResponse], error) {
	return c.setPairing.CallUnary(ctx, req)
}

// SetResult calls tournament_service.TournamentService.SetResult.
func (c *tournamentServiceClient) SetResult(ctx context.Context, req *connect.Request[tournament_service.TournamentResultOverrideRequest]) (*connect.Response[tournament_service.TournamentResponse], error) {
	return c.setResult.CallUnary(ctx, req)
}

// StartRoundCountdown calls tournament_service.TournamentService.StartRoundCountdown.
func (c *tournamentServiceClient) StartRoundCountdown(ctx context.Context, req *connect.Request[tournament_service.TournamentStartRoundCountdownRequest]) (*connect.Response[tournament_service.TournamentResponse], error) {
	return c.startRoundCountdown.CallUnary(ctx, req)
}

// RecentGames calls tournament_service.TournamentService.RecentGames.
func (c *tournamentServiceClient) RecentGames(ctx context.Context, req *connect.Request[tournament_service.RecentGamesRequest]) (*connect.Response[tournament_service.RecentGamesResponse], error) {
	return c.recentGames.CallUnary(ctx, req)
}

// CreateClubSession calls tournament_service.TournamentService.CreateClubSession.
func (c *tournamentServiceClient) CreateClubSession(ctx context.Context, req *connect.Request[tournament_service.NewClubSessionRequest]) (*connect.Response[tournament_service.ClubSessionResponse], error) {
	return c.createClubSession.CallUnary(ctx, req)
}

// GetRecentClubSessions calls tournament_service.TournamentService.GetRecentClubSessions.
func (c *tournamentServiceClient) GetRecentClubSessions(ctx context.Context, req *connect.Request[tournament_service.RecentClubSessionsRequest]) (*connect.Response[tournament_service.ClubSessionsResponse], error) {
	return c.getRecentClubSessions.CallUnary(ctx, req)
}

// UnstartTournament calls tournament_service.TournamentService.UnstartTournament.
func (c *tournamentServiceClient) UnstartTournament(ctx context.Context, req *connect.Request[tournament_service.UnstartTournamentRequest]) (*connect.Response[tournament_service.TournamentResponse], error) {
	return c.unstartTournament.CallUnary(ctx, req)
}

// OpenRegistration calls tournament_service.TournamentService.OpenRegistration.
func (c *tournamentServiceClient) OpenRegistration(ctx context.Context, req *connect.Request[tournament_service.OpenRegistrationRequest]) (*connect.Response[tournament_service.TournamentResponse], error) {
	return c.openRegistration.CallUnary(ctx, req)
}

// CloseRegistration calls tournament_service.TournamentService.CloseRegistration.
func (c *tournamentServiceClient) CloseRegistration(ctx context.Context, req *connect.Request[tournament_service.CloseRegistrationRequest]) (*connect.Response[tournament_service.TournamentResponse], error) {
	return c.closeRegistration.CallUnary(ctx, req)
}

// OpenCheckins calls tournament_service.TournamentService.OpenCheckins.
func (c *tournamentServiceClient) OpenCheckins(ctx context.Context, req *connect.Request[tournament_service.OpenCheckinsRequest]) (*connect.Response[tournament_service.TournamentResponse], error) {
	return c.openCheckins.CallUnary(ctx, req)
}

// CloseCheckins calls tournament_service.TournamentService.CloseCheckins.
func (c *tournamentServiceClient) CloseCheckins(ctx context.Context, req *connect.Request[tournament_service.CloseCheckinsRequest]) (*connect.Response[tournament_service.TournamentResponse], error) {
	return c.closeCheckins.CallUnary(ctx, req)
}

// UncheckAllIn calls tournament_service.TournamentService.UncheckAllIn.
func (c *tournamentServiceClient) UncheckAllIn(ctx context.Context, req *connect.Request[tournament_service.UncheckAllInRequest]) (*connect.Response[tournament_service.TournamentResponse], error) {
	return c.uncheckAllIn.CallUnary(ctx, req)
}

// RemoveAllPlayersNotCheckedIn calls
// tournament_service.TournamentService.RemoveAllPlayersNotCheckedIn.
func (c *tournamentServiceClient) RemoveAllPlayersNotCheckedIn(ctx context.Context, req *connect.Request[tournament_service.RemoveAllPlayersNotCheckedInRequest]) (*connect.Response[tournament_service.TournamentResponse], error) {
	return c.removeAllPlayersNotCheckedIn.CallUnary(ctx, req)
}

// CheckIn calls tournament_service.TournamentService.CheckIn.
func (c *tournamentServiceClient) CheckIn(ctx context.Context, req *connect.Request[tournament_service.CheckinRequest]) (*connect.Response[tournament_service.TournamentResponse], error) {
	return c.checkIn.CallUnary(ctx, req)
}

// Register calls tournament_service.TournamentService.Register.
func (c *tournamentServiceClient) Register(ctx context.Context, req *connect.Request[tournament_service.RegisterRequest]) (*connect.Response[tournament_service.TournamentResponse], error) {
	return c.register.CallUnary(ctx, req)
}

// ExportTournament calls tournament_service.TournamentService.ExportTournament.
func (c *tournamentServiceClient) ExportTournament(ctx context.Context, req *connect.Request[tournament_service.ExportTournamentRequest]) (*connect.Response[tournament_service.ExportTournamentResponse], error) {
	return c.exportTournament.CallUnary(ctx, req)
}

// GetTournamentScorecards calls tournament_service.TournamentService.GetTournamentScorecards.
func (c *tournamentServiceClient) GetTournamentScorecards(ctx context.Context, req *connect.Request[tournament_service.TournamentScorecardRequest]) (*connect.Response[tournament_service.TournamentScorecardResponse], error) {
	return c.getTournamentScorecards.CallUnary(ctx, req)
}

// GetRecentAndUpcomingTournaments calls
// tournament_service.TournamentService.GetRecentAndUpcomingTournaments.
func (c *tournamentServiceClient) GetRecentAndUpcomingTournaments(ctx context.Context, req *connect.Request[tournament_service.GetRecentAndUpcomingTournamentsRequest]) (*connect.Response[tournament_service.GetRecentAndUpcomingTournamentsResponse], error) {
	return c.getRecentAndUpcomingTournaments.CallUnary(ctx, req)
}

// GetPastTournaments calls tournament_service.TournamentService.GetPastTournaments.
func (c *tournamentServiceClient) GetPastTournaments(ctx context.Context, req *connect.Request[tournament_service.GetPastTournamentsRequest]) (*connect.Response[tournament_service.GetPastTournamentsResponse], error) {
	return c.getPastTournaments.CallUnary(ctx, req)
}

// RunCOP calls tournament_service.TournamentService.RunCOP.
func (c *tournamentServiceClient) RunCOP(ctx context.Context, req *connect.Request[tournament_service.RunCopRequest]) (*connect.Response[ipc.PairResponse], error) {
	return c.runCOP.CallUnary(ctx, req)
}

// InitializeMonitoringKeys calls tournament_service.TournamentService.InitializeMonitoringKeys.
func (c *tournamentServiceClient) InitializeMonitoringKeys(ctx context.Context, req *connect.Request[tournament_service.InitializeMonitoringKeysRequest]) (*connect.Response[tournament_service.TournamentResponse], error) {
	return c.initializeMonitoringKeys.CallUnary(ctx, req)
}

// RequestMonitoringStream calls tournament_service.TournamentService.RequestMonitoringStream.
func (c *tournamentServiceClient) RequestMonitoringStream(ctx context.Context, req *connect.Request[tournament_service.RequestMonitoringStreamRequest]) (*connect.Response[tournament_service.TournamentResponse], error) {
	return c.requestMonitoringStream.CallUnary(ctx, req)
}

// ResetMonitoringStream calls tournament_service.TournamentService.ResetMonitoringStream.
func (c *tournamentServiceClient) ResetMonitoringStream(ctx context.Context, req *connect.Request[tournament_service.ResetMonitoringStreamRequest]) (*connect.Response[tournament_service.TournamentResponse], error) {
	return c.resetMonitoringStream.CallUnary(ctx, req)
}

// GetTournamentMonitoring calls tournament_service.TournamentService.GetTournamentMonitoring.
func (c *tournamentServiceClient) GetTournamentMonitoring(ctx context.Context, req *connect.Request[tournament_service.GetTournamentMonitoringRequest]) (*connect.Response[tournament_service.GetTournamentMonitoringResponse], error) {
	return c.getTournamentMonitoring.CallUnary(ctx, req)
}

// TournamentServiceHandler is an implementation of the tournament_service.TournamentService
// service.
type TournamentServiceHandler interface {
	NewTournament(context.Context, *connect.Request[tournament_service.NewTournamentRequest]) (*connect.Response[tournament_service.NewTournamentResponse], error)
	GetTournamentMetadata(context.Context, *connect.Request[tournament_service.GetTournamentMetadataRequest]) (*connect.Response[tournament_service.TournamentMetadataResponse], error)
	GetTournament(context.Context, *connect.Request[tournament_service.GetTournamentRequest]) (*connect.Response[ipc.FullTournamentDivisions], error)
	UnfinishTournament(context.Context, *connect.Request[tournament_service.UnfinishTournamentRequest]) (*connect.Response[tournament_service.TournamentResponse], error)
	FinishTournament(context.Context, *connect.Request[tournament_service.FinishTournamentRequest]) (*connect.Response[tournament_service.TournamentResponse], error)
	SetTournamentMetadata(context.Context, *connect.Request[tournament_service.SetTournamentMetadataRequest]) (*connect.Response[tournament_service.TournamentResponse], error)
	PairRound(context.Context, *connect.Request[tournament_service.PairRoundRequest]) (*connect.Response[tournament_service.TournamentResponse], error)
	SetSingleRoundControls(context.Context, *connect.Request[tournament_service.SingleRoundControlsRequest]) (*connect.Response[tournament_service.TournamentResponse], error)
	SetRoundControls(context.Context, *connect.Request[ipc.DivisionRoundControls]) (*connect.Response[tournament_service.TournamentResponse], error)
	SetDivisionControls(context.Context, *connect.Request[ipc.DivisionControls]) (*connect.Response[tournament_service.TournamentResponse], error)
	// Input to AddDirectors should be director usernames.
	AddDirectors(context.Context, *connect.Request[ipc.TournamentPersons]) (*connect.Response[tournament_service.TournamentResponse], error)
	// Input to RemoveDirectors should be director usernames.
	RemoveDirectors(context.Context, *connect.Request[ipc.TournamentPersons]) (*connect.Response[tournament_service.TournamentResponse], error)
	AddDivision(context.Context, *connect.Request[tournament_service.TournamentDivisionRequest]) (*connect.Response[tournament_service.TournamentResponse], error)
	RenameDivision(context.Context, *connect.Request[tournament_service.DivisionRenameRequest]) (*connect.Response[tournament_service.TournamentResponse], error)
	RemoveDivision(context.Context, *connect.Request[tournament_service.TournamentDivisionRequest]) (*connect.Response[tournament_service.TournamentResponse], error)
	// Input to AddPlayers should be player usernames
	AddPlayers(context.Context, *connect.Request[ipc.TournamentPersons]) (*connect.Response[tournament_service.TournamentResponse], error)
	// Input to RemovePlayers should be player usernames
	RemovePlayers(context.Context, *connect.Request[ipc.TournamentPersons]) (*connect.Response[tournament_service.TournamentResponse], error)
	// MovePlayer moves a player from one division to another
	MovePlayer(context.Context, *connect.Request[tournament_service.MovePlayerRequest]) (*connect.Response[tournament_service.TournamentResponse], error)
	SetPairing(context.Context, *connect.Request[tournament_service.TournamentPairingsRequest]) (*connect.Response[tournament_service.TournamentResponse], error)
	SetResult(context.Context, *connect.Request[tournament_service.TournamentResultOverrideRequest]) (*connect.Response[tournament_service.TournamentResponse], error)
	StartRoundCountdown(context.Context, *connect.Request[tournament_service.TournamentStartRoundCountdownRequest]) (*connect.Response[tournament_service.TournamentResponse], error)
	RecentGames(context.Context, *connect.Request[tournament_service.RecentGamesRequest]) (*connect.Response[tournament_service.RecentGamesResponse], error)
	CreateClubSession(context.Context, *connect.Request[tournament_service.NewClubSessionRequest]) (*connect.Response[tournament_service.ClubSessionResponse], error)
	GetRecentClubSessions(context.Context, *connect.Request[tournament_service.RecentClubSessionsRequest]) (*connect.Response[tournament_service.ClubSessionsResponse], error)
	UnstartTournament(context.Context, *connect.Request[tournament_service.UnstartTournamentRequest]) (*connect.Response[tournament_service.TournamentResponse], error)
	OpenRegistration(context.Context, *connect.Request[tournament_service.OpenRegistrationRequest]) (*connect.Response[tournament_service.TournamentResponse], error)
	CloseRegistration(context.Context, *connect.Request[tournament_service.CloseRegistrationRequest]) (*connect.Response[tournament_service.TournamentResponse], error)
	OpenCheckins(context.Context, *connect.Request[tournament_service.OpenCheckinsRequest]) (*connect.Response[tournament_service.TournamentResponse], error)
	CloseCheckins(context.Context, *connect.Request[tournament_service.CloseCheckinsRequest]) (*connect.Response[tournament_service.TournamentResponse], error)
	// Uncheck everyone in. Use this some time before the beginning of a session.
	UncheckAllIn(context.Context, *connect.Request[tournament_service.UncheckAllInRequest]) (*connect.Response[tournament_service.TournamentResponse], error)
	RemoveAllPlayersNotCheckedIn(context.Context, *connect.Request[tournament_service.RemoveAllPlayersNotCheckedInRequest]) (*connect.Response[tournament_service.TournamentResponse], error)
	// CheckIn allows players to check themselves in.
	CheckIn(context.Context, *connect.Request[tournament_service.CheckinRequest]) (*connect.Response[tournament_service.TournamentResponse], error)
	Register(context.Context, *connect.Request[tournament_service.RegisterRequest]) (*connect.Response[tournament_service.TournamentResponse], error)
	ExportTournament(context.Context, *connect.Request[tournament_service.ExportTournamentRequest]) (*connect.Response[tournament_service.ExportTournamentResponse], error)
	GetTournamentScorecards(context.Context, *connect.Request[tournament_service.TournamentScorecardRequest]) (*connect.Response[tournament_service.TournamentScorecardResponse], error)
	GetRecentAndUpcomingTournaments(context.Context, *connect.Request[tournament_service.GetRecentAndUpcomingTournamentsRequest]) (*connect.Response[tournament_service.GetRecentAndUpcomingTournamentsResponse], error)
	GetPastTournaments(context.Context, *connect.Request[tournament_service.GetPastTournamentsRequest]) (*connect.Response[tournament_service.GetPastTournamentsResponse], error)
	RunCOP(context.Context, *connect.Request[tournament_service.RunCopRequest]) (*connect.Response[ipc.PairResponse], error)
	// Monitoring/invigilation endpoints
	InitializeMonitoringKeys(context.Context, *connect.Request[tournament_service.InitializeMonitoringKeysRequest]) (*connect.Response[tournament_service.TournamentResponse], error)
	RequestMonitoringStream(context.Context, *connect.Request[tournament_service.RequestMonitoringStreamRequest]) (*connect.Response[tournament_service.TournamentResponse], error)
	ResetMonitoringStream(context.Context, *connect.Request[tournament_service.ResetMonitoringStreamRequest]) (*connect.Response[tournament_service.TournamentResponse], error)
	GetTournamentMonitoring(context.Context, *connect.Request[tournament_service.GetTournamentMonitoringRequest]) (*connect.Response[tournament_service.GetTournamentMonitoringResponse], error)
}

// NewTournamentServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTournamentServiceHandler(svc TournamentServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	tournamentServiceMethods := tournament_service.File_proto_tournament_service_tournament_service_proto.Services().ByName("TournamentService").Methods()
	tournamentServiceNewTournamentHandler := connect.NewUnaryHandler(
		TournamentServiceNewTournamentProcedure,
		svc.NewTournament,
		connect.WithSchema(tournamentServiceMethods.ByName("NewTournament")),
		connect.WithHandlerOptions(opts...),
	)
	tournamentServiceGetTournamentMetadataHandler := connect.NewUnaryHandler(
		TournamentServiceGetTournamentMetadataProcedure,
		svc.GetTournamentMetadata,
		connect.WithSchema(tournamentServiceMethods.ByName("GetTournamentMetadata")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	tournamentServiceGetTournamentHandler := connect.NewUnaryHandler(
		TournamentServiceGetTournamentProcedure,
		svc.GetTournament,
		connect.WithSchema(tournamentServiceMethods.ByName("GetTournament")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	tournamentServiceUnfinishTournamentHandler := connect.NewUnaryHandler(
		TournamentServiceUnfinishTournamentProcedure,
		svc.UnfinishTournament,
		connect.WithSchema(tournamentServiceMethods.ByName("UnfinishTournament")),
		connect.WithHandlerOptions(opts...),
	)
	tournamentServiceFinishTournamentHandler := connect.NewUnaryHandler(
		TournamentServiceFinishTournamentProcedure,
		svc.FinishTournament,
		connect.WithSchema(tournamentServiceMethods.ByName("FinishTournament")),
		connect.WithHandlerOptions(opts...),
	)
	tournamentServiceSetTournamentMetadataHandler := connect.NewUnaryHandler(
		TournamentServiceSetTournamentMetadataProcedure,
		svc.SetTournamentMetadata,
		connect.WithSchema(tournamentServiceMethods.ByName("SetTournamentMetadata")),
		connect.WithHandlerOptions(opts...),
	)
	tournamentServicePairRoundHandler := connect.NewUnaryHandler(
		TournamentServicePairRoundProcedure,
		svc.PairRound,
		connect.WithSchema(tournamentServiceMethods.ByName("PairRound")),
		connect.WithHandlerOptions(opts...),
	)
	tournamentServiceSetSingleRoundControlsHandler := connect.NewUnaryHandler(
		TournamentServiceSetSingleRoundControlsProcedure,
		svc.SetSingleRoundControls,
		connect.WithSchema(tournamentServiceMethods.ByName("SetSingleRoundControls")),
		connect.WithHandlerOptions(opts...),
	)
	tournamentServiceSetRoundControlsHandler := connect.NewUnaryHandler(
		TournamentServiceSetRoundControlsProcedure,
		svc.SetRoundControls,
		connect.WithSchema(tournamentServiceMethods.ByName("SetRoundControls")),
		connect.WithHandlerOptions(opts...),
	)
	tournamentServiceSetDivisionControlsHandler := connect.NewUnaryHandler(
		TournamentServiceSetDivisionControlsProcedure,
		svc.SetDivisionControls,
		connect.WithSchema(tournamentServiceMethods.ByName("SetDivisionControls")),
		connect.WithHandlerOptions(opts...),
	)
	tournamentServiceAddDirectorsHandler := connect.NewUnaryHandler(
		TournamentServiceAddDirectorsProcedure,
		svc.AddDirectors,
		connect.WithSchema(tournamentServiceMethods.ByName("AddDirectors")),
		connect.WithHandlerOptions(opts...),
	)
	tournamentServiceRemoveDirectorsHandler := connect.NewUnaryHandler(
		TournamentServiceRemoveDirectorsProcedure,
		svc.RemoveDirectors,
		connect.WithSchema(tournamentServiceMethods.ByName("RemoveDirectors")),
		connect.WithHandlerOptions(opts...),
	)
	tournamentServiceAddDivisionHandler := connect.NewUnaryHandler(
		TournamentServiceAddDivisionProcedure,
		svc.AddDivision,
		connect.WithSchema(tournamentServiceMethods.ByName("AddDivision")),
		connect.WithHandlerOptions(opts...),
	)
	tournamentServiceRenameDivisionHandler := connect.NewUnaryHandler(
		TournamentServiceRenameDivisionProcedure,
		svc.RenameDivision,
		connect.WithSchema(tournamentServiceMethods.ByName("RenameDivision")),
		connect.WithHandlerOptions(opts...),
	)
	tournamentServiceRemoveDivisionHandler := connect.NewUnaryHandler(
		TournamentServiceRemoveDivisionProcedure,
		svc.RemoveDivision,
		connect.WithSchema(tournamentServiceMethods.ByName("RemoveDivision")),
		connect.WithHandlerOptions(opts...),
	)
	tournamentServiceAddPlayersHandler := connect.NewUnaryHandler(
		TournamentServiceAddPlayersProcedure,
		svc.AddPlayers,
		connect.WithSchema(tournamentServiceMethods.ByName("AddPlayers")),
		connect.WithHandlerOptions(opts...),
	)
	tournamentServiceRemovePlayersHandler := connect.NewUnaryHandler(
		TournamentServiceRemovePlayersProcedure,
		svc.RemovePlayers,
		connect.WithSchema(tournamentServiceMethods.ByName("RemovePlayers")),
		connect.WithHandlerOptions(opts...),
	)
	tournamentServiceMovePlayerHandler := connect.NewUnaryHandler(
		TournamentServiceMovePlayerProcedure,
		svc.MovePlayer,
		connect.WithSchema(tournamentServiceMethods.ByName("MovePlayer")),
		connect.WithHandlerOptions(opts...),
	)
	tournamentServiceSetPairingHandler := connect.NewUnaryHandler(
		TournamentServiceSetPairingProcedure,
		svc.SetPairing,
		connect.WithSchema(tournamentServiceMethods.ByName("SetPairing")),
		connect.WithHandlerOptions(opts...),
	)
	tournamentServiceSetResultHandler := connect.NewUnaryHandler(
		TournamentServiceSetResultProcedure,
		svc.SetResult,
		connect.WithSchema(tournamentServiceMethods.ByName("SetResult")),
		connect.WithHandlerOptions(opts...),
	)
	tournamentServiceStartRoundCountdownHandler := connect.NewUnaryHandler(
		TournamentServiceStartRoundCountdownProcedure,
		svc.StartRoundCountdown,
		connect.WithSchema(tournamentServiceMethods.ByName("StartRoundCountdown")),
		connect.WithHandlerOptions(opts...),
	)
	tournamentServiceRecentGamesHandler := connect.NewUnaryHandler(
		TournamentServiceRecentGamesProcedure,
		svc.RecentGames,
		connect.WithSchema(tournamentServiceMethods.ByName("RecentGames")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	tournamentServiceCreateClubSessionHandler := connect.NewUnaryHandler(
		TournamentServiceCreateClubSessionProcedure,
		svc.CreateClubSession,
		connect.WithSchema(tournamentServiceMethods.ByName("CreateClubSession")),
		connect.WithHandlerOptions(opts...),
	)
	tournamentServiceGetRecentClubSessionsHandler := connect.NewUnaryHandler(
		TournamentServiceGetRecentClubSessionsProcedure,
		svc.GetRecentClubSessions,
		connect.WithSchema(tournamentServiceMethods.ByName("GetRecentClubSessions")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	tournamentServiceUnstartTournamentHandler := connect.NewUnaryHandler(
		TournamentServiceUnstartTournamentProcedure,
		svc.UnstartTournament,
		connect.WithSchema(tournamentServiceMethods.ByName("UnstartTournament")),
		connect.WithHandlerOptions(opts...),
	)
	tournamentServiceOpenRegistrationHandler := connect.NewUnaryHandler(
		TournamentServiceOpenRegistrationProcedure,
		svc.OpenRegistration,
		connect.WithSchema(tournamentServiceMethods.ByName("OpenRegistration")),
		connect.WithHandlerOptions(opts...),
	)
	tournamentServiceCloseRegistrationHandler := connect.NewUnaryHandler(
		TournamentServiceCloseRegistrationProcedure,
		svc.CloseRegistration,
		connect.WithSchema(tournamentServiceMethods.ByName("CloseRegistration")),
		connect.WithHandlerOptions(opts...),
	)
	tournamentServiceOpenCheckinsHandler := connect.NewUnaryHandler(
		TournamentServiceOpenCheckinsProcedure,
		svc.OpenCheckins,
		connect.WithSchema(tournamentServiceMethods.ByName("OpenCheckins")),
		connect.WithHandlerOptions(opts...),
	)
	tournamentServiceCloseCheckinsHandler := connect.NewUnaryHandler(
		TournamentServiceCloseCheckinsProcedure,
		svc.CloseCheckins,
		connect.WithSchema(tournamentServiceMethods.ByName("CloseCheckins")),
		connect.WithHandlerOptions(opts...),
	)
	tournamentServiceUncheckAllInHandler := connect.NewUnaryHandler(
		TournamentServiceUncheckAllInProcedure,
		svc.UncheckAllIn,
		connect.WithSchema(tournamentServiceMethods.ByName("UncheckAllIn")),
		connect.WithHandlerOptions(opts...),
	)
	tournamentServiceRemoveAllPlayersNotCheckedInHandler := connect.NewUnaryHandler(
		TournamentServiceRemoveAllPlayersNotCheckedInProcedure,
		svc.RemoveAllPlayersNotCheckedIn,
		connect.WithSchema(tournamentServiceMethods.ByName("RemoveAllPlayersNotCheckedIn")),
		connect.WithHandlerOptions(opts...),
	)
	tournamentServiceCheckInHandler := connect.NewUnaryHandler(
		TournamentServiceCheckInProcedure,
		svc.CheckIn,
		connect.WithSchema(tournamentServiceMethods.ByName("CheckIn")),
		connect.WithHandlerOptions(opts...),
	)
	tournamentServiceRegisterHandler := connect.NewUnaryHandler(
		TournamentServiceRegisterProcedure,
		svc.Register,
		connect.WithSchema(tournamentServiceMethods.ByName("Register")),
		connect.WithHandlerOptions(opts...),
	)
	tournamentServiceExportTournamentHandler := connect.NewUnaryHandler(
		TournamentServiceExportTournamentProcedure,
		svc.ExportTournament,
		connect.WithSchema(tournamentServiceMethods.ByName("ExportTournament")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	tournamentServiceGetTournamentScorecardsHandler := connect.NewUnaryHandler(
		TournamentServiceGetTournamentScorecardsProcedure,
		svc.GetTournamentScorecards,
		connect.WithSchema(tournamentServiceMethods.ByName("GetTournamentScorecards")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	tournamentServiceGetRecentAndUpcomingTournamentsHandler := connect.NewUnaryHandler(
		TournamentServiceGetRecentAndUpcomingTournamentsProcedure,
		svc.GetRecentAndUpcomingTournaments,
		connect.WithSchema(tournamentServiceMethods.ByName("GetRecentAndUpcomingTournaments")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	tournamentServiceGetPastTournamentsHandler := connect.NewUnaryHandler(
		TournamentServiceGetPastTournamentsProcedure,
		svc.GetPastTournaments,
		connect.WithSchema(tournamentServiceMethods.ByName("GetPastTournaments")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	tournamentServiceRunCOPHandler := connect.NewUnaryHandler(
		TournamentServiceRunCOPProcedure,
		svc.RunCOP,
		connect.WithSchema(tournamentServiceMethods.ByName("RunCOP")),
		connect.WithHandlerOptions(opts...),
	)
	tournamentServiceInitializeMonitoringKeysHandler := connect.NewUnaryHandler(
		TournamentServiceInitializeMonitoringKeysProcedure,
		svc.InitializeMonitoringKeys,
		connect.WithSchema(tournamentServiceMethods.ByName("InitializeMonitoringKeys")),
		connect.WithHandlerOptions(opts...),
	)
	tournamentServiceRequestMonitoringStreamHandler := connect.NewUnaryHandler(
		TournamentServiceRequestMonitoringStreamProcedure,
		svc.RequestMonitoringStream,
		connect.WithSchema(tournamentServiceMethods.ByName("RequestMonitoringStream")),
		connect.WithHandlerOptions(opts...),
	)
	tournamentServiceResetMonitoringStreamHandler := connect.NewUnaryHandler(
		TournamentServiceResetMonitoringStreamProcedure,
		svc.ResetMonitoringStream,
		connect.WithSchema(tournamentServiceMethods.ByName("ResetMonitoringStream")),
		connect.WithHandlerOptions(opts...),
	)
	tournamentServiceGetTournamentMonitoringHandler := connect.NewUnaryHandler(
		TournamentServiceGetTournamentMonitoringProcedure,
		svc.GetTournamentMonitoring,
		connect.WithSchema(tournamentServiceMethods.ByName("GetTournamentMonitoring")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	return "/tournament_service.TournamentService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TournamentServiceNewTournamentProcedure:
			tournamentServiceNewTournamentHandler.ServeHTTP(w, r)
		case TournamentServiceGetTournamentMetadataProcedure:
			tournamentServiceGetTournamentMetadataHandler.ServeHTTP(w, r)
		case TournamentServiceGetTournamentProcedure:
			tournamentServiceGetTournamentHandler.ServeHTTP(w, r)
		case TournamentServiceUnfinishTournamentProcedure:
			tournamentServiceUnfinishTournamentHandler.ServeHTTP(w, r)
		case TournamentServiceFinishTournamentProcedure:
			tournamentServiceFinishTournamentHandler.ServeHTTP(w, r)
		case TournamentServiceSetTournamentMetadataProcedure:
			tournamentServiceSetTournamentMetadataHandler.ServeHTTP(w, r)
		case TournamentServicePairRoundProcedure:
			tournamentServicePairRoundHandler.ServeHTTP(w, r)
		case TournamentServiceSetSingleRoundControlsProcedure:
			tournamentServiceSetSingleRoundControlsHandler.ServeHTTP(w, r)
		case TournamentServiceSetRoundControlsProcedure:
			tournamentServiceSetRoundControlsHandler.ServeHTTP(w, r)
		case TournamentServiceSetDivisionControlsProcedure:
			tournamentServiceSetDivisionControlsHandler.ServeHTTP(w, r)
		case TournamentServiceAddDirectorsProcedure:
			tournamentServiceAddDirectorsHandler.ServeHTTP(w, r)
		case TournamentServiceRemoveDirectorsProcedure:
			tournamentServiceRemoveDirectorsHandler.ServeHTTP(w, r)
		case TournamentServiceAddDivisionProcedure:
			tournamentServiceAddDivisionHandler.ServeHTTP(w, r)
		case TournamentServiceRenameDivisionProcedure:
			tournamentServiceRenameDivisionHandler.ServeHTTP(w, r)
		case TournamentServiceRemoveDivisionProcedure:
			tournamentServiceRemoveDivisionHandler.ServeHTTP(w, r)
		case TournamentServiceAddPlayersProcedure:
			tournamentServiceAddPlayersHandler.ServeHTTP(w, r)
		case TournamentServiceRemovePlayersProcedure:
			tournamentServiceRemovePlayersHandler.ServeHTTP(w, r)
		case TournamentServiceMovePlayerProcedure:
			tournamentServiceMovePlayerHandler.ServeHTTP(w, r)
		case TournamentServiceSetPairingProcedure:
			tournamentServiceSetPairingHandler.ServeHTTP(w, r)
		case TournamentServiceSetResultProcedure:
			tournamentServiceSetResultHandler.ServeHTTP(w, r)
		case TournamentServiceStartRoundCountdownProcedure:
			tournamentServiceStartRoundCountdownHandler.ServeHTTP(w, r)
		case TournamentServiceRecentGamesProcedure:
			tournamentServiceRecentGamesHandler.ServeHTTP(w, r)
		case TournamentServiceCreateClubSessionProcedure:
			tournamentServiceCreateClubSessionHandler.ServeHTTP(w, r)
		case TournamentServiceGetRecentClubSessionsProcedure:
			tournamentServiceGetRecentClubSessionsHandler.ServeHTTP(w, r)
		case TournamentServiceUnstartTournamentProcedure:
			tournamentServiceUnstartTournamentHandler.ServeHTTP(w, r)
		case TournamentServiceOpenRegistrationProcedure:
			tournamentServiceOpenRegistrationHandler.ServeHTTP(w, r)
		case TournamentServiceCloseRegistrationProcedure:
			tournamentServiceCloseRegistrationHandler.ServeHTTP(w, r)
		case TournamentServiceOpenCheckinsProcedure:
			tournamentServiceOpenCheckinsHandler.ServeHTTP(w, r)
		case TournamentServiceCloseCheckinsProcedure:
			tournamentServiceCloseCheckinsHandler.ServeHTTP(w, r)
		case TournamentServiceUncheckAllInProcedure:
			tournamentServiceUncheckAllInHandler.ServeHTTP(w, r)
		case TournamentServiceRemoveAllPlayersNotCheckedInProcedure:
			tournamentServiceRemoveAllPlayersNotCheckedInHandler.ServeHTTP(w, r)
		case TournamentServiceCheckInProcedure:
			tournamentServiceCheckInHandler.ServeHTTP(w, r)
		case TournamentServiceRegisterProcedure:
			tournamentServiceRegisterHandler.ServeHTTP(w, r)
		case TournamentServiceExportTournamentProcedure:
			tournamentServiceExportTournamentHandler.ServeHTTP(w, r)
		case TournamentServiceGetTournamentScorecardsProcedure:
			tournamentServiceGetTournamentScorecardsHandler.ServeHTTP(w, r)
		case TournamentServiceGetRecentAndUpcomingTournamentsProcedure:
			tournamentServiceGetRecentAndUpcomingTournamentsHandler.ServeHTTP(w, r)
		case TournamentServiceGetPastTournamentsProcedure:
			tournamentServiceGetPastTournamentsHandler.ServeHTTP(w, r)
		case TournamentServiceRunCOPProcedure:
			tournamentServiceRunCOPHandler.ServeHTTP(w, r)
		case TournamentServiceInitializeMonitoringKeysProcedure:
			tournamentServiceInitializeMonitoringKeysHandler.ServeHTTP(w, r)
		case TournamentServiceRequestMonitoringStreamProcedure:
			tournamentServiceRequestMonitoringStreamHandler.ServeHTTP(w, r)
		case TournamentServiceResetMonitoringStreamProcedure:
			tournamentServiceResetMonitoringStreamHandler.ServeHTTP(w, r)
		case TournamentServiceGetTournamentMonitoringProcedure:
			tournamentServiceGetTournamentMonitoringHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTournamentServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTournamentServiceHandler struct{}

func (UnimplementedTournamentServiceHandler) NewTournament(context.Context, *connect.Request[tournament_service.NewTournamentRequest]) (*connect.Response[tournament_service.NewTournamentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tournament_service.TournamentService.NewTournament is not implemented"))
}

func (UnimplementedTournamentServiceHandler) GetTournamentMetadata(context.Context, *connect.Request[tournament_service.GetTournamentMetadataRequest]) (*connect.Response[tournament_service.TournamentMetadataResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tournament_service.TournamentService.GetTournamentMetadata is not implemented"))
}

func (UnimplementedTournamentServiceHandler) GetTournament(context.Context, *connect.Request[tournament_service.GetTournamentRequest]) (*connect.Response[ipc.FullTournamentDivisions], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tournament_service.TournamentService.GetTournament is not implemented"))
}

func (UnimplementedTournamentServiceHandler) UnfinishTournament(context.Context, *connect.Request[tournament_service.UnfinishTournamentRequest]) (*connect.Response[tournament_service.TournamentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tournament_service.TournamentService.UnfinishTournament is not implemented"))
}

func (UnimplementedTournamentServiceHandler) FinishTournament(context.Context, *connect.Request[tournament_service.FinishTournamentRequest]) (*connect.Response[tournament_service.TournamentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tournament_service.TournamentService.FinishTournament is not implemented"))
}

func (UnimplementedTournamentServiceHandler) SetTournamentMetadata(context.Context, *connect.Request[tournament_service.SetTournamentMetadataRequest]) (*connect.Response[tournament_service.TournamentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tournament_service.TournamentService.SetTournamentMetadata is not implemented"))
}

func (UnimplementedTournamentServiceHandler) PairRound(context.Context, *connect.Request[tournament_service.PairRoundRequest]) (*connect.Response[tournament_service.TournamentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tournament_service.TournamentService.PairRound is not implemented"))
}

func (UnimplementedTournamentServiceHandler) SetSingleRoundControls(context.Context, *connect.Request[tournament_service.SingleRoundControlsRequest]) (*connect.Response[tournament_service.TournamentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tournament_service.TournamentService.SetSingleRoundControls is not implemented"))
}

func (UnimplementedTournamentServiceHandler) SetRoundControls(context.Context, *connect.Request[ipc.DivisionRoundControls]) (*connect.Response[tournament_service.TournamentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tournament_service.TournamentService.SetRoundControls is not implemented"))
}

func (UnimplementedTournamentServiceHandler) SetDivisionControls(context.Context, *connect.Request[ipc.DivisionControls]) (*connect.Response[tournament_service.TournamentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tournament_service.TournamentService.SetDivisionControls is not implemented"))
}

func (UnimplementedTournamentServiceHandler) AddDirectors(context.Context, *connect.Request[ipc.TournamentPersons]) (*connect.Response[tournament_service.TournamentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tournament_service.TournamentService.AddDirectors is not implemented"))
}

func (UnimplementedTournamentServiceHandler) RemoveDirectors(context.Context, *connect.Request[ipc.TournamentPersons]) (*connect.Response[tournament_service.TournamentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tournament_service.TournamentService.RemoveDirectors is not implemented"))
}

func (UnimplementedTournamentServiceHandler) AddDivision(context.Context, *connect.Request[tournament_service.TournamentDivisionRequest]) (*connect.Response[tournament_service.TournamentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tournament_service.TournamentService.AddDivision is not implemented"))
}

func (UnimplementedTournamentServiceHandler) RenameDivision(context.Context, *connect.Request[tournament_service.DivisionRenameRequest]) (*connect.Response[tournament_service.TournamentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tournament_service.TournamentService.RenameDivision is not implemented"))
}

func (UnimplementedTournamentServiceHandler) RemoveDivision(context.Context, *connect.Request[tournament_service.TournamentDivisionRequest]) (*connect.Response[tournament_service.TournamentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tournament_service.TournamentService.RemoveDivision is not implemented"))
}

func (UnimplementedTournamentServiceHandler) AddPlayers(context.Context, *connect.Request[ipc.TournamentPersons]) (*connect.Response[tournament_service.TournamentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tournament_service.TournamentService.AddPlayers is not implemented"))
}

func (UnimplementedTournamentServiceHandler) RemovePlayers(context.Context, *connect.Request[ipc.TournamentPersons]) (*connect.Response[tournament_service.TournamentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tournament_service.TournamentService.RemovePlayers is not implemented"))
}

func (UnimplementedTournamentServiceHandler) MovePlayer(context.Context, *connect.Request[tournament_service.MovePlayerRequest]) (*connect.Response[tournament_service.TournamentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tournament_service.TournamentService.MovePlayer is not implemented"))
}

func (UnimplementedTournamentServiceHandler) SetPairing(context.Context, *connect.Request[tournament_service.TournamentPairingsRequest]) (*connect.Response[tournament_service.TournamentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tournament_service.TournamentService.SetPairing is not implemented"))
}

func (UnimplementedTournamentServiceHandler) SetResult(context.Context, *connect.Request[tournament_service.TournamentResultOverrideRequest]) (*connect.Response[tournament_service.TournamentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tournament_service.TournamentService.SetResult is not implemented"))
}

func (UnimplementedTournamentServiceHandler) StartRoundCountdown(context.Context, *connect.Request[tournament_service.TournamentStartRoundCountdownRequest]) (*connect.Response[tournament_service.TournamentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tournament_service.TournamentService.StartRoundCountdown is not implemented"))
}

func (UnimplementedTournamentServiceHandler) RecentGames(context.Context, *connect.Request[tournament_service.RecentGamesRequest]) (*connect.Response[tournament_service.RecentGamesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tournament_service.TournamentService.RecentGames is not implemented"))
}

func (UnimplementedTournamentServiceHandler) CreateClubSession(context.Context, *connect.Request[tournament_service.NewClubSessionRequest]) (*connect.Response[tournament_service.ClubSessionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tournament_service.TournamentService.CreateClubSession is not implemented"))
}

func (UnimplementedTournamentServiceHandler) GetRecentClubSessions(context.Context, *connect.Request[tournament_service.RecentClubSessionsRequest]) (*connect.Response[tournament_service.ClubSessionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tournament_service.TournamentService.GetRecentClubSessions is not implemented"))
}

func (UnimplementedTournamentServiceHandler) UnstartTournament(context.Context, *connect.Request[tournament_service.UnstartTournamentRequest]) (*connect.Response[tournament_service.TournamentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tournament_service.TournamentService.UnstartTournament is not implemented"))
}

func (UnimplementedTournamentServiceHandler) OpenRegistration(context.Context, *connect.Request[tournament_service.OpenRegistrationRequest]) (*connect.Response[tournament_service.TournamentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tournament_service.TournamentService.OpenRegistration is not implemented"))
}

func (UnimplementedTournamentServiceHandler) CloseRegistration(context.Context, *connect.Request[tournament_service.CloseRegistrationRequest]) (*connect.Response[tournament_service.TournamentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tournament_service.TournamentService.CloseRegistration is not implemented"))
}

func (UnimplementedTournamentServiceHandler) OpenCheckins(context.Context, *connect.Request[tournament_service.OpenCheckinsRequest]) (*connect.Response[tournament_service.TournamentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tournament_service.TournamentService.OpenCheckins is not implemented"))
}

func (UnimplementedTournamentServiceHandler) CloseCheckins(context.Context, *connect.Request[tournament_service.CloseCheckinsRequest]) (*connect.Response[tournament_service.TournamentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tournament_service.TournamentService.CloseCheckins is not implemented"))
}

func (UnimplementedTournamentServiceHandler) UncheckAllIn(context.Context, *connect.Request[tournament_service.UncheckAllInRequest]) (*connect.Response[tournament_service.TournamentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tournament_service.TournamentService.UncheckAllIn is not implemented"))
}

func (UnimplementedTournamentServiceHandler) RemoveAllPlayersNotCheckedIn(context.Context, *connect.Request[tournament_service.RemoveAllPlayersNotCheckedInRequest]) (*connect.Response[tournament_service.TournamentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tournament_service.TournamentService.RemoveAllPlayersNotCheckedIn is not implemented"))
}

func (UnimplementedTournamentServiceHandler) CheckIn(context.Context, *connect.Request[tournament_service.CheckinRequest]) (*connect.Response[tournament_service.TournamentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tournament_service.TournamentService.CheckIn is not implemented"))
}

func (UnimplementedTournamentServiceHandler) Register(context.Context, *connect.Request[tournament_service.RegisterRequest]) (*connect.Response[tournament_service.TournamentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tournament_service.TournamentService.Register is not implemented"))
}

func (UnimplementedTournamentServiceHandler) ExportTournament(context.Context, *connect.Request[tournament_service.ExportTournamentRequest]) (*connect.Response[tournament_service.ExportTournamentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tournament_service.TournamentService.ExportTournament is not implemented"))
}

func (UnimplementedTournamentServiceHandler) GetTournamentScorecards(context.Context, *connect.Request[tournament_service.TournamentScorecardRequest]) (*connect.Response[tournament_service.TournamentScorecardResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tournament_service.TournamentService.GetTournamentScorecards is not implemented"))
}

func (UnimplementedTournamentServiceHandler) GetRecentAndUpcomingTournaments(context.Context, *connect.Request[tournament_service.GetRecentAndUpcomingTournamentsRequest]) (*connect.Response[tournament_service.GetRecentAndUpcomingTournamentsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tournament_service.TournamentService.GetRecentAndUpcomingTournaments is not implemented"))
}

func (UnimplementedTournamentServiceHandler) GetPastTournaments(context.Context, *connect.Request[tournament_service.GetPastTournamentsRequest]) (*connect.Response[tournament_service.GetPastTournamentsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tournament_service.TournamentService.GetPastTournaments is not implemented"))
}

func (UnimplementedTournamentServiceHandler) RunCOP(context.Context, *connect.Request[tournament_service.RunCopRequest]) (*connect.Response[ipc.PairResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tournament_service.TournamentService.RunCOP is not implemented"))
}

func (UnimplementedTournamentServiceHandler) InitializeMonitoringKeys(context.Context, *connect.Request[tournament_service.InitializeMonitoringKeysRequest]) (*connect.Response[tournament_service.TournamentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tournament_service.TournamentService.InitializeMonitoringKeys is not implemented"))
}

func (UnimplementedTournamentServiceHandler) RequestMonitoringStream(context.Context, *connect.Request[tournament_service.RequestMonitoringStreamRequest]) (*connect.Response[tournament_service.TournamentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tournament_service.TournamentService.RequestMonitoringStream is not implemented"))
}

func (UnimplementedTournamentServiceHandler) ResetMonitoringStream(context.Context, *connect.Request[tournament_service.ResetMonitoringStreamRequest]) (*connect.Response[tournament_service.TournamentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tournament_service.TournamentService.ResetMonitoringStream is not implemented"))
}

func (UnimplementedTournamentServiceHandler) GetTournamentMonitoring(context.Context, *connect.Request[tournament_service.GetTournamentMonitoringRequest]) (*connect.Response[tournament_service.GetTournamentMonitoringResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tournament_service.TournamentService.GetTournamentMonitoring is not implemented"))
}
