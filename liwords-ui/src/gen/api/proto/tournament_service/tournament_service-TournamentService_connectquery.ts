// @generated by protoc-gen-connect-query v2.1.1 with parameter "target=ts"
// @generated from file proto/tournament_service/tournament_service.proto (package tournament_service, syntax proto3)
/* eslint-disable */

import { TournamentService } from "./tournament_service_pb";

/**
 * @generated from rpc tournament_service.TournamentService.NewTournament
 */
export const newTournament = TournamentService.method.newTournament;

/**
 * @generated from rpc tournament_service.TournamentService.GetTournamentMetadata
 */
export const getTournamentMetadata = TournamentService.method.getTournamentMetadata;

/**
 * @generated from rpc tournament_service.TournamentService.GetTournament
 */
export const getTournament = TournamentService.method.getTournament;

/**
 * @generated from rpc tournament_service.TournamentService.UnfinishTournament
 */
export const unfinishTournament = TournamentService.method.unfinishTournament;

/**
 * @generated from rpc tournament_service.TournamentService.FinishTournament
 */
export const finishTournament = TournamentService.method.finishTournament;

/**
 * @generated from rpc tournament_service.TournamentService.SetTournamentMetadata
 */
export const setTournamentMetadata = TournamentService.method.setTournamentMetadata;

/**
 * @generated from rpc tournament_service.TournamentService.PairRound
 */
export const pairRound = TournamentService.method.pairRound;

/**
 * @generated from rpc tournament_service.TournamentService.SetSingleRoundControls
 */
export const setSingleRoundControls = TournamentService.method.setSingleRoundControls;

/**
 * @generated from rpc tournament_service.TournamentService.SetRoundControls
 */
export const setRoundControls = TournamentService.method.setRoundControls;

/**
 * @generated from rpc tournament_service.TournamentService.SetDivisionControls
 */
export const setDivisionControls = TournamentService.method.setDivisionControls;

/**
 * Input to AddDirectors should be director usernames.
 *
 * @generated from rpc tournament_service.TournamentService.AddDirectors
 */
export const addDirectors = TournamentService.method.addDirectors;

/**
 * Input to RemoveDirectors should be director usernames.
 *
 * @generated from rpc tournament_service.TournamentService.RemoveDirectors
 */
export const removeDirectors = TournamentService.method.removeDirectors;

/**
 * @generated from rpc tournament_service.TournamentService.AddDivision
 */
export const addDivision = TournamentService.method.addDivision;

/**
 * @generated from rpc tournament_service.TournamentService.RenameDivision
 */
export const renameDivision = TournamentService.method.renameDivision;

/**
 * @generated from rpc tournament_service.TournamentService.RemoveDivision
 */
export const removeDivision = TournamentService.method.removeDivision;

/**
 * Input to AddPlayers should be player usernames
 *
 * @generated from rpc tournament_service.TournamentService.AddPlayers
 */
export const addPlayers = TournamentService.method.addPlayers;

/**
 * Input to RemovePlayers should be player usernames
 *
 * @generated from rpc tournament_service.TournamentService.RemovePlayers
 */
export const removePlayers = TournamentService.method.removePlayers;

/**
 * @generated from rpc tournament_service.TournamentService.SetPairing
 */
export const setPairing = TournamentService.method.setPairing;

/**
 * @generated from rpc tournament_service.TournamentService.SetResult
 */
export const setResult = TournamentService.method.setResult;

/**
 * @generated from rpc tournament_service.TournamentService.StartRoundCountdown
 */
export const startRoundCountdown = TournamentService.method.startRoundCountdown;

/**
 * @generated from rpc tournament_service.TournamentService.RecentGames
 */
export const recentGames = TournamentService.method.recentGames;

/**
 * @generated from rpc tournament_service.TournamentService.CreateClubSession
 */
export const createClubSession = TournamentService.method.createClubSession;

/**
 * @generated from rpc tournament_service.TournamentService.GetRecentClubSessions
 */
export const getRecentClubSessions = TournamentService.method.getRecentClubSessions;

/**
 * @generated from rpc tournament_service.TournamentService.UnstartTournament
 */
export const unstartTournament = TournamentService.method.unstartTournament;

/**
 * @generated from rpc tournament_service.TournamentService.OpenRegistration
 */
export const openRegistration = TournamentService.method.openRegistration;

/**
 * @generated from rpc tournament_service.TournamentService.CloseRegistration
 */
export const closeRegistration = TournamentService.method.closeRegistration;

/**
 * @generated from rpc tournament_service.TournamentService.OpenCheckins
 */
export const openCheckins = TournamentService.method.openCheckins;

/**
 * @generated from rpc tournament_service.TournamentService.CloseCheckins
 */
export const closeCheckins = TournamentService.method.closeCheckins;

/**
 * Uncheck everyone in. Use this some time before the beginning of a session.
 *
 * @generated from rpc tournament_service.TournamentService.UncheckAllIn
 */
export const uncheckAllIn = TournamentService.method.uncheckAllIn;

/**
 * @generated from rpc tournament_service.TournamentService.RemoveAllPlayersNotCheckedIn
 */
export const removeAllPlayersNotCheckedIn = TournamentService.method.removeAllPlayersNotCheckedIn;

/**
 * CheckIn allows players to check themselves in.
 *
 * @generated from rpc tournament_service.TournamentService.CheckIn
 */
export const checkIn = TournamentService.method.checkIn;

/**
 * @generated from rpc tournament_service.TournamentService.Register
 */
export const register = TournamentService.method.register;

/**
 * @generated from rpc tournament_service.TournamentService.ExportTournament
 */
export const exportTournament = TournamentService.method.exportTournament;

/**
 * @generated from rpc tournament_service.TournamentService.GetTournamentScorecards
 */
export const getTournamentScorecards = TournamentService.method.getTournamentScorecards;

/**
 * @generated from rpc tournament_service.TournamentService.GetRecentAndUpcomingTournaments
 */
export const getRecentAndUpcomingTournaments = TournamentService.method.getRecentAndUpcomingTournaments;

/**
 * @generated from rpc tournament_service.TournamentService.RunCOP
 */
export const runCOP = TournamentService.method.runCOP;
