// @generated by protoc-gen-es v2.2.5 with parameter "target=ts"
// @generated from file proto/tournament_service/tournament_service.proto (package tournament_service, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import type { GameEndReason, GameRequest } from "../ipc/omgwords_pb";
import { file_proto_ipc_omgwords } from "../ipc/omgwords_pb";
import type { DivisionControlsSchema, DivisionRoundControlsSchema, FullTournamentDivisionsSchema, RoundControl, TournamentGameEndedEvent, TournamentGameResult, TournamentPersonsSchema } from "../ipc/tournament_pb";
import { file_proto_ipc_tournament } from "../ipc/tournament_pb";
import type { Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file proto/tournament_service/tournament_service.proto.
 */
export const file_proto_tournament_service_tournament_service: GenFile = /*@__PURE__*/
  fileDesc("", [file_proto_ipc_omgwords, file_proto_ipc_tournament, file_google_protobuf_timestamp]);

/**
 * @generated from message tournament_service.StartRoundRequest
 */
export type StartRoundRequest = Message<"tournament_service.StartRoundRequest"> & {
  /**
   * @generated from field: string tournament_id = 1;
   */
  tournamentId: string;

  /**
   * @generated from field: int32 round = 2;
   */
  round: number;
};

/**
 * Describes the message tournament_service.StartRoundRequest.
 * Use `create(StartRoundRequestSchema)` to create a new message.
 */
export const StartRoundRequestSchema: GenMessage<StartRoundRequest> = /*@__PURE__*/
  messageDesc(file_proto_tournament_service_tournament_service, 0);

/**
 * @generated from message tournament_service.NewTournamentRequest
 */
export type NewTournamentRequest = Message<"tournament_service.NewTournamentRequest"> & {
  /**
   * If slug is not assigned, a random ID will be chosen.
   *
   * @generated from field: string slug = 1;
   */
  slug: string;

  /**
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * @generated from field: string description = 3;
   */
  description: string;

  /**
   * @generated from field: repeated string director_usernames = 4;
   */
  directorUsernames: string[];

  /**
   * @generated from field: tournament_service.TType type = 5;
   */
  type: TType;

  /**
   * @generated from field: google.protobuf.Timestamp scheduled_start_time = 6;
   */
  scheduledStartTime?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp scheduled_end_time = 7;
   */
  scheduledEndTime?: Timestamp;
};

/**
 * Describes the message tournament_service.NewTournamentRequest.
 * Use `create(NewTournamentRequestSchema)` to create a new message.
 */
export const NewTournamentRequestSchema: GenMessage<NewTournamentRequest> = /*@__PURE__*/
  messageDesc(file_proto_tournament_service_tournament_service, 1);

/**
 * @generated from message tournament_service.TournamentMetadata
 */
export type TournamentMetadata = Message<"tournament_service.TournamentMetadata"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * description is the markdown information for the tournament on the
   * right-hand side
   *
   * @generated from field: string description = 3;
   */
  description: string;

  /**
   * @generated from field: string slug = 4;
   */
  slug: string;

  /**
   * @generated from field: tournament_service.TType type = 5;
   */
  type: TType;

  /**
   * a caption that shows up for the tournament in various places.
   *
   * @generated from field: string disclaimer = 6;
   */
  disclaimer: string;

  /**
   * tile_style if set is default
   *
   * @generated from field: string tile_style = 7;
   */
  tileStyle: string;

  /**
   * board_style if set is default
   *
   * @generated from field: string board_style = 8;
   */
  boardStyle: string;

  /**
   * for clubs (not tournaments) we want to be able to hard-code settings
   * if the following parameter is set.
   *
   * @generated from field: ipc.GameRequest default_club_settings = 9;
   */
  defaultClubSettings?: GameRequest;

  /**
   * When setting the game request, some clubs would like some parameters
   * to be more freeform (for example, lexicon option or time setting).
   * The following parameter is a list of field names that are freeform.
   * The acceptable values are:
   * lexicon, time, challenge_rule, rating_mode, variant_name
   *
   * @generated from field: repeated string freeform_club_setting_fields = 10;
   */
  freeformClubSettingFields: string[];

  /**
   * a simple password for this tournament. Without it you can't see what is
   * happening. Likely front-end only implementation, although password
   * will be at least hashed. For clubs that want to be more private.
   *
   * @generated from field: string password = 11;
   */
  password: string;

  /**
   * a url to a logo in the metadata card, disclaimer card and center square.
   *
   * @generated from field: string logo = 12;
   */
  logo: string;

  /**
   * an override color for the gradient in the tournament info
   *
   * @generated from field: string color = 13;
   */
  color: string;

  /**
   * @generated from field: bool private_analysis = 14;
   */
  privateAnalysis: boolean;

  /**
   * irl_mode allows tournament mode to be used for pairings for an
   * over-the-board tournament, and will not enforce that usernames
   * are registered on the site.
   *
   * @generated from field: bool irl_mode = 15;
   */
  irlMode: boolean;

  /**
   * @generated from field: google.protobuf.Timestamp scheduled_start_time = 16;
   */
  scheduledStartTime?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp scheduled_end_time = 17;
   */
  scheduledEndTime?: Timestamp;

  /**
   * @generated from field: bool checkins_open = 18;
   */
  checkinsOpen: boolean;

  /**
   * @generated from field: bool registration_open = 19;
   */
  registrationOpen: boolean;
};

/**
 * Describes the message tournament_service.TournamentMetadata.
 * Use `create(TournamentMetadataSchema)` to create a new message.
 */
export const TournamentMetadataSchema: GenMessage<TournamentMetadata> = /*@__PURE__*/
  messageDesc(file_proto_tournament_service_tournament_service, 2);

/**
 * @generated from message tournament_service.SetTournamentMetadataRequest
 */
export type SetTournamentMetadataRequest = Message<"tournament_service.SetTournamentMetadataRequest"> & {
  /**
   * @generated from field: tournament_service.TournamentMetadata metadata = 1;
   */
  metadata?: TournamentMetadata;

  /**
   * set_only_specified sets only the specified fields,
   * and not the entire metadata.
   * non-zero-value fields will be treated as "specified"
   *
   * @generated from field: bool set_only_specified = 2;
   */
  setOnlySpecified: boolean;
};

/**
 * Describes the message tournament_service.SetTournamentMetadataRequest.
 * Use `create(SetTournamentMetadataRequestSchema)` to create a new message.
 */
export const SetTournamentMetadataRequestSchema: GenMessage<SetTournamentMetadataRequest> = /*@__PURE__*/
  messageDesc(file_proto_tournament_service_tournament_service, 3);

/**
 * @generated from message tournament_service.SingleRoundControlsRequest
 */
export type SingleRoundControlsRequest = Message<"tournament_service.SingleRoundControlsRequest"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string division = 2;
   */
  division: string;

  /**
   * @generated from field: int32 round = 3;
   */
  round: number;

  /**
   * @generated from field: ipc.RoundControl round_controls = 4;
   */
  roundControls?: RoundControl;
};

/**
 * Describes the message tournament_service.SingleRoundControlsRequest.
 * Use `create(SingleRoundControlsRequestSchema)` to create a new message.
 */
export const SingleRoundControlsRequestSchema: GenMessage<SingleRoundControlsRequest> = /*@__PURE__*/
  messageDesc(file_proto_tournament_service_tournament_service, 4);

/**
 * @generated from message tournament_service.PairRoundRequest
 */
export type PairRoundRequest = Message<"tournament_service.PairRoundRequest"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string division = 2;
   */
  division: string;

  /**
   * @generated from field: int32 round = 3;
   */
  round: number;

  /**
   * @generated from field: bool preserve_byes = 4;
   */
  preserveByes: boolean;

  /**
   * @generated from field: bool delete_pairings = 5;
   */
  deletePairings: boolean;
};

/**
 * Describes the message tournament_service.PairRoundRequest.
 * Use `create(PairRoundRequestSchema)` to create a new message.
 */
export const PairRoundRequestSchema: GenMessage<PairRoundRequest> = /*@__PURE__*/
  messageDesc(file_proto_tournament_service_tournament_service, 5);

/**
 * @generated from message tournament_service.TournamentDivisionRequest
 */
export type TournamentDivisionRequest = Message<"tournament_service.TournamentDivisionRequest"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string division = 2;
   */
  division: string;
};

/**
 * Describes the message tournament_service.TournamentDivisionRequest.
 * Use `create(TournamentDivisionRequestSchema)` to create a new message.
 */
export const TournamentDivisionRequestSchema: GenMessage<TournamentDivisionRequest> = /*@__PURE__*/
  messageDesc(file_proto_tournament_service_tournament_service, 6);

/**
 * @generated from message tournament_service.TournamentPairingRequest
 */
export type TournamentPairingRequest = Message<"tournament_service.TournamentPairingRequest"> & {
  /**
   * @generated from field: string player_one_id = 1;
   */
  playerOneId: string;

  /**
   * @generated from field: string player_two_id = 2;
   */
  playerTwoId: string;

  /**
   * @generated from field: int32 round = 3;
   */
  round: number;

  /**
   * If player_one_id and player_two_id are the same, we should specify what
   * we want the result to be (BYE, FORFEIT_LOSS, VOID)
   *
   * @generated from field: ipc.TournamentGameResult self_play_result = 4;
   */
  selfPlayResult: TournamentGameResult;
};

/**
 * Describes the message tournament_service.TournamentPairingRequest.
 * Use `create(TournamentPairingRequestSchema)` to create a new message.
 */
export const TournamentPairingRequestSchema: GenMessage<TournamentPairingRequest> = /*@__PURE__*/
  messageDesc(file_proto_tournament_service_tournament_service, 7);

/**
 * @generated from message tournament_service.DivisionRenameRequest
 */
export type DivisionRenameRequest = Message<"tournament_service.DivisionRenameRequest"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string division = 2;
   */
  division: string;

  /**
   * @generated from field: string new_name = 3;
   */
  newName: string;
};

/**
 * Describes the message tournament_service.DivisionRenameRequest.
 * Use `create(DivisionRenameRequestSchema)` to create a new message.
 */
export const DivisionRenameRequestSchema: GenMessage<DivisionRenameRequest> = /*@__PURE__*/
  messageDesc(file_proto_tournament_service_tournament_service, 8);

/**
 * @generated from message tournament_service.TournamentPairingsRequest
 */
export type TournamentPairingsRequest = Message<"tournament_service.TournamentPairingsRequest"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string division = 2;
   */
  division: string;

  /**
   * @generated from field: repeated tournament_service.TournamentPairingRequest pairings = 3;
   */
  pairings: TournamentPairingRequest[];
};

/**
 * Describes the message tournament_service.TournamentPairingsRequest.
 * Use `create(TournamentPairingsRequestSchema)` to create a new message.
 */
export const TournamentPairingsRequestSchema: GenMessage<TournamentPairingsRequest> = /*@__PURE__*/
  messageDesc(file_proto_tournament_service_tournament_service, 9);

/**
 * TournamentResultOverrideRequest is sent when a score needs to be edited
 * or added by a director. Note that player one and player two need to be
 * the players that went first and second, respectively; otherwise,
 * we will not be able to accurately track firsts/seconds.
 *
 * @generated from message tournament_service.TournamentResultOverrideRequest
 */
export type TournamentResultOverrideRequest = Message<"tournament_service.TournamentResultOverrideRequest"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string division = 2;
   */
  division: string;

  /**
   * @generated from field: string player_one_id = 3;
   */
  playerOneId: string;

  /**
   * @generated from field: string player_two_id = 4;
   */
  playerTwoId: string;

  /**
   * @generated from field: int32 round = 5;
   */
  round: number;

  /**
   * @generated from field: int32 player_one_score = 6;
   */
  playerOneScore: number;

  /**
   * @generated from field: int32 player_two_score = 7;
   */
  playerTwoScore: number;

  /**
   * @generated from field: ipc.TournamentGameResult player_one_result = 8;
   */
  playerOneResult: TournamentGameResult;

  /**
   * @generated from field: ipc.TournamentGameResult player_two_result = 9;
   */
  playerTwoResult: TournamentGameResult;

  /**
   * @generated from field: ipc.GameEndReason game_end_reason = 10;
   */
  gameEndReason: GameEndReason;

  /**
   * @generated from field: bool amendment = 11;
   */
  amendment: boolean;

  /**
   * @generated from field: int32 game_index = 12;
   */
  gameIndex: number;
};

/**
 * Describes the message tournament_service.TournamentResultOverrideRequest.
 * Use `create(TournamentResultOverrideRequestSchema)` to create a new message.
 */
export const TournamentResultOverrideRequestSchema: GenMessage<TournamentResultOverrideRequest> = /*@__PURE__*/
  messageDesc(file_proto_tournament_service_tournament_service, 10);

/**
 * @generated from message tournament_service.TournamentStartRoundCountdownRequest
 */
export type TournamentStartRoundCountdownRequest = Message<"tournament_service.TournamentStartRoundCountdownRequest"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string division = 2;
   */
  division: string;

  /**
   * @generated from field: int32 round = 3;
   */
  round: number;

  /**
   * @generated from field: bool start_all_rounds = 4;
   */
  startAllRounds: boolean;
};

/**
 * Describes the message tournament_service.TournamentStartRoundCountdownRequest.
 * Use `create(TournamentStartRoundCountdownRequestSchema)` to create a new message.
 */
export const TournamentStartRoundCountdownRequestSchema: GenMessage<TournamentStartRoundCountdownRequest> = /*@__PURE__*/
  messageDesc(file_proto_tournament_service_tournament_service, 11);

/**
 * @generated from message tournament_service.TournamentResponse
 */
export type TournamentResponse = Message<"tournament_service.TournamentResponse"> & {
};

/**
 * Describes the message tournament_service.TournamentResponse.
 * Use `create(TournamentResponseSchema)` to create a new message.
 */
export const TournamentResponseSchema: GenMessage<TournamentResponse> = /*@__PURE__*/
  messageDesc(file_proto_tournament_service_tournament_service, 12);

/**
 * @generated from message tournament_service.NewTournamentResponse
 */
export type NewTournamentResponse = Message<"tournament_service.NewTournamentResponse"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string slug = 2;
   */
  slug: string;
};

/**
 * Describes the message tournament_service.NewTournamentResponse.
 * Use `create(NewTournamentResponseSchema)` to create a new message.
 */
export const NewTournamentResponseSchema: GenMessage<NewTournamentResponse> = /*@__PURE__*/
  messageDesc(file_proto_tournament_service_tournament_service, 13);

/**
 * @generated from message tournament_service.GetTournamentMetadataRequest
 */
export type GetTournamentMetadataRequest = Message<"tournament_service.GetTournamentMetadataRequest"> & {
  /**
   * User must provide the ID, or the slug (but not both)
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string slug = 2;
   */
  slug: string;
};

/**
 * Describes the message tournament_service.GetTournamentMetadataRequest.
 * Use `create(GetTournamentMetadataRequestSchema)` to create a new message.
 */
export const GetTournamentMetadataRequestSchema: GenMessage<GetTournamentMetadataRequest> = /*@__PURE__*/
  messageDesc(file_proto_tournament_service_tournament_service, 14);

/**
 * @generated from message tournament_service.GetTournamentRequest
 */
export type GetTournamentRequest = Message<"tournament_service.GetTournamentRequest"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;
};

/**
 * Describes the message tournament_service.GetTournamentRequest.
 * Use `create(GetTournamentRequestSchema)` to create a new message.
 */
export const GetTournamentRequestSchema: GenMessage<GetTournamentRequest> = /*@__PURE__*/
  messageDesc(file_proto_tournament_service_tournament_service, 15);

/**
 * @generated from message tournament_service.FinishTournamentRequest
 */
export type FinishTournamentRequest = Message<"tournament_service.FinishTournamentRequest"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;
};

/**
 * Describes the message tournament_service.FinishTournamentRequest.
 * Use `create(FinishTournamentRequestSchema)` to create a new message.
 */
export const FinishTournamentRequestSchema: GenMessage<FinishTournamentRequest> = /*@__PURE__*/
  messageDesc(file_proto_tournament_service_tournament_service, 16);

/**
 * @generated from message tournament_service.UnfinishTournamentRequest
 */
export type UnfinishTournamentRequest = Message<"tournament_service.UnfinishTournamentRequest"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;
};

/**
 * Describes the message tournament_service.UnfinishTournamentRequest.
 * Use `create(UnfinishTournamentRequestSchema)` to create a new message.
 */
export const UnfinishTournamentRequestSchema: GenMessage<UnfinishTournamentRequest> = /*@__PURE__*/
  messageDesc(file_proto_tournament_service_tournament_service, 17);

/**
 * @generated from message tournament_service.TournamentMetadataResponse
 */
export type TournamentMetadataResponse = Message<"tournament_service.TournamentMetadataResponse"> & {
  /**
   * @generated from field: tournament_service.TournamentMetadata metadata = 1;
   */
  metadata?: TournamentMetadata;

  /**
   * directors are not part of the metadata. We decided to make those
   * individually addable/removable (See AddDirectors)
   *
   * @generated from field: repeated string directors = 2;
   */
  directors: string[];
};

/**
 * Describes the message tournament_service.TournamentMetadataResponse.
 * Use `create(TournamentMetadataResponseSchema)` to create a new message.
 */
export const TournamentMetadataResponseSchema: GenMessage<TournamentMetadataResponse> = /*@__PURE__*/
  messageDesc(file_proto_tournament_service_tournament_service, 18);

/**
 * @generated from message tournament_service.RecentGamesRequest
 */
export type RecentGamesRequest = Message<"tournament_service.RecentGamesRequest"> & {
  /**
   * tournament id
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: int32 num_games = 2;
   */
  numGames: number;

  /**
   * @generated from field: int32 offset = 3;
   */
  offset: number;
};

/**
 * Describes the message tournament_service.RecentGamesRequest.
 * Use `create(RecentGamesRequestSchema)` to create a new message.
 */
export const RecentGamesRequestSchema: GenMessage<RecentGamesRequest> = /*@__PURE__*/
  messageDesc(file_proto_tournament_service_tournament_service, 19);

/**
 * @generated from message tournament_service.RecentGamesResponse
 */
export type RecentGamesResponse = Message<"tournament_service.RecentGamesResponse"> & {
  /**
   * @generated from field: repeated ipc.TournamentGameEndedEvent games = 1;
   */
  games: TournamentGameEndedEvent[];
};

/**
 * Describes the message tournament_service.RecentGamesResponse.
 * Use `create(RecentGamesResponseSchema)` to create a new message.
 */
export const RecentGamesResponseSchema: GenMessage<RecentGamesResponse> = /*@__PURE__*/
  messageDesc(file_proto_tournament_service_tournament_service, 20);

/**
 * @generated from message tournament_service.UnstartTournamentRequest
 */
export type UnstartTournamentRequest = Message<"tournament_service.UnstartTournamentRequest"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;
};

/**
 * Describes the message tournament_service.UnstartTournamentRequest.
 * Use `create(UnstartTournamentRequestSchema)` to create a new message.
 */
export const UnstartTournamentRequestSchema: GenMessage<UnstartTournamentRequest> = /*@__PURE__*/
  messageDesc(file_proto_tournament_service_tournament_service, 21);

/**
 * @generated from message tournament_service.UncheckAllInRequest
 */
export type UncheckAllInRequest = Message<"tournament_service.UncheckAllInRequest"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;
};

/**
 * Describes the message tournament_service.UncheckAllInRequest.
 * Use `create(UncheckAllInRequestSchema)` to create a new message.
 */
export const UncheckAllInRequestSchema: GenMessage<UncheckAllInRequest> = /*@__PURE__*/
  messageDesc(file_proto_tournament_service_tournament_service, 22);

/**
 * @generated from message tournament_service.RemoveAllPlayersNotCheckedInRequest
 */
export type RemoveAllPlayersNotCheckedInRequest = Message<"tournament_service.RemoveAllPlayersNotCheckedInRequest"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;
};

/**
 * Describes the message tournament_service.RemoveAllPlayersNotCheckedInRequest.
 * Use `create(RemoveAllPlayersNotCheckedInRequestSchema)` to create a new message.
 */
export const RemoveAllPlayersNotCheckedInRequestSchema: GenMessage<RemoveAllPlayersNotCheckedInRequest> = /*@__PURE__*/
  messageDesc(file_proto_tournament_service_tournament_service, 23);

/**
 * @generated from message tournament_service.CheckinRequest
 */
export type CheckinRequest = Message<"tournament_service.CheckinRequest"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: bool checkin = 2;
   */
  checkin: boolean;
};

/**
 * Describes the message tournament_service.CheckinRequest.
 * Use `create(CheckinRequestSchema)` to create a new message.
 */
export const CheckinRequestSchema: GenMessage<CheckinRequest> = /*@__PURE__*/
  messageDesc(file_proto_tournament_service_tournament_service, 24);

/**
 * @generated from message tournament_service.RegisterRequest
 */
export type RegisterRequest = Message<"tournament_service.RegisterRequest"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string division = 2;
   */
  division: string;

  /**
   * @generated from field: bool register = 3;
   */
  register: boolean;
};

/**
 * Describes the message tournament_service.RegisterRequest.
 * Use `create(RegisterRequestSchema)` to create a new message.
 */
export const RegisterRequestSchema: GenMessage<RegisterRequest> = /*@__PURE__*/
  messageDesc(file_proto_tournament_service_tournament_service, 25);

/**
 * @generated from message tournament_service.OpenRegistrationRequest
 */
export type OpenRegistrationRequest = Message<"tournament_service.OpenRegistrationRequest"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;
};

/**
 * Describes the message tournament_service.OpenRegistrationRequest.
 * Use `create(OpenRegistrationRequestSchema)` to create a new message.
 */
export const OpenRegistrationRequestSchema: GenMessage<OpenRegistrationRequest> = /*@__PURE__*/
  messageDesc(file_proto_tournament_service_tournament_service, 26);

/**
 * @generated from message tournament_service.CloseRegistrationRequest
 */
export type CloseRegistrationRequest = Message<"tournament_service.CloseRegistrationRequest"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;
};

/**
 * Describes the message tournament_service.CloseRegistrationRequest.
 * Use `create(CloseRegistrationRequestSchema)` to create a new message.
 */
export const CloseRegistrationRequestSchema: GenMessage<CloseRegistrationRequest> = /*@__PURE__*/
  messageDesc(file_proto_tournament_service_tournament_service, 27);

/**
 * @generated from message tournament_service.OpenCheckinsRequest
 */
export type OpenCheckinsRequest = Message<"tournament_service.OpenCheckinsRequest"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;
};

/**
 * Describes the message tournament_service.OpenCheckinsRequest.
 * Use `create(OpenCheckinsRequestSchema)` to create a new message.
 */
export const OpenCheckinsRequestSchema: GenMessage<OpenCheckinsRequest> = /*@__PURE__*/
  messageDesc(file_proto_tournament_service_tournament_service, 28);

/**
 * @generated from message tournament_service.CloseCheckinsRequest
 */
export type CloseCheckinsRequest = Message<"tournament_service.CloseCheckinsRequest"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: bool delete_non_checked_in = 2;
   */
  deleteNonCheckedIn: boolean;
};

/**
 * Describes the message tournament_service.CloseCheckinsRequest.
 * Use `create(CloseCheckinsRequestSchema)` to create a new message.
 */
export const CloseCheckinsRequestSchema: GenMessage<CloseCheckinsRequest> = /*@__PURE__*/
  messageDesc(file_proto_tournament_service_tournament_service, 29);

/**
 * @generated from message tournament_service.TournamentScorecardRequest
 */
export type TournamentScorecardRequest = Message<"tournament_service.TournamentScorecardRequest"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: bool show_opponents = 2;
   */
  showOpponents: boolean;

  /**
   * @generated from field: bool show_seeds = 3;
   */
  showSeeds: boolean;

  /**
   * @generated from field: bool show_qr_code = 4;
   */
  showQrCode: boolean;
};

/**
 * Describes the message tournament_service.TournamentScorecardRequest.
 * Use `create(TournamentScorecardRequestSchema)` to create a new message.
 */
export const TournamentScorecardRequestSchema: GenMessage<TournamentScorecardRequest> = /*@__PURE__*/
  messageDesc(file_proto_tournament_service_tournament_service, 30);

/**
 * @generated from message tournament_service.TournamentScorecardResponse
 */
export type TournamentScorecardResponse = Message<"tournament_service.TournamentScorecardResponse"> & {
  /**
   * @generated from field: bytes pdf_zip = 1;
   */
  pdfZip: Uint8Array;
};

/**
 * Describes the message tournament_service.TournamentScorecardResponse.
 * Use `create(TournamentScorecardResponseSchema)` to create a new message.
 */
export const TournamentScorecardResponseSchema: GenMessage<TournamentScorecardResponse> = /*@__PURE__*/
  messageDesc(file_proto_tournament_service_tournament_service, 31);

/**
 * @generated from message tournament_service.GetRecentAndUpcomingTournamentsRequest
 */
export type GetRecentAndUpcomingTournamentsRequest = Message<"tournament_service.GetRecentAndUpcomingTournamentsRequest"> & {
};

/**
 * Describes the message tournament_service.GetRecentAndUpcomingTournamentsRequest.
 * Use `create(GetRecentAndUpcomingTournamentsRequestSchema)` to create a new message.
 */
export const GetRecentAndUpcomingTournamentsRequestSchema: GenMessage<GetRecentAndUpcomingTournamentsRequest> = /*@__PURE__*/
  messageDesc(file_proto_tournament_service_tournament_service, 32);

/**
 * @generated from message tournament_service.GetRecentAndUpcomingTournamentsResponse
 */
export type GetRecentAndUpcomingTournamentsResponse = Message<"tournament_service.GetRecentAndUpcomingTournamentsResponse"> & {
  /**
   * @generated from field: repeated tournament_service.TournamentMetadata tournaments = 1;
   */
  tournaments: TournamentMetadata[];
};

/**
 * Describes the message tournament_service.GetRecentAndUpcomingTournamentsResponse.
 * Use `create(GetRecentAndUpcomingTournamentsResponseSchema)` to create a new message.
 */
export const GetRecentAndUpcomingTournamentsResponseSchema: GenMessage<GetRecentAndUpcomingTournamentsResponse> = /*@__PURE__*/
  messageDesc(file_proto_tournament_service_tournament_service, 33);

/**
 * @generated from message tournament_service.ExportTournamentRequest
 */
export type ExportTournamentRequest = Message<"tournament_service.ExportTournamentRequest"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string format = 2;
   */
  format: string;
};

/**
 * Describes the message tournament_service.ExportTournamentRequest.
 * Use `create(ExportTournamentRequestSchema)` to create a new message.
 */
export const ExportTournamentRequestSchema: GenMessage<ExportTournamentRequest> = /*@__PURE__*/
  messageDesc(file_proto_tournament_service_tournament_service, 34);

/**
 * @generated from message tournament_service.ExportTournamentResponse
 */
export type ExportTournamentResponse = Message<"tournament_service.ExportTournamentResponse"> & {
  /**
   * @generated from field: string exported = 1;
   */
  exported: string;
};

/**
 * Describes the message tournament_service.ExportTournamentResponse.
 * Use `create(ExportTournamentResponseSchema)` to create a new message.
 */
export const ExportTournamentResponseSchema: GenMessage<ExportTournamentResponse> = /*@__PURE__*/
  messageDesc(file_proto_tournament_service_tournament_service, 35);

/**
 * @generated from message tournament_service.NewClubSessionRequest
 */
export type NewClubSessionRequest = Message<"tournament_service.NewClubSessionRequest"> & {
  /**
   * date is the date of the session
   * This is used as scheduled_start_time for the tournament now that
   * we store this data.
   *
   * @generated from field: google.protobuf.Timestamp date = 1;
   */
  date?: Timestamp;

  /**
   * @generated from field: string club_id = 2;
   */
  clubId: string;
};

/**
 * Describes the message tournament_service.NewClubSessionRequest.
 * Use `create(NewClubSessionRequestSchema)` to create a new message.
 */
export const NewClubSessionRequestSchema: GenMessage<NewClubSessionRequest> = /*@__PURE__*/
  messageDesc(file_proto_tournament_service_tournament_service, 36);

/**
 * @generated from message tournament_service.ClubSessionResponse
 */
export type ClubSessionResponse = Message<"tournament_service.ClubSessionResponse"> & {
  /**
   * Note that club sessions are tournaments in our backend. We return
   * the created tournament ID here:
   *
   * @generated from field: string tournament_id = 1;
   */
  tournamentId: string;

  /**
   * slug will look like /club/{club_name}/{date}. It should be
   * case-insensitive.
   *
   * @generated from field: string slug = 2;
   */
  slug: string;
};

/**
 * Describes the message tournament_service.ClubSessionResponse.
 * Use `create(ClubSessionResponseSchema)` to create a new message.
 */
export const ClubSessionResponseSchema: GenMessage<ClubSessionResponse> = /*@__PURE__*/
  messageDesc(file_proto_tournament_service_tournament_service, 37);

/**
 * @generated from message tournament_service.RecentClubSessionsRequest
 */
export type RecentClubSessionsRequest = Message<"tournament_service.RecentClubSessionsRequest"> & {
  /**
   * club_id
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: int32 count = 2;
   */
  count: number;

  /**
   * @generated from field: int32 offset = 3;
   */
  offset: number;
};

/**
 * Describes the message tournament_service.RecentClubSessionsRequest.
 * Use `create(RecentClubSessionsRequestSchema)` to create a new message.
 */
export const RecentClubSessionsRequestSchema: GenMessage<RecentClubSessionsRequest> = /*@__PURE__*/
  messageDesc(file_proto_tournament_service_tournament_service, 38);

/**
 * @generated from message tournament_service.ClubSessionsResponse
 */
export type ClubSessionsResponse = Message<"tournament_service.ClubSessionsResponse"> & {
  /**
   * @generated from field: repeated tournament_service.ClubSessionResponse sessions = 1;
   */
  sessions: ClubSessionResponse[];
};

/**
 * Describes the message tournament_service.ClubSessionsResponse.
 * Use `create(ClubSessionsResponseSchema)` to create a new message.
 */
export const ClubSessionsResponseSchema: GenMessage<ClubSessionsResponse> = /*@__PURE__*/
  messageDesc(file_proto_tournament_service_tournament_service, 39);

/**
 * @generated from enum tournament_service.TType
 */
export enum TType {
  /**
   * A Standard tournament
   *
   * @generated from enum value: STANDARD = 0;
   */
  STANDARD = 0,

  /**
   * A new "clubhouse"
   *
   * @generated from enum value: CLUB = 1;
   */
  CLUB = 1,

  /**
   * A club session or child tournament.
   *
   * @generated from enum value: CHILD = 2;
   */
  CHILD = 2,

  /**
   * A legacy tournament
   *
   * @generated from enum value: LEGACY = 3;
   */
  LEGACY = 3,
}

/**
 * Describes the enum tournament_service.TType.
 */
export const TTypeSchema: GenEnum<TType> = /*@__PURE__*/
  enumDesc(file_proto_tournament_service_tournament_service, 0);

/**
 * @generated from service tournament_service.TournamentService
 */
export const TournamentService: GenService<{
  /**
   * @generated from rpc tournament_service.TournamentService.NewTournament
   */
  newTournament: {
    methodKind: "unary";
    input: typeof NewTournamentRequestSchema;
    output: typeof NewTournamentResponseSchema;
  },
  /**
   * @generated from rpc tournament_service.TournamentService.GetTournamentMetadata
   */
  getTournamentMetadata: {
    methodKind: "unary";
    input: typeof GetTournamentMetadataRequestSchema;
    output: typeof TournamentMetadataResponseSchema;
  },
  /**
   * @generated from rpc tournament_service.TournamentService.GetTournament
   */
  getTournament: {
    methodKind: "unary";
    input: typeof GetTournamentRequestSchema;
    output: typeof FullTournamentDivisionsSchema;
  },
  /**
   * @generated from rpc tournament_service.TournamentService.UnfinishTournament
   */
  unfinishTournament: {
    methodKind: "unary";
    input: typeof UnfinishTournamentRequestSchema;
    output: typeof TournamentResponseSchema;
  },
  /**
   * @generated from rpc tournament_service.TournamentService.FinishTournament
   */
  finishTournament: {
    methodKind: "unary";
    input: typeof FinishTournamentRequestSchema;
    output: typeof TournamentResponseSchema;
  },
  /**
   * @generated from rpc tournament_service.TournamentService.SetTournamentMetadata
   */
  setTournamentMetadata: {
    methodKind: "unary";
    input: typeof SetTournamentMetadataRequestSchema;
    output: typeof TournamentResponseSchema;
  },
  /**
   * @generated from rpc tournament_service.TournamentService.PairRound
   */
  pairRound: {
    methodKind: "unary";
    input: typeof PairRoundRequestSchema;
    output: typeof TournamentResponseSchema;
  },
  /**
   * @generated from rpc tournament_service.TournamentService.SetSingleRoundControls
   */
  setSingleRoundControls: {
    methodKind: "unary";
    input: typeof SingleRoundControlsRequestSchema;
    output: typeof TournamentResponseSchema;
  },
  /**
   * @generated from rpc tournament_service.TournamentService.SetRoundControls
   */
  setRoundControls: {
    methodKind: "unary";
    input: typeof DivisionRoundControlsSchema;
    output: typeof TournamentResponseSchema;
  },
  /**
   * @generated from rpc tournament_service.TournamentService.SetDivisionControls
   */
  setDivisionControls: {
    methodKind: "unary";
    input: typeof DivisionControlsSchema;
    output: typeof TournamentResponseSchema;
  },
  /**
   * Input to AddDirectors should be director usernames.
   *
   * @generated from rpc tournament_service.TournamentService.AddDirectors
   */
  addDirectors: {
    methodKind: "unary";
    input: typeof TournamentPersonsSchema;
    output: typeof TournamentResponseSchema;
  },
  /**
   * Input to RemoveDirectors should be director usernames.
   *
   * @generated from rpc tournament_service.TournamentService.RemoveDirectors
   */
  removeDirectors: {
    methodKind: "unary";
    input: typeof TournamentPersonsSchema;
    output: typeof TournamentResponseSchema;
  },
  /**
   * @generated from rpc tournament_service.TournamentService.AddDivision
   */
  addDivision: {
    methodKind: "unary";
    input: typeof TournamentDivisionRequestSchema;
    output: typeof TournamentResponseSchema;
  },
  /**
   * @generated from rpc tournament_service.TournamentService.RenameDivision
   */
  renameDivision: {
    methodKind: "unary";
    input: typeof DivisionRenameRequestSchema;
    output: typeof TournamentResponseSchema;
  },
  /**
   * @generated from rpc tournament_service.TournamentService.RemoveDivision
   */
  removeDivision: {
    methodKind: "unary";
    input: typeof TournamentDivisionRequestSchema;
    output: typeof TournamentResponseSchema;
  },
  /**
   * Input to AddPlayers should be player usernames
   *
   * @generated from rpc tournament_service.TournamentService.AddPlayers
   */
  addPlayers: {
    methodKind: "unary";
    input: typeof TournamentPersonsSchema;
    output: typeof TournamentResponseSchema;
  },
  /**
   * Input to RemovePlayers should be player usernames
   *
   * @generated from rpc tournament_service.TournamentService.RemovePlayers
   */
  removePlayers: {
    methodKind: "unary";
    input: typeof TournamentPersonsSchema;
    output: typeof TournamentResponseSchema;
  },
  /**
   * @generated from rpc tournament_service.TournamentService.SetPairing
   */
  setPairing: {
    methodKind: "unary";
    input: typeof TournamentPairingsRequestSchema;
    output: typeof TournamentResponseSchema;
  },
  /**
   * @generated from rpc tournament_service.TournamentService.SetResult
   */
  setResult: {
    methodKind: "unary";
    input: typeof TournamentResultOverrideRequestSchema;
    output: typeof TournamentResponseSchema;
  },
  /**
   * @generated from rpc tournament_service.TournamentService.StartRoundCountdown
   */
  startRoundCountdown: {
    methodKind: "unary";
    input: typeof TournamentStartRoundCountdownRequestSchema;
    output: typeof TournamentResponseSchema;
  },
  /**
   * @generated from rpc tournament_service.TournamentService.RecentGames
   */
  recentGames: {
    methodKind: "unary";
    input: typeof RecentGamesRequestSchema;
    output: typeof RecentGamesResponseSchema;
  },
  /**
   * @generated from rpc tournament_service.TournamentService.CreateClubSession
   */
  createClubSession: {
    methodKind: "unary";
    input: typeof NewClubSessionRequestSchema;
    output: typeof ClubSessionResponseSchema;
  },
  /**
   * @generated from rpc tournament_service.TournamentService.GetRecentClubSessions
   */
  getRecentClubSessions: {
    methodKind: "unary";
    input: typeof RecentClubSessionsRequestSchema;
    output: typeof ClubSessionsResponseSchema;
  },
  /**
   * @generated from rpc tournament_service.TournamentService.UnstartTournament
   */
  unstartTournament: {
    methodKind: "unary";
    input: typeof UnstartTournamentRequestSchema;
    output: typeof TournamentResponseSchema;
  },
  /**
   * @generated from rpc tournament_service.TournamentService.OpenRegistration
   */
  openRegistration: {
    methodKind: "unary";
    input: typeof OpenRegistrationRequestSchema;
    output: typeof TournamentResponseSchema;
  },
  /**
   * @generated from rpc tournament_service.TournamentService.CloseRegistration
   */
  closeRegistration: {
    methodKind: "unary";
    input: typeof CloseRegistrationRequestSchema;
    output: typeof TournamentResponseSchema;
  },
  /**
   * @generated from rpc tournament_service.TournamentService.OpenCheckins
   */
  openCheckins: {
    methodKind: "unary";
    input: typeof OpenCheckinsRequestSchema;
    output: typeof TournamentResponseSchema;
  },
  /**
   * @generated from rpc tournament_service.TournamentService.CloseCheckins
   */
  closeCheckins: {
    methodKind: "unary";
    input: typeof CloseCheckinsRequestSchema;
    output: typeof TournamentResponseSchema;
  },
  /**
   * Uncheck everyone in. Use this some time before the beginning of a session.
   *
   * @generated from rpc tournament_service.TournamentService.UncheckAllIn
   */
  uncheckAllIn: {
    methodKind: "unary";
    input: typeof UncheckAllInRequestSchema;
    output: typeof TournamentResponseSchema;
  },
  /**
   * CheckIn allows players to check themselves in.
   *
   * @generated from rpc tournament_service.TournamentService.CheckIn
   */
  checkIn: {
    methodKind: "unary";
    input: typeof CheckinRequestSchema;
    output: typeof TournamentResponseSchema;
  },
  /**
   * @generated from rpc tournament_service.TournamentService.Register
   */
  register: {
    methodKind: "unary";
    input: typeof RegisterRequestSchema;
    output: typeof TournamentResponseSchema;
  },
  /**
   * @generated from rpc tournament_service.TournamentService.ExportTournament
   */
  exportTournament: {
    methodKind: "unary";
    input: typeof ExportTournamentRequestSchema;
    output: typeof ExportTournamentResponseSchema;
  },
  /**
   * @generated from rpc tournament_service.TournamentService.GetTournamentScorecards
   */
  getTournamentScorecards: {
    methodKind: "unary";
    input: typeof TournamentScorecardRequestSchema;
    output: typeof TournamentScorecardResponseSchema;
  },
  /**
   * @generated from rpc tournament_service.TournamentService.GetRecentAndUpcomingTournaments
   */
  getRecentAndUpcomingTournaments: {
    methodKind: "unary";
    input: typeof GetRecentAndUpcomingTournamentsRequestSchema;
    output: typeof GetRecentAndUpcomingTournamentsResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_proto_tournament_service_tournament_service, 0);

