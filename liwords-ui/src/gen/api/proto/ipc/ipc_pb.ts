// ipc is used for inter-process communication between the different
// services.
// This package will define many types that the different services should use,
// and should be roughly split up into different files by function.

// @generated by protoc-gen-es v2.5.1 with parameter "target=ts"
// @generated from file proto/ipc/ipc.proto (package ipc, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv2";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv2";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file proto/ipc/ipc.proto.
 */
export const file_proto_ipc_ipc: GenFile = /*@__PURE__*/
  fileDesc("ChNwcm90by9pcGMvaXBjLnByb3RvEgNpcGMiNQoUUmVnaXN0ZXJSZWFsbVJlcXVlc3QSDAoEcGF0aBgBIAEoCRIPCgd1c2VyX2lkGAIgASgJIicKFVJlZ2lzdGVyUmVhbG1SZXNwb25zZRIOCgZyZWFsbXMYAiADKAkiMAoNSW5pdFJlYWxtSW5mbxIPCgd1c2VyX2lkGAIgASgJEg4KBnJlYWxtcxgDIAMoCSIgCg5MYWdNZWFzdXJlbWVudBIOCgZsYWdfbXMYASABKAUiEwoEUG9uZxILCgNpcHMYASABKAkiIAoNU2VydmVyTWVzc2FnZRIPCgdtZXNzYWdlGAEgASgJIhgKCEpvaW5QYXRoEgwKBHBhdGgYASABKAkiDQoLVW5qb2luUmVhbG0q1AkKC01lc3NhZ2VUeXBlEhAKDFNFRUtfUkVRVUVTVBAAEhEKDU1BVENIX1JFUVVFU1QQARIdChlTT1VHSFRfR0FNRV9QUk9DRVNTX0VWRU5UEAISGQoVQ0xJRU5UX0dBTUVQTEFZX0VWRU5UEAMSGQoVU0VSVkVSX0dBTUVQTEFZX0VWRU5UEAQSFAoQR0FNRV9FTkRFRF9FVkVOVBAFEhoKFkdBTUVfSElTVE9SWV9SRUZSRVNIRVIQBhIRCg1FUlJPUl9NRVNTQUdFEAcSEgoOTkVXX0dBTUVfRVZFTlQQCBIhCh1TRVJWRVJfQ0hBTExFTkdFX1JFU1VMVF9FVkVOVBAJEhEKDVNFRUtfUkVRVUVTVFMQChIWChJPTkdPSU5HX0dBTUVfRVZFTlQQDBINCglUSU1FRF9PVVQQDRIRCg1PTkdPSU5HX0dBTUVTEA4SHQoZUkVBRFlfRk9SX1RPVVJOQU1FTlRfR0FNRRAPEhwKGFRPVVJOQU1FTlRfUk9VTkRfU1RBUlRFRBAQEhEKDUdBTUVfREVMRVRJT04QERISCg5NQVRDSF9SRVFVRVNUUxASEhgKFERFQ0xJTkVfU0VFS19SRVFVRVNUEBMSEAoMQ0hBVF9NRVNTQUdFEBQSGAoUQ0hBVF9NRVNTQUdFX0RFTEVURUQQFRIRCg1VU0VSX1BSRVNFTkNFEBYSEgoOVVNFUl9QUkVTRU5DRVMQFxISCg5TRVJWRVJfTUVTU0FHRRAYEhIKDlJFQURZX0ZPUl9HQU1FEBkSEwoPTEFHX01FQVNVUkVNRU5UEBoSHwobVE9VUk5BTUVOVF9HQU1FX0VOREVEX0VWRU5UEBsSFgoSVE9VUk5BTUVOVF9NRVNTQUdFEBwSEwoPUkVNQVRDSF9TVEFSVEVEEB0SHwobVE9VUk5BTUVOVF9ESVZJU0lPTl9NRVNTQUdFEB4SJwojVE9VUk5BTUVOVF9ESVZJU0lPTl9ERUxFVEVEX01FU1NBR0UQHxIlCiFUT1VSTkFNRU5UX0ZVTExfRElWSVNJT05TX01FU1NBR0UQIBIuCipUT1VSTkFNRU5UX0RJVklTSU9OX1JPVU5EX0NPTlRST0xTX01FU1NBR0UQIhIoCiRUT1VSTkFNRU5UX0RJVklTSU9OX1BBSVJJTkdTX01FU1NBR0UQIxIoCiRUT1VSTkFNRU5UX0RJVklTSU9OX0NPTlRST0xTX01FU1NBR0UQJBItCilUT1VSTkFNRU5UX0RJVklTSU9OX1BMQVlFUl9DSEFOR0VfTUVTU0FHRRAlEh8KG1RPVVJOQU1FTlRfRklOSVNIRURfTUVTU0FHRRAmEjAKLFRPVVJOQU1FTlRfRElWSVNJT05fUEFJUklOR1NfREVMRVRFRF9NRVNTQUdFECcSEgoOUFJFU0VOQ0VfRU5UUlkQKBIVChFBQ1RJVkVfR0FNRV9FTlRSWRApEhMKD0dBTUVfTUVUQV9FVkVOVBAqEhgKFFBST0ZJTEVfVVBEQVRFX0VWRU5UECsSGwoXT01HV09SRFNfR0FNRVBMQVlfRVZFTlQQLBIZChVPTUdXT1JEU19HQU1FRE9DVU1FTlQQLRIdChlUT1VSTkFNRU5UX1BMQVlFUl9DSEVDS0lOEC5CcAoHY29tLmlwY0IISXBjUHJvdG9QAVovZ2l0aHViLmNvbS93b29nbGVzLWlvL2xpd29yZHMvcnBjL2FwaS9wcm90by9pcGOiAgNJWFiqAgNJcGPKAgNJcGPiAg9JcGNcR1BCTWV0YWRhdGHqAgNJcGNiBnByb3RvMw");

/**
 * @generated from message ipc.RegisterRealmRequest
 */
export type RegisterRealmRequest = Message<"ipc.RegisterRealmRequest"> & {
  /**
   * @generated from field: string path = 1;
   */
  path: string;

  /**
   * @generated from field: string user_id = 2;
   */
  userId: string;
};

/**
 * Describes the message ipc.RegisterRealmRequest.
 * Use `create(RegisterRealmRequestSchema)` to create a new message.
 */
export const RegisterRealmRequestSchema: GenMessage<RegisterRealmRequest> = /*@__PURE__*/
  messageDesc(file_proto_ipc_ipc, 0);

/**
 * @generated from message ipc.RegisterRealmResponse
 */
export type RegisterRealmResponse = Message<"ipc.RegisterRealmResponse"> & {
  /**
   * realm should be made obsolete. RegisterRealmResponse should always
   * return a list of realms.
   *
   * @generated from field: repeated string realms = 2;
   */
  realms: string[];
};

/**
 * Describes the message ipc.RegisterRealmResponse.
 * Use `create(RegisterRealmResponseSchema)` to create a new message.
 */
export const RegisterRealmResponseSchema: GenMessage<RegisterRealmResponse> = /*@__PURE__*/
  messageDesc(file_proto_ipc_ipc, 1);

/**
 * InitRealmInfo is a request for the API server to send back information
 * about that realm back to the user. For example, for the lobby realm,
 * we would like lists of active games, chats, etc; for game realms, we would
 * like the game history.
 *
 * @generated from message ipc.InitRealmInfo
 */
export type InitRealmInfo = Message<"ipc.InitRealmInfo"> & {
  /**
   * @generated from field: string user_id = 2;
   */
  userId: string;

  /**
   * @generated from field: repeated string realms = 3;
   */
  realms: string[];
};

/**
 * Describes the message ipc.InitRealmInfo.
 * Use `create(InitRealmInfoSchema)` to create a new message.
 */
export const InitRealmInfoSchema: GenMessage<InitRealmInfo> = /*@__PURE__*/
  messageDesc(file_proto_ipc_ipc, 2);

/**
 * @generated from message ipc.LagMeasurement
 */
export type LagMeasurement = Message<"ipc.LagMeasurement"> & {
  /**
   * @generated from field: int32 lag_ms = 1;
   */
  lagMs: number;
};

/**
 * Describes the message ipc.LagMeasurement.
 * Use `create(LagMeasurementSchema)` to create a new message.
 */
export const LagMeasurementSchema: GenMessage<LagMeasurement> = /*@__PURE__*/
  messageDesc(file_proto_ipc_ipc, 3);

/**
 * @generated from message ipc.Pong
 */
export type Pong = Message<"ipc.Pong"> & {
  /**
   * @generated from field: string ips = 1;
   */
  ips: string;
};

/**
 * Describes the message ipc.Pong.
 * Use `create(PongSchema)` to create a new message.
 */
export const PongSchema: GenMessage<Pong> = /*@__PURE__*/
  messageDesc(file_proto_ipc_ipc, 4);

/**
 * @generated from message ipc.ServerMessage
 */
export type ServerMessage = Message<"ipc.ServerMessage"> & {
  /**
   * @generated from field: string message = 1;
   */
  message: string;
};

/**
 * Describes the message ipc.ServerMessage.
 * Use `create(ServerMessageSchema)` to create a new message.
 */
export const ServerMessageSchema: GenMessage<ServerMessage> = /*@__PURE__*/
  messageDesc(file_proto_ipc_ipc, 5);

/**
 * When we go to a new path in our SPA, we send a JoinPath. When we leave the
 * path, we send an Unjoin realm. d
 *
 * @generated from message ipc.JoinPath
 */
export type JoinPath = Message<"ipc.JoinPath"> & {
  /**
   * @generated from field: string path = 1;
   */
  path: string;
};

/**
 * Describes the message ipc.JoinPath.
 * Use `create(JoinPathSchema)` to create a new message.
 */
export const JoinPathSchema: GenMessage<JoinPath> = /*@__PURE__*/
  messageDesc(file_proto_ipc_ipc, 6);

/**
 * @generated from message ipc.UnjoinRealm
 */
export type UnjoinRealm = Message<"ipc.UnjoinRealm"> & {
};

/**
 * Describes the message ipc.UnjoinRealm.
 * Use `create(UnjoinRealmSchema)` to create a new message.
 */
export const UnjoinRealmSchema: GenMessage<UnjoinRealm> = /*@__PURE__*/
  messageDesc(file_proto_ipc_ipc, 7);

/**
 * In order to make socket messages as small and simple as possible,
 * we should include the message type with the socket message.
 * Whenever we add a new client <-> server socket message type,
 * add it to this list.
 *
 * @generated from enum ipc.MessageType
 */
export enum MessageType {
  /**
   * @generated from enum value: SEEK_REQUEST = 0;
   */
  SEEK_REQUEST = 0,

  /**
   * @generated from enum value: MATCH_REQUEST = 1;
   */
  MATCH_REQUEST = 1,

  /**
   * @generated from enum value: SOUGHT_GAME_PROCESS_EVENT = 2;
   */
  SOUGHT_GAME_PROCESS_EVENT = 2,

  /**
   * @generated from enum value: CLIENT_GAMEPLAY_EVENT = 3;
   */
  CLIENT_GAMEPLAY_EVENT = 3,

  /**
   * deprecate soon
   *
   * @generated from enum value: SERVER_GAMEPLAY_EVENT = 4;
   */
  SERVER_GAMEPLAY_EVENT = 4,

  /**
   * @generated from enum value: GAME_ENDED_EVENT = 5;
   */
  GAME_ENDED_EVENT = 5,

  /**
   * @generated from enum value: GAME_HISTORY_REFRESHER = 6;
   */
  GAME_HISTORY_REFRESHER = 6,

  /**
   * @generated from enum value: ERROR_MESSAGE = 7;
   */
  ERROR_MESSAGE = 7,

  /**
   * @generated from enum value: NEW_GAME_EVENT = 8;
   */
  NEW_GAME_EVENT = 8,

  /**
   * @generated from enum value: SERVER_CHALLENGE_RESULT_EVENT = 9;
   */
  SERVER_CHALLENGE_RESULT_EVENT = 9,

  /**
   * @generated from enum value: SEEK_REQUESTS = 10;
   */
  SEEK_REQUESTS = 10,

  /**
   * @generated from enum value: ONGOING_GAME_EVENT = 12;
   */
  ONGOING_GAME_EVENT = 12,

  /**
   * @generated from enum value: TIMED_OUT = 13;
   */
  TIMED_OUT = 13,

  /**
   * @generated from enum value: ONGOING_GAMES = 14;
   */
  ONGOING_GAMES = 14,

  /**
   * @generated from enum value: READY_FOR_TOURNAMENT_GAME = 15;
   */
  READY_FOR_TOURNAMENT_GAME = 15,

  /**
   * @generated from enum value: TOURNAMENT_ROUND_STARTED = 16;
   */
  TOURNAMENT_ROUND_STARTED = 16,

  /**
   * @generated from enum value: GAME_DELETION = 17;
   */
  GAME_DELETION = 17,

  /**
   * @generated from enum value: MATCH_REQUESTS = 18;
   */
  MATCH_REQUESTS = 18,

  /**
   * @generated from enum value: DECLINE_SEEK_REQUEST = 19;
   */
  DECLINE_SEEK_REQUEST = 19,

  /**
   * @generated from enum value: CHAT_MESSAGE = 20;
   */
  CHAT_MESSAGE = 20,

  /**
   * @generated from enum value: CHAT_MESSAGE_DELETED = 21;
   */
  CHAT_MESSAGE_DELETED = 21,

  /**
   * @generated from enum value: USER_PRESENCE = 22;
   */
  USER_PRESENCE = 22,

  /**
   * @generated from enum value: USER_PRESENCES = 23;
   */
  USER_PRESENCES = 23,

  /**
   * @generated from enum value: SERVER_MESSAGE = 24;
   */
  SERVER_MESSAGE = 24,

  /**
   * @generated from enum value: READY_FOR_GAME = 25;
   */
  READY_FOR_GAME = 25,

  /**
   * @generated from enum value: LAG_MEASUREMENT = 26;
   */
  LAG_MEASUREMENT = 26,

  /**
   * @generated from enum value: TOURNAMENT_GAME_ENDED_EVENT = 27;
   */
  TOURNAMENT_GAME_ENDED_EVENT = 27,

  /**
   * used for TournamentDataResponse (metadata)
   *
   * @generated from enum value: TOURNAMENT_MESSAGE = 28;
   */
  TOURNAMENT_MESSAGE = 28,

  /**
   * @generated from enum value: REMATCH_STARTED = 29;
   */
  REMATCH_STARTED = 29,

  /**
   * @generated from enum value: TOURNAMENT_DIVISION_MESSAGE = 30;
   */
  TOURNAMENT_DIVISION_MESSAGE = 30,

  /**
   * @generated from enum value: TOURNAMENT_DIVISION_DELETED_MESSAGE = 31;
   */
  TOURNAMENT_DIVISION_DELETED_MESSAGE = 31,

  /**
   * @generated from enum value: TOURNAMENT_FULL_DIVISIONS_MESSAGE = 32;
   */
  TOURNAMENT_FULL_DIVISIONS_MESSAGE = 32,

  /**
   * @generated from enum value: TOURNAMENT_DIVISION_ROUND_CONTROLS_MESSAGE = 34;
   */
  TOURNAMENT_DIVISION_ROUND_CONTROLS_MESSAGE = 34,

  /**
   * @generated from enum value: TOURNAMENT_DIVISION_PAIRINGS_MESSAGE = 35;
   */
  TOURNAMENT_DIVISION_PAIRINGS_MESSAGE = 35,

  /**
   * @generated from enum value: TOURNAMENT_DIVISION_CONTROLS_MESSAGE = 36;
   */
  TOURNAMENT_DIVISION_CONTROLS_MESSAGE = 36,

  /**
   * @generated from enum value: TOURNAMENT_DIVISION_PLAYER_CHANGE_MESSAGE = 37;
   */
  TOURNAMENT_DIVISION_PLAYER_CHANGE_MESSAGE = 37,

  /**
   * @generated from enum value: TOURNAMENT_FINISHED_MESSAGE = 38;
   */
  TOURNAMENT_FINISHED_MESSAGE = 38,

  /**
   * @generated from enum value: TOURNAMENT_DIVISION_PAIRINGS_DELETED_MESSAGE = 39;
   */
  TOURNAMENT_DIVISION_PAIRINGS_DELETED_MESSAGE = 39,

  /**
   * @generated from enum value: PRESENCE_ENTRY = 40;
   */
  PRESENCE_ENTRY = 40,

  /**
   * @generated from enum value: ACTIVE_GAME_ENTRY = 41;
   */
  ACTIVE_GAME_ENTRY = 41,

  /**
   * @generated from enum value: GAME_META_EVENT = 42;
   */
  GAME_META_EVENT = 42,

  /**
   * @generated from enum value: PROFILE_UPDATE_EVENT = 43;
   */
  PROFILE_UPDATE_EVENT = 43,

  /**
   * Add more events here. The total number of events should fit in a byte.
   * We should definitely not be using anywhere close to 255 events, and
   * in order to enforce that I'll be forcing the event type header to just be
   * a byte long.
   *
   * @generated from enum value: OMGWORDS_GAMEPLAY_EVENT = 44;
   */
  OMGWORDS_GAMEPLAY_EVENT = 44,

  /**
   * @generated from enum value: OMGWORDS_GAMEDOCUMENT = 45;
   */
  OMGWORDS_GAMEDOCUMENT = 45,

  /**
   * @generated from enum value: TOURNAMENT_PLAYER_CHECKIN = 46;
   */
  TOURNAMENT_PLAYER_CHECKIN = 46,
}

/**
 * Describes the enum ipc.MessageType.
 */
export const MessageTypeSchema: GenEnum<MessageType> = /*@__PURE__*/
  enumDesc(file_proto_ipc_ipc, 0);

