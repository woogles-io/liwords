// @generated by protoc-gen-es v2.9.0 with parameter "target=ts"
// @generated from file proto/ipc/tournament.proto (package ipc, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv2";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv2";
import type { Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { GameEndReason, GameRequest } from "./omgwords_pb";
import { file_proto_ipc_omgwords } from "./omgwords_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file proto/ipc/tournament.proto.
 */
export const file_proto_ipc_tournament: GenFile = /*@__PURE__*/
  fileDesc("Chpwcm90by9pcGMvdG91cm5hbWVudC5wcm90bxIDaXBjIqMCChhUb3VybmFtZW50R2FtZUVuZGVkRXZlbnQSDwoHZ2FtZV9pZBgBIAEoCRI1CgdwbGF5ZXJzGAIgAygLMiQuaXBjLlRvdXJuYW1lbnRHYW1lRW5kZWRFdmVudC5QbGF5ZXISJgoKZW5kX3JlYXNvbhgDIAEoDjISLmlwYy5HYW1lRW5kUmVhc29uEgwKBHRpbWUYBCABKAMSDQoFcm91bmQYBSABKAUSEAoIZGl2aXNpb24YBiABKAkSEgoKZ2FtZV9pbmRleBgHIAEoBRpUCgZQbGF5ZXISEAoIdXNlcm5hbWUYASABKAkSDQoFc2NvcmUYAiABKAUSKQoGcmVzdWx0GAMgASgOMhkuaXBjLlRvdXJuYW1lbnRHYW1lUmVzdWx0IpIBChZUb3VybmFtZW50Um91bmRTdGFydGVkEhUKDXRvdXJuYW1lbnRfaWQYASABKAkSEAoIZGl2aXNpb24YAiABKAkSDQoFcm91bmQYAyABKAUSEgoKZ2FtZV9pbmRleBgEIAEoBRIsCghkZWFkbGluZRgFIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXAiiAEKFlJlYWR5Rm9yVG91cm5hbWVudEdhbWUSFQoNdG91cm5hbWVudF9pZBgBIAEoCRIQCghkaXZpc2lvbhgCIAEoCRINCgVyb3VuZBgDIAEoBRIRCglwbGF5ZXJfaWQYBCABKAkSEgoKZ2FtZV9pbmRleBgFIAEoBRIPCgd1bnJlYWR5GAYgASgIIlUKEFRvdXJuYW1lbnRQZXJzb24SCgoCaWQYASABKAkSDgoGcmF0aW5nGAIgASgFEhEKCXN1c3BlbmRlZBgDIAEoCBISCgpjaGVja2VkX2luGAQgASgIIlkKEVRvdXJuYW1lbnRQZXJzb25zEgoKAmlkGAEgASgJEhAKCGRpdmlzaW9uGAIgASgJEiYKB3BlcnNvbnMYAyADKAsyFS5pcGMuVG91cm5hbWVudFBlcnNvbiKDAwoMUm91bmRDb250cm9sEioKDnBhaXJpbmdfbWV0aG9kGAEgASgOMhIuaXBjLlBhaXJpbmdNZXRob2QSJgoMZmlyc3RfbWV0aG9kGAIgASgOMhAuaXBjLkZpcnN0TWV0aG9kEhcKD2dhbWVzX3Blcl9yb3VuZBgDIAEoBRINCgVyb3VuZBgEIAEoBRIOCgZmYWN0b3IYBSABKAUSFgoOaW5pdGlhbF9mb250ZXMYBiABKAUSEwoLbWF4X3JlcGVhdHMYByABKAUSHgoWYWxsb3dfb3Zlcl9tYXhfcmVwZWF0cxgIIAEoCBIeChZyZXBlYXRfcmVsYXRpdmVfd2VpZ2h0GAkgASgFEiYKHndpbl9kaWZmZXJlbmNlX3JlbGF0aXZlX3dlaWdodBgKIAEoBRIYChBwbGF5X3dpdGhpbl90ZWFtGAsgASgIEiAKE3NwcmVhZF9jYXBfb3ZlcnJpZGUYDCABKA1IAIgBAUIWChRfc3ByZWFkX2NhcF9vdmVycmlkZSKzAgoQRGl2aXNpb25Db250cm9scxIKCgJpZBgBIAEoCRIQCghkaXZpc2lvbhgCIAEoCRImCgxnYW1lX3JlcXVlc3QYAyABKAsyEC5pcGMuR2FtZVJlcXVlc3QSMwoQc3VzcGVuZGVkX3Jlc3VsdBgEIAEoDjIZLmlwYy5Ub3VybmFtZW50R2FtZVJlc3VsdBIYChBzdXNwZW5kZWRfc3ByZWFkGAUgASgFEhIKCmF1dG9fc3RhcnQYBiABKAgSEgoKc3ByZWFkX2NhcBgHIAEoDRIRCglnaWJzb25pemUYCCABKAgSFQoNZ2lic29uX3NwcmVhZBgJIAEoBRIZChFtaW5pbXVtX3BsYWNlbWVudBgKIAEoBRIdChVtYXhpbXVtX2J5ZV9wbGFjZW1lbnQYCyABKAUihQEKDlRvdXJuYW1lbnRHYW1lEg4KBnNjb3JlcxgBIAMoBRIqCgdyZXN1bHRzGAIgAygOMhkuaXBjLlRvdXJuYW1lbnRHYW1lUmVzdWx0EisKD2dhbWVfZW5kX3JlYXNvbhgDIAEoDjISLmlwYy5HYW1lRW5kUmVhc29uEgoKAmlkGAQgASgJIpABCgdQYWlyaW5nEg8KB3BsYXllcnMYASADKAUSDQoFcm91bmQYAiABKAUSIgoFZ2FtZXMYAyADKAsyEy5pcGMuVG91cm5hbWVudEdhbWUSKwoIb3V0Y29tZXMYBCADKA4yGS5pcGMuVG91cm5hbWVudEdhbWVSZXN1bHQSFAoMcmVhZHlfc3RhdGVzGAUgAygJInQKDlBsYXllclN0YW5kaW5nEhEKCXBsYXllcl9pZBgBIAEoCRIMCgR3aW5zGAIgASgFEg4KBmxvc3NlcxgDIAEoBRINCgVkcmF3cxgEIAEoBRIOCgZzcHJlYWQYBSABKAUSEgoKZ2lic29uaXplZBgGIAEoCCI4Cg5Sb3VuZFN0YW5kaW5ncxImCglzdGFuZGluZ3MYASADKAsyEy5pcGMuUGxheWVyU3RhbmRpbmciggIKGERpdmlzaW9uUGFpcmluZ3NSZXNwb25zZRIKCgJpZBgBIAEoCRIQCghkaXZpc2lvbhgCIAEoCRInChFkaXZpc2lvbl9wYWlyaW5ncxgDIAMoCzIMLmlwYy5QYWlyaW5nElAKEmRpdmlzaW9uX3N0YW5kaW5ncxgEIAMoCzI0LmlwYy5EaXZpc2lvblBhaXJpbmdzUmVzcG9uc2UuRGl2aXNpb25TdGFuZGluZ3NFbnRyeRpNChZEaXZpc2lvblN0YW5kaW5nc0VudHJ5EgsKA2tleRgBIAEoBRIiCgV2YWx1ZRgCIAEoCzITLmlwYy5Sb3VuZFN0YW5kaW5nczoCOAEiTgofRGl2aXNpb25QYWlyaW5nc0RlbGV0ZWRSZXNwb25zZRIKCgJpZBgBIAEoCRIQCghkaXZpc2lvbhgCIAEoCRINCgVyb3VuZBgDIAEoBSK1AgodUGxheWVyc0FkZGVkT3JSZW1vdmVkUmVzcG9uc2USCgoCaWQYASABKAkSEAoIZGl2aXNpb24YAiABKAkSJwoHcGxheWVycxgDIAEoCzIWLmlwYy5Ub3VybmFtZW50UGVyc29ucxInChFkaXZpc2lvbl9wYWlyaW5ncxgEIAMoCzIMLmlwYy5QYWlyaW5nElUKEmRpdmlzaW9uX3N0YW5kaW5ncxgFIAMoCzI5LmlwYy5QbGF5ZXJzQWRkZWRPclJlbW92ZWRSZXNwb25zZS5EaXZpc2lvblN0YW5kaW5nc0VudHJ5Gk0KFkRpdmlzaW9uU3RhbmRpbmdzRW50cnkSCwoDa2V5GAEgASgFEiIKBXZhbHVlGAIgASgLMhMuaXBjLlJvdW5kU3RhbmRpbmdzOgI4ASKnAgoVRGl2aXNpb25Sb3VuZENvbnRyb2xzEgoKAmlkGAEgASgJEhAKCGRpdmlzaW9uGAIgASgJEikKDnJvdW5kX2NvbnRyb2xzGAMgAygLMhEuaXBjLlJvdW5kQ29udHJvbBInChFkaXZpc2lvbl9wYWlyaW5ncxgEIAMoCzIMLmlwYy5QYWlyaW5nEk0KEmRpdmlzaW9uX3N0YW5kaW5ncxgFIAMoCzIxLmlwYy5EaXZpc2lvblJvdW5kQ29udHJvbHMuRGl2aXNpb25TdGFuZGluZ3NFbnRyeRpNChZEaXZpc2lvblN0YW5kaW5nc0VudHJ5EgsKA2tleRgBIAEoBRIiCgV2YWx1ZRgCIAEoCzITLmlwYy5Sb3VuZFN0YW5kaW5nczoCOAEiiwIKGERpdmlzaW9uQ29udHJvbHNSZXNwb25zZRIKCgJpZBgBIAEoCRIQCghkaXZpc2lvbhgCIAEoCRIwChFkaXZpc2lvbl9jb250cm9scxgDIAEoCzIVLmlwYy5EaXZpc2lvbkNvbnRyb2xzElAKEmRpdmlzaW9uX3N0YW5kaW5ncxgEIAMoCzI0LmlwYy5EaXZpc2lvbkNvbnRyb2xzUmVzcG9uc2UuRGl2aXNpb25TdGFuZGluZ3NFbnRyeRpNChZEaXZpc2lvblN0YW5kaW5nc0VudHJ5EgsKA2tleRgBIAEoBRIiCgV2YWx1ZRgCIAEoCzITLmlwYy5Sb3VuZFN0YW5kaW5nczoCOAEi6wMKHlRvdXJuYW1lbnREaXZpc2lvbkRhdGFSZXNwb25zZRIKCgJpZBgBIAEoCRIQCghkaXZpc2lvbhgCIAEoCRInCgdwbGF5ZXJzGAMgASgLMhYuaXBjLlRvdXJuYW1lbnRQZXJzb25zEkUKCXN0YW5kaW5ncxgEIAMoCzIyLmlwYy5Ub3VybmFtZW50RGl2aXNpb25EYXRhUmVzcG9uc2UuU3RhbmRpbmdzRW50cnkSSAoLcGFpcmluZ19tYXAYBSADKAsyMy5pcGMuVG91cm5hbWVudERpdmlzaW9uRGF0YVJlc3BvbnNlLlBhaXJpbmdNYXBFbnRyeRInCghjb250cm9scxgGIAEoCzIVLmlwYy5EaXZpc2lvbkNvbnRyb2xzEikKDnJvdW5kX2NvbnRyb2xzGAcgAygLMhEuaXBjLlJvdW5kQ29udHJvbBIVCg1jdXJyZW50X3JvdW5kGAggASgFGkUKDlN0YW5kaW5nc0VudHJ5EgsKA2tleRgBIAEoBRIiCgV2YWx1ZRgCIAEoCzITLmlwYy5Sb3VuZFN0YW5kaW5nczoCOAEaPwoPUGFpcmluZ01hcEVudHJ5EgsKA2tleRgBIAEoCRIbCgV2YWx1ZRgCIAEoCzIMLmlwYy5QYWlyaW5nOgI4ASLBAQoXRnVsbFRvdXJuYW1lbnREaXZpc2lvbnMSPgoJZGl2aXNpb25zGAEgAygLMisuaXBjLkZ1bGxUb3VybmFtZW50RGl2aXNpb25zLkRpdmlzaW9uc0VudHJ5Eg8KB3N0YXJ0ZWQYAiABKAgaVQoORGl2aXNpb25zRW50cnkSCwoDa2V5GAEgASgJEjIKBXZhbHVlGAIgASgLMiMuaXBjLlRvdXJuYW1lbnREaXZpc2lvbkRhdGFSZXNwb25zZToCOAEiKAoaVG91cm5hbWVudEZpbmlzaGVkUmVzcG9uc2USCgoCaWQYASABKAki9gIKFlRvdXJuYW1lbnREYXRhUmVzcG9uc2USCgoCaWQYASABKAkSDAoEbmFtZRgCIAEoCRITCgtkZXNjcmlwdGlvbhgDIAEoCRIaChJleGVjdXRpdmVfZGlyZWN0b3IYBCABKAkSKQoJZGlyZWN0b3JzGAUgASgLMhYuaXBjLlRvdXJuYW1lbnRQZXJzb25zEhIKCmlzX3N0YXJ0ZWQYBiABKAgSLgoKc3RhcnRfdGltZRgHIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASOAoUc2NoZWR1bGVkX3N0YXJ0X3RpbWUYCCABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEjYKEnNjaGVkdWxlZF9lbmRfdGltZRgJIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASFQoNY2hlY2tpbnNfb3BlbhgKIAEoCBIZChFyZWdpc3RyYXRpb25fb3BlbhgLIAEoCCJBCiFUb3VybmFtZW50RGl2aXNpb25EZWxldGVkUmVzcG9uc2USCgoCaWQYASABKAkSEAoIZGl2aXNpb24YAiABKAkiXAoVUGxheWVyQ2hlY2tpblJlc3BvbnNlEgoKAmlkGAEgASgJEhAKCGRpdmlzaW9uGAIgASgJEiUKBnBsYXllchgDIAEoCzIVLmlwYy5Ub3VybmFtZW50UGVyc29uKogBChRUb3VybmFtZW50R2FtZVJlc3VsdBINCglOT19SRVNVTFQQABIHCgNXSU4QARIICgRMT1NTEAISCAoERFJBVxADEgcKA0JZRRAEEg8KC0ZPUkZFSVRfV0lOEAUSEAoMRk9SRkVJVF9MT1NTEAYSDgoKRUxJTUlOQVRFRBAHEggKBFZPSUQQCCrkAQoNUGFpcmluZ01ldGhvZBIKCgZSQU5ET00QABIPCgtST1VORF9ST0JJThABEhQKEEtJTkdfT0ZfVEhFX0hJTEwQAhIPCgtFTElNSU5BVElPThADEgoKBkZBQ1RPUhAEEhIKDklOSVRJQUxfRk9OVEVTEAUSCQoFU1dJU1MQBhINCglRVUlDS1BBSVIQBxIKCgZNQU5VQUwQCBIUChBURUFNX1JPVU5EX1JPQklOEAkSGwoXSU5URVJMRUFWRURfUk9VTkRfUk9CSU4QChIWChJTTkFLRURfUk9VTkRfUk9CSU4QCypGCgtGaXJzdE1ldGhvZBIQCgxNQU5VQUxfRklSU1QQABIQCgxSQU5ET01fRklSU1QQARITCg9BVVRPTUFUSUNfRklSU1QQAkJ3Cgdjb20uaXBjQg9Ub3VybmFtZW50UHJvdG9QAVovZ2l0aHViLmNvbS93b29nbGVzLWlvL2xpd29yZHMvcnBjL2FwaS9wcm90by9pcGOiAgNJWFiqAgNJcGPKAgNJcGPiAg9JcGNcR1BCTWV0YWRhdGHqAgNJcGNiBnByb3RvMw", [file_google_protobuf_timestamp, file_proto_ipc_omgwords]);

/**
 * New tournaments will use full tournament
 * messages (specifically, TournamentDivisionDataResponse et al).
 * This event is also used in the tournament_service's RecentGamesResponse,
 * which can be used to fetch information for the last games played in
 * a tournament.
 *
 * @generated from message ipc.TournamentGameEndedEvent
 */
export type TournamentGameEndedEvent = Message<"ipc.TournamentGameEndedEvent"> & {
  /**
   * @generated from field: string game_id = 1;
   */
  gameId: string;

  /**
   * @generated from field: repeated ipc.TournamentGameEndedEvent.Player players = 2;
   */
  players: TournamentGameEndedEvent_Player[];

  /**
   * @generated from field: ipc.GameEndReason end_reason = 3;
   */
  endReason: GameEndReason;

  /**
   * Time that the game ended
   *
   * @generated from field: int64 time = 4;
   */
  time: bigint;

  /**
   * @generated from field: int32 round = 5;
   */
  round: number;

  /**
   * @generated from field: string division = 6;
   */
  division: string;

  /**
   * @generated from field: int32 game_index = 7;
   */
  gameIndex: number;
};

/**
 * Describes the message ipc.TournamentGameEndedEvent.
 * Use `create(TournamentGameEndedEventSchema)` to create a new message.
 */
export const TournamentGameEndedEventSchema: GenMessage<TournamentGameEndedEvent> = /*@__PURE__*/
  messageDesc(file_proto_ipc_tournament, 0);

/**
 * @generated from message ipc.TournamentGameEndedEvent.Player
 */
export type TournamentGameEndedEvent_Player = Message<"ipc.TournamentGameEndedEvent.Player"> & {
  /**
   * @generated from field: string username = 1;
   */
  username: string;

  /**
   * @generated from field: int32 score = 2;
   */
  score: number;

  /**
   * @generated from field: ipc.TournamentGameResult result = 3;
   */
  result: TournamentGameResult;
};

/**
 * Describes the message ipc.TournamentGameEndedEvent.Player.
 * Use `create(TournamentGameEndedEvent_PlayerSchema)` to create a new message.
 */
export const TournamentGameEndedEvent_PlayerSchema: GenMessage<TournamentGameEndedEvent_Player> = /*@__PURE__*/
  messageDesc(file_proto_ipc_tournament, 0, 0);

/**
 * This message makes the "Status Bar" show up and also tells the players
 * that the backend is now accepting "ready" messages for this round.
 *
 * @generated from message ipc.TournamentRoundStarted
 */
export type TournamentRoundStarted = Message<"ipc.TournamentRoundStarted"> & {
  /**
   * @generated from field: string tournament_id = 1;
   */
  tournamentId: string;

  /**
   * @generated from field: string division = 2;
   */
  division: string;

  /**
   * @generated from field: int32 round = 3;
   */
  round: number;

  /**
   * for matchplay type rounds etc.
   *
   * @generated from field: int32 game_index = 4;
   */
  gameIndex: number;

  /**
   * @generated from field: google.protobuf.Timestamp deadline = 5;
   */
  deadline?: Timestamp;
};

/**
 * Describes the message ipc.TournamentRoundStarted.
 * Use `create(TournamentRoundStartedSchema)` to create a new message.
 */
export const TournamentRoundStartedSchema: GenMessage<TournamentRoundStarted> = /*@__PURE__*/
  messageDesc(file_proto_ipc_tournament, 1);

/**
 * This can be sent from the user to the tournament or vice-versa.
 *
 * @generated from message ipc.ReadyForTournamentGame
 */
export type ReadyForTournamentGame = Message<"ipc.ReadyForTournamentGame"> & {
  /**
   * @generated from field: string tournament_id = 1;
   */
  tournamentId: string;

  /**
   * @generated from field: string division = 2;
   */
  division: string;

  /**
   * @generated from field: int32 round = 3;
   */
  round: number;

  /**
   * @generated from field: string player_id = 4;
   */
  playerId: string;

  /**
   * within a matchplay type tournament where several
   *
   * @generated from field: int32 game_index = 5;
   */
  gameIndex: number;

  /**
   * games share a round.
   *
   * if true, this is a NOT-ready message.
   *
   * @generated from field: bool unready = 6;
   */
  unready: boolean;
};

/**
 * Describes the message ipc.ReadyForTournamentGame.
 * Use `create(ReadyForTournamentGameSchema)` to create a new message.
 */
export const ReadyForTournamentGameSchema: GenMessage<ReadyForTournamentGame> = /*@__PURE__*/
  messageDesc(file_proto_ipc_tournament, 2);

/**
 * @generated from message ipc.TournamentPerson
 */
export type TournamentPerson = Message<"ipc.TournamentPerson"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: int32 rating = 2;
   */
  rating: number;

  /**
   * @generated from field: bool suspended = 3;
   */
  suspended: boolean;

  /**
   * @generated from field: bool checked_in = 4;
   */
  checkedIn: boolean;
};

/**
 * Describes the message ipc.TournamentPerson.
 * Use `create(TournamentPersonSchema)` to create a new message.
 */
export const TournamentPersonSchema: GenMessage<TournamentPerson> = /*@__PURE__*/
  messageDesc(file_proto_ipc_tournament, 3);

/**
 * @generated from message ipc.TournamentPersons
 */
export type TournamentPersons = Message<"ipc.TournamentPersons"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string division = 2;
   */
  division: string;

  /**
   * @generated from field: repeated ipc.TournamentPerson persons = 3;
   */
  persons: TournamentPerson[];
};

/**
 * Describes the message ipc.TournamentPersons.
 * Use `create(TournamentPersonsSchema)` to create a new message.
 */
export const TournamentPersonsSchema: GenMessage<TournamentPersons> = /*@__PURE__*/
  messageDesc(file_proto_ipc_tournament, 4);

/**
 * @generated from message ipc.RoundControl
 */
export type RoundControl = Message<"ipc.RoundControl"> & {
  /**
   * @generated from field: ipc.PairingMethod pairing_method = 1;
   */
  pairingMethod: PairingMethod;

  /**
   * @generated from field: ipc.FirstMethod first_method = 2;
   */
  firstMethod: FirstMethod;

  /**
   * @generated from field: int32 games_per_round = 3;
   */
  gamesPerRound: number;

  /**
   * @generated from field: int32 round = 4;
   */
  round: number;

  /**
   * @generated from field: int32 factor = 5;
   */
  factor: number;

  /**
   * @generated from field: int32 initial_fontes = 6;
   */
  initialFontes: number;

  /**
   * @generated from field: int32 max_repeats = 7;
   */
  maxRepeats: number;

  /**
   * @generated from field: bool allow_over_max_repeats = 8;
   */
  allowOverMaxRepeats: boolean;

  /**
   * @generated from field: int32 repeat_relative_weight = 9;
   */
  repeatRelativeWeight: number;

  /**
   * @generated from field: int32 win_difference_relative_weight = 10;
   */
  winDifferenceRelativeWeight: number;

  /**
   * @generated from field: bool play_within_team = 11;
   */
  playWithinTeam: boolean;

  /**
   * Optional is needed to represent:
   * - `nil` for no override at all
   * - `0` overriding the default to disable the spread cap
   * Without an optional, these two cases would be indistinguishable.
   *
   * @generated from field: optional uint32 spread_cap_override = 12;
   */
  spreadCapOverride?: number;
};

/**
 * Describes the message ipc.RoundControl.
 * Use `create(RoundControlSchema)` to create a new message.
 */
export const RoundControlSchema: GenMessage<RoundControl> = /*@__PURE__*/
  messageDesc(file_proto_ipc_tournament, 5);

/**
 * @generated from message ipc.DivisionControls
 */
export type DivisionControls = Message<"ipc.DivisionControls"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string division = 2;
   */
  division: string;

  /**
   * @generated from field: ipc.GameRequest game_request = 3;
   */
  gameRequest?: GameRequest;

  /**
   * @generated from field: ipc.TournamentGameResult suspended_result = 4;
   */
  suspendedResult: TournamentGameResult;

  /**
   * @generated from field: int32 suspended_spread = 5;
   */
  suspendedSpread: number;

  /**
   * @generated from field: bool auto_start = 6;
   */
  autoStart: boolean;

  /**
   * @generated from field: uint32 spread_cap = 7;
   */
  spreadCap: number;

  /**
   * @generated from field: bool gibsonize = 8;
   */
  gibsonize: boolean;

  /**
   * @generated from field: int32 gibson_spread = 9;
   */
  gibsonSpread: number;

  /**
   * @generated from field: int32 minimum_placement = 10;
   */
  minimumPlacement: number;

  /**
   * @generated from field: int32 maximum_bye_placement = 11;
   */
  maximumByePlacement: number;
};

/**
 * Describes the message ipc.DivisionControls.
 * Use `create(DivisionControlsSchema)` to create a new message.
 */
export const DivisionControlsSchema: GenMessage<DivisionControls> = /*@__PURE__*/
  messageDesc(file_proto_ipc_tournament, 6);

/**
 * @generated from message ipc.TournamentGame
 */
export type TournamentGame = Message<"ipc.TournamentGame"> & {
  /**
   * @generated from field: repeated int32 scores = 1;
   */
  scores: number[];

  /**
   * @generated from field: repeated ipc.TournamentGameResult results = 2;
   */
  results: TournamentGameResult[];

  /**
   * @generated from field: ipc.GameEndReason game_end_reason = 3;
   */
  gameEndReason: GameEndReason;

  /**
   * @generated from field: string id = 4;
   */
  id: string;
};

/**
 * Describes the message ipc.TournamentGame.
 * Use `create(TournamentGameSchema)` to create a new message.
 */
export const TournamentGameSchema: GenMessage<TournamentGame> = /*@__PURE__*/
  messageDesc(file_proto_ipc_tournament, 7);

/**
 * @generated from message ipc.Pairing
 */
export type Pairing = Message<"ipc.Pairing"> & {
  /**
   * @generated from field: repeated int32 players = 1;
   */
  players: number[];

  /**
   * @generated from field: int32 round = 2;
   */
  round: number;

  /**
   * can be a list, for elimination tourneys
   *
   * @generated from field: repeated ipc.TournamentGame games = 3;
   */
  games: TournamentGame[];

  /**
   * @generated from field: repeated ipc.TournamentGameResult outcomes = 4;
   */
  outcomes: TournamentGameResult[];

  /**
   * @generated from field: repeated string ready_states = 5;
   */
  readyStates: string[];
};

/**
 * Describes the message ipc.Pairing.
 * Use `create(PairingSchema)` to create a new message.
 */
export const PairingSchema: GenMessage<Pairing> = /*@__PURE__*/
  messageDesc(file_proto_ipc_tournament, 8);

/**
 * @generated from message ipc.PlayerStanding
 */
export type PlayerStanding = Message<"ipc.PlayerStanding"> & {
  /**
   * @generated from field: string player_id = 1;
   */
  playerId: string;

  /**
   * @generated from field: int32 wins = 2;
   */
  wins: number;

  /**
   * @generated from field: int32 losses = 3;
   */
  losses: number;

  /**
   * @generated from field: int32 draws = 4;
   */
  draws: number;

  /**
   * @generated from field: int32 spread = 5;
   */
  spread: number;

  /**
   * @generated from field: bool gibsonized = 6;
   */
  gibsonized: boolean;
};

/**
 * Describes the message ipc.PlayerStanding.
 * Use `create(PlayerStandingSchema)` to create a new message.
 */
export const PlayerStandingSchema: GenMessage<PlayerStanding> = /*@__PURE__*/
  messageDesc(file_proto_ipc_tournament, 9);

/**
 * @generated from message ipc.RoundStandings
 */
export type RoundStandings = Message<"ipc.RoundStandings"> & {
  /**
   * @generated from field: repeated ipc.PlayerStanding standings = 1;
   */
  standings: PlayerStanding[];
};

/**
 * Describes the message ipc.RoundStandings.
 * Use `create(RoundStandingsSchema)` to create a new message.
 */
export const RoundStandingsSchema: GenMessage<RoundStandings> = /*@__PURE__*/
  messageDesc(file_proto_ipc_tournament, 10);

/**
 * @generated from message ipc.DivisionPairingsResponse
 */
export type DivisionPairingsResponse = Message<"ipc.DivisionPairingsResponse"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string division = 2;
   */
  division: string;

  /**
   * @generated from field: repeated ipc.Pairing division_pairings = 3;
   */
  divisionPairings: Pairing[];

  /**
   * @generated from field: map<int32, ipc.RoundStandings> division_standings = 4;
   */
  divisionStandings: { [key: number]: RoundStandings };
};

/**
 * Describes the message ipc.DivisionPairingsResponse.
 * Use `create(DivisionPairingsResponseSchema)` to create a new message.
 */
export const DivisionPairingsResponseSchema: GenMessage<DivisionPairingsResponse> = /*@__PURE__*/
  messageDesc(file_proto_ipc_tournament, 11);

/**
 * @generated from message ipc.DivisionPairingsDeletedResponse
 */
export type DivisionPairingsDeletedResponse = Message<"ipc.DivisionPairingsDeletedResponse"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string division = 2;
   */
  division: string;

  /**
   * @generated from field: int32 round = 3;
   */
  round: number;
};

/**
 * Describes the message ipc.DivisionPairingsDeletedResponse.
 * Use `create(DivisionPairingsDeletedResponseSchema)` to create a new message.
 */
export const DivisionPairingsDeletedResponseSchema: GenMessage<DivisionPairingsDeletedResponse> = /*@__PURE__*/
  messageDesc(file_proto_ipc_tournament, 12);

/**
 * @generated from message ipc.PlayersAddedOrRemovedResponse
 */
export type PlayersAddedOrRemovedResponse = Message<"ipc.PlayersAddedOrRemovedResponse"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string division = 2;
   */
  division: string;

  /**
   * @generated from field: ipc.TournamentPersons players = 3;
   */
  players?: TournamentPersons;

  /**
   * @generated from field: repeated ipc.Pairing division_pairings = 4;
   */
  divisionPairings: Pairing[];

  /**
   * @generated from field: map<int32, ipc.RoundStandings> division_standings = 5;
   */
  divisionStandings: { [key: number]: RoundStandings };
};

/**
 * Describes the message ipc.PlayersAddedOrRemovedResponse.
 * Use `create(PlayersAddedOrRemovedResponseSchema)` to create a new message.
 */
export const PlayersAddedOrRemovedResponseSchema: GenMessage<PlayersAddedOrRemovedResponse> = /*@__PURE__*/
  messageDesc(file_proto_ipc_tournament, 13);

/**
 * @generated from message ipc.DivisionRoundControls
 */
export type DivisionRoundControls = Message<"ipc.DivisionRoundControls"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string division = 2;
   */
  division: string;

  /**
   * @generated from field: repeated ipc.RoundControl round_controls = 3;
   */
  roundControls: RoundControl[];

  /**
   * @generated from field: repeated ipc.Pairing division_pairings = 4;
   */
  divisionPairings: Pairing[];

  /**
   * @generated from field: map<int32, ipc.RoundStandings> division_standings = 5;
   */
  divisionStandings: { [key: number]: RoundStandings };
};

/**
 * Describes the message ipc.DivisionRoundControls.
 * Use `create(DivisionRoundControlsSchema)` to create a new message.
 */
export const DivisionRoundControlsSchema: GenMessage<DivisionRoundControls> = /*@__PURE__*/
  messageDesc(file_proto_ipc_tournament, 14);

/**
 * @generated from message ipc.DivisionControlsResponse
 */
export type DivisionControlsResponse = Message<"ipc.DivisionControlsResponse"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string division = 2;
   */
  division: string;

  /**
   * @generated from field: ipc.DivisionControls division_controls = 3;
   */
  divisionControls?: DivisionControls;

  /**
   * @generated from field: map<int32, ipc.RoundStandings> division_standings = 4;
   */
  divisionStandings: { [key: number]: RoundStandings };
};

/**
 * Describes the message ipc.DivisionControlsResponse.
 * Use `create(DivisionControlsResponseSchema)` to create a new message.
 */
export const DivisionControlsResponseSchema: GenMessage<DivisionControlsResponse> = /*@__PURE__*/
  messageDesc(file_proto_ipc_tournament, 15);

/**
 * @generated from message ipc.TournamentDivisionDataResponse
 */
export type TournamentDivisionDataResponse = Message<"ipc.TournamentDivisionDataResponse"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string division = 2;
   */
  division: string;

  /**
   * @generated from field: ipc.TournamentPersons players = 3;
   */
  players?: TournamentPersons;

  /**
   * @generated from field: map<int32, ipc.RoundStandings> standings = 4;
   */
  standings: { [key: number]: RoundStandings };

  /**
   * @generated from field: map<string, ipc.Pairing> pairing_map = 5;
   */
  pairingMap: { [key: string]: Pairing };

  /**
   * @generated from field: ipc.DivisionControls controls = 6;
   */
  controls?: DivisionControls;

  /**
   * @generated from field: repeated ipc.RoundControl round_controls = 7;
   */
  roundControls: RoundControl[];

  /**
   * @generated from field: int32 current_round = 8;
   */
  currentRound: number;
};

/**
 * Describes the message ipc.TournamentDivisionDataResponse.
 * Use `create(TournamentDivisionDataResponseSchema)` to create a new message.
 */
export const TournamentDivisionDataResponseSchema: GenMessage<TournamentDivisionDataResponse> = /*@__PURE__*/
  messageDesc(file_proto_ipc_tournament, 16);

/**
 * @generated from message ipc.FullTournamentDivisions
 */
export type FullTournamentDivisions = Message<"ipc.FullTournamentDivisions"> & {
  /**
   * @generated from field: map<string, ipc.TournamentDivisionDataResponse> divisions = 1;
   */
  divisions: { [key: string]: TournamentDivisionDataResponse };

  /**
   * @generated from field: bool started = 2;
   */
  started: boolean;
};

/**
 * Describes the message ipc.FullTournamentDivisions.
 * Use `create(FullTournamentDivisionsSchema)` to create a new message.
 */
export const FullTournamentDivisionsSchema: GenMessage<FullTournamentDivisions> = /*@__PURE__*/
  messageDesc(file_proto_ipc_tournament, 17);

/**
 * @generated from message ipc.TournamentFinishedResponse
 */
export type TournamentFinishedResponse = Message<"ipc.TournamentFinishedResponse"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;
};

/**
 * Describes the message ipc.TournamentFinishedResponse.
 * Use `create(TournamentFinishedResponseSchema)` to create a new message.
 */
export const TournamentFinishedResponseSchema: GenMessage<TournamentFinishedResponse> = /*@__PURE__*/
  messageDesc(file_proto_ipc_tournament, 18);

/**
 * @generated from message ipc.TournamentDataResponse
 */
export type TournamentDataResponse = Message<"ipc.TournamentDataResponse"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * @generated from field: string description = 3;
   */
  description: string;

  /**
   * @generated from field: string executive_director = 4;
   */
  executiveDirector: string;

  /**
   * @generated from field: ipc.TournamentPersons directors = 5;
   */
  directors?: TournamentPersons;

  /**
   * @generated from field: bool is_started = 6;
   */
  isStarted: boolean;

  /**
   * Note: this field seems totally unused
   *
   * @generated from field: google.protobuf.Timestamp start_time = 7;
   */
  startTime?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp scheduled_start_time = 8;
   */
  scheduledStartTime?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp scheduled_end_time = 9;
   */
  scheduledEndTime?: Timestamp;

  /**
   * @generated from field: bool checkins_open = 10;
   */
  checkinsOpen: boolean;

  /**
   * @generated from field: bool registration_open = 11;
   */
  registrationOpen: boolean;
};

/**
 * Describes the message ipc.TournamentDataResponse.
 * Use `create(TournamentDataResponseSchema)` to create a new message.
 */
export const TournamentDataResponseSchema: GenMessage<TournamentDataResponse> = /*@__PURE__*/
  messageDesc(file_proto_ipc_tournament, 19);

/**
 * @generated from message ipc.TournamentDivisionDeletedResponse
 */
export type TournamentDivisionDeletedResponse = Message<"ipc.TournamentDivisionDeletedResponse"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string division = 2;
   */
  division: string;
};

/**
 * Describes the message ipc.TournamentDivisionDeletedResponse.
 * Use `create(TournamentDivisionDeletedResponseSchema)` to create a new message.
 */
export const TournamentDivisionDeletedResponseSchema: GenMessage<TournamentDivisionDeletedResponse> = /*@__PURE__*/
  messageDesc(file_proto_ipc_tournament, 20);

/**
 * @generated from message ipc.PlayerCheckinResponse
 */
export type PlayerCheckinResponse = Message<"ipc.PlayerCheckinResponse"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string division = 2;
   */
  division: string;

  /**
   * @generated from field: ipc.TournamentPerson player = 3;
   */
  player?: TournamentPerson;
};

/**
 * Describes the message ipc.PlayerCheckinResponse.
 * Use `create(PlayerCheckinResponseSchema)` to create a new message.
 */
export const PlayerCheckinResponseSchema: GenMessage<PlayerCheckinResponse> = /*@__PURE__*/
  messageDesc(file_proto_ipc_tournament, 21);

/**
 * @generated from enum ipc.TournamentGameResult
 */
export enum TournamentGameResult {
  /**
   * NO_RESULT: the game is not over
   *
   * @generated from enum value: NO_RESULT = 0;
   */
  NO_RESULT = 0,

  /**
   * @generated from enum value: WIN = 1;
   */
  WIN = 1,

  /**
   * @generated from enum value: LOSS = 2;
   */
  LOSS = 2,

  /**
   * @generated from enum value: DRAW = 3;
   */
  DRAW = 3,

  /**
   * @generated from enum value: BYE = 4;
   */
  BYE = 4,

  /**
   * @generated from enum value: FORFEIT_WIN = 5;
   */
  FORFEIT_WIN = 5,

  /**
   * @generated from enum value: FORFEIT_LOSS = 6;
   */
  FORFEIT_LOSS = 6,

  /**
   * ELIMINATED: player is eliminated in a bracket tournament
   *
   * @generated from enum value: ELIMINATED = 7;
   */
  ELIMINATED = 7,

  /**
   * VOID: player never played this round and should neither be assigned
   * a win nor a loss. Useful for club-type games.
   *
   * @generated from enum value: VOID = 8;
   */
  VOID = 8,
}

/**
 * Describes the enum ipc.TournamentGameResult.
 */
export const TournamentGameResultSchema: GenEnum<TournamentGameResult> = /*@__PURE__*/
  enumDesc(file_proto_ipc_tournament, 0);

/**
 * @generated from enum ipc.PairingMethod
 */
export enum PairingMethod {
  /**
   * @generated from enum value: RANDOM = 0;
   */
  RANDOM = 0,

  /**
   * @generated from enum value: ROUND_ROBIN = 1;
   */
  ROUND_ROBIN = 1,

  /**
   * @generated from enum value: KING_OF_THE_HILL = 2;
   */
  KING_OF_THE_HILL = 2,

  /**
   * @generated from enum value: ELIMINATION = 3;
   */
  ELIMINATION = 3,

  /**
   * @generated from enum value: FACTOR = 4;
   */
  FACTOR = 4,

  /**
   * @generated from enum value: INITIAL_FONTES = 5;
   */
  INITIAL_FONTES = 5,

  /**
   * @generated from enum value: SWISS = 6;
   */
  SWISS = 6,

  /**
   * @generated from enum value: QUICKPAIR = 7;
   */
  QUICKPAIR = 7,

  /**
   * @generated from enum value: MANUAL = 8;
   */
  MANUAL = 8,

  /**
   * @generated from enum value: TEAM_ROUND_ROBIN = 9;
   */
  TEAM_ROUND_ROBIN = 9,

  /**
   * @generated from enum value: INTERLEAVED_ROUND_ROBIN = 10;
   */
  INTERLEAVED_ROUND_ROBIN = 10,

  /**
   * @generated from enum value: SNAKED_ROUND_ROBIN = 11;
   */
  SNAKED_ROUND_ROBIN = 11,
}

/**
 * Describes the enum ipc.PairingMethod.
 */
export const PairingMethodSchema: GenEnum<PairingMethod> = /*@__PURE__*/
  enumDesc(file_proto_ipc_tournament, 1);

/**
 * @generated from enum ipc.FirstMethod
 */
export enum FirstMethod {
  /**
   * @generated from enum value: MANUAL_FIRST = 0;
   */
  MANUAL_FIRST = 0,

  /**
   * @generated from enum value: RANDOM_FIRST = 1;
   */
  RANDOM_FIRST = 1,

  /**
   * @generated from enum value: AUTOMATIC_FIRST = 2;
   */
  AUTOMATIC_FIRST = 2,
}

/**
 * Describes the enum ipc.FirstMethod.
 */
export const FirstMethodSchema: GenEnum<FirstMethod> = /*@__PURE__*/
  enumDesc(file_proto_ipc_tournament, 2);

