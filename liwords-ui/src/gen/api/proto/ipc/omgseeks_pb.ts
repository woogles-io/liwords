// Definitions for OMGWord seek functionality.

// @generated by protoc-gen-es v2.8.0 with parameter "target=ts"
// @generated from file proto/ipc/omgseeks.proto (package ipc, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv2";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv2";
import type { GameRequest } from "./omgwords_pb";
import { file_proto_ipc_omgwords } from "./omgwords_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file proto/ipc/omgseeks.proto.
 */
export const file_proto_ipc_omgseeks: GenFile = /*@__PURE__*/
  fileDesc("Chhwcm90by9pcGMvb21nc2Vla3MucHJvdG8SA2lwYyJhCglNYXRjaFVzZXISDwoHdXNlcl9pZBgBIAEoCRIXCg9yZWxldmFudF9yYXRpbmcYAiABKAkSFAoMaXNfYW5vbnltb3VzGAMgASgIEhQKDGRpc3BsYXlfbmFtZRgEIAEoCSK6AwoLU2Vla1JlcXVlc3QSJgoMZ2FtZV9yZXF1ZXN0GAEgASgLMhAuaXBjLkdhbWVSZXF1ZXN0EhwKBHVzZXIYAiABKAsyDi5pcGMuTWF0Y2hVc2VyEhwKFG1pbmltdW1fcmF0aW5nX3JhbmdlGAMgASgFEhwKFG1heGltdW1fcmF0aW5nX3JhbmdlGAQgASgFEhwKFHNlZWtlcl9jb25uZWN0aW9uX2lkGAUgASgJEiYKDnJlY2VpdmluZ191c2VyGAYgASgLMg4uaXBjLk1hdGNoVXNlchIiCgp1c2VyX3N0YXRlGAcgASgOMg4uaXBjLlNlZWtTdGF0ZRImCg5yZWNlaXZlcl9zdGF0ZRgIIAEoDjIOLmlwYy5TZWVrU3RhdGUSHgoWcmVjZWl2ZXJfY29ubmVjdGlvbl9pZBgJIAEoCRIYChBib290ZWRfcmVjZWl2ZXJzGAogAygJEhMKC3JlbWF0Y2hfZm9yGAsgASgJEhUKDXRvdXJuYW1lbnRfaWQYDCABKAkSHQoVcmVjZWl2ZXJfaXNfcGVybWFuZW50GA0gASgIEhIKCnJhdGluZ19rZXkYDiABKAkiLAoWU291Z2h0R2FtZVByb2Nlc3NFdmVudBISCgpyZXF1ZXN0X2lkGAEgASgJIjIKDFNlZWtSZXF1ZXN0cxIiCghyZXF1ZXN0cxgBIAMoCzIQLmlwYy5TZWVrUmVxdWVzdCIoChJEZWNsaW5lU2Vla1JlcXVlc3QSEgoKcmVxdWVzdF9pZBgBIAEoCSovCglTZWVrU3RhdGUSCgoGQUJTRU5UEAASCwoHUFJFU0VOVBABEgkKBVJFQURZEAJCdQoHY29tLmlwY0INT21nc2Vla3NQcm90b1ABWi9naXRodWIuY29tL3dvb2dsZXMtaW8vbGl3b3Jkcy9ycGMvYXBpL3Byb3RvL2lwY6ICA0lYWKoCA0lwY8oCA0lwY+ICD0lwY1xHUEJNZXRhZGF0YeoCA0lwY2IGcHJvdG8z", [file_proto_ipc_omgwords]);

/**
 * A MatchUser requests or receives a match via a seek or a match request.
 *
 * @generated from message ipc.MatchUser
 */
export type MatchUser = Message<"ipc.MatchUser"> & {
  /**
   * user_id is the database, or anonymous, ID of the user.
   *
   * @generated from field: string user_id = 1;
   */
  userId: string;

  /**
   * relevant_rating is the rating of the user, for the relevant seek mode.
   *
   * @generated from field: string relevant_rating = 2;
   */
  relevantRating: string;

  /**
   * if is_anonymous, backend won't bother to look up the user in the DB.
   *
   * @generated from field: bool is_anonymous = 3;
   */
  isAnonymous: boolean;

  /**
   * display_name is the display username of the user (could be real name too)
   *
   * @generated from field: string display_name = 4;
   */
  displayName: string;
};

/**
 * Describes the message ipc.MatchUser.
 * Use `create(MatchUserSchema)` to create a new message.
 */
export const MatchUserSchema: GenMessage<MatchUser> = /*@__PURE__*/
  messageDesc(file_proto_ipc_omgseeks, 0);

/**
 * @generated from message ipc.SeekRequest
 */
export type SeekRequest = Message<"ipc.SeekRequest"> & {
  /**
   * @generated from field: ipc.GameRequest game_request = 1;
   */
  gameRequest?: GameRequest;

  /**
   * @generated from field: ipc.MatchUser user = 2;
   */
  user?: MatchUser;

  /**
   * @generated from field: int32 minimum_rating_range = 3;
   */
  minimumRatingRange: number;

  /**
   * @generated from field: int32 maximum_rating_range = 4;
   */
  maximumRatingRange: number;

  /**
   * connection_id is the websocket ID via which this game was requested.
   *
   * @generated from field: string seeker_connection_id = 5;
   */
  seekerConnectionId: string;

  /**
   * @generated from field: ipc.MatchUser receiving_user = 6;
   */
  receivingUser?: MatchUser;

  /**
   * @generated from field: ipc.SeekState user_state = 7;
   */
  userState: SeekState;

  /**
   * @generated from field: ipc.SeekState receiver_state = 8;
   */
  receiverState: SeekState;

  /**
   * @generated from field: string receiver_connection_id = 9;
   */
  receiverConnectionId: string;

  /**
   * @generated from field: repeated string booted_receivers = 10;
   */
  bootedReceivers: string[];

  /**
   * rematch_for is the game ID that this Match Request is a rematch for (empty
   * if it isn't a rematch)
   *
   * @generated from field: string rematch_for = 11;
   */
  rematchFor: string;

  /**
   * If this match request is part of a tournament, it is treated in a special
   * way. We are moving towards server-only matching during tournaments,
   * so the following will only be used in "clubhouse mode" / more free-form
   * clubs.
   *
   * @generated from field: string tournament_id = 12;
   */
  tournamentId: string;

  /**
   * @generated from field: bool receiver_is_permanent = 13;
   */
  receiverIsPermanent: boolean;

  /**
   * @generated from field: string rating_key = 14;
   */
  ratingKey: string;
};

/**
 * Describes the message ipc.SeekRequest.
 * Use `create(SeekRequestSchema)` to create a new message.
 */
export const SeekRequestSchema: GenMessage<SeekRequest> = /*@__PURE__*/
  messageDesc(file_proto_ipc_omgseeks, 1);

/**
 * A SoughtGameProcessEvent gets sent when a match request (or seek request)
 * get accepted (from client to server), or canceled -- when sent from server to
 * client.
 *
 * @generated from message ipc.SoughtGameProcessEvent
 */
export type SoughtGameProcessEvent = Message<"ipc.SoughtGameProcessEvent"> & {
  /**
   * @generated from field: string request_id = 1;
   */
  requestId: string;
};

/**
 * Describes the message ipc.SoughtGameProcessEvent.
 * Use `create(SoughtGameProcessEventSchema)` to create a new message.
 */
export const SoughtGameProcessEventSchema: GenMessage<SoughtGameProcessEvent> = /*@__PURE__*/
  messageDesc(file_proto_ipc_omgseeks, 2);

/**
 * SeekRequests sends all open seek requests.
 *
 * @generated from message ipc.SeekRequests
 */
export type SeekRequests = Message<"ipc.SeekRequests"> & {
  /**
   * @generated from field: repeated ipc.SeekRequest requests = 1;
   */
  requests: SeekRequest[];
};

/**
 * Describes the message ipc.SeekRequests.
 * Use `create(SeekRequestsSchema)` to create a new message.
 */
export const SeekRequestsSchema: GenMessage<SeekRequests> = /*@__PURE__*/
  messageDesc(file_proto_ipc_omgseeks, 3);

/**
 * When a Receiver declines a Seeker:
 *
 * @generated from message ipc.DeclineSeekRequest
 */
export type DeclineSeekRequest = Message<"ipc.DeclineSeekRequest"> & {
  /**
   * @generated from field: string request_id = 1;
   */
  requestId: string;
};

/**
 * Describes the message ipc.DeclineSeekRequest.
 * Use `create(DeclineSeekRequestSchema)` to create a new message.
 */
export const DeclineSeekRequestSchema: GenMessage<DeclineSeekRequest> = /*@__PURE__*/
  messageDesc(file_proto_ipc_omgseeks, 4);

/**
 * @generated from enum ipc.SeekState
 */
export enum SeekState {
  /**
   * @generated from enum value: ABSENT = 0;
   */
  ABSENT = 0,

  /**
   * @generated from enum value: PRESENT = 1;
   */
  PRESENT = 1,

  /**
   * @generated from enum value: READY = 2;
   */
  READY = 2,
}

/**
 * Describes the enum ipc.SeekState.
 */
export const SeekStateSchema: GenEnum<SeekState> = /*@__PURE__*/
  enumDesc(file_proto_ipc_omgseeks, 0);

