// @generated by protoc-gen-es v2.10.0 with parameter "target=ts"
// @generated from file vendor/macondo/macondo.proto (package macondo, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv2";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv2";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file vendor/macondo/macondo.proto.
 */
export const file_vendor_macondo_macondo: GenFile = /*@__PURE__*/
  fileDesc("Chx2ZW5kb3IvbWFjb25kby9tYWNvbmRvLnByb3RvEgdtYWNvbmRvIuIDCgtHYW1lSGlzdG9yeRIiCgZldmVudHMYASADKAsyEi5tYWNvbmRvLkdhbWVFdmVudBIkCgdwbGF5ZXJzGAIgAygLMhMubWFjb25kby5QbGF5ZXJJbmZvEg8KB3ZlcnNpb24YAyABKAUSFAoMb3JpZ2luYWxfZ2NnGAQgASgJEg8KB2xleGljb24YBSABKAkSDwoHaWRfYXV0aBgGIAEoCRILCgN1aWQYByABKAkSDQoFdGl0bGUYCCABKAkSEwoLZGVzY3JpcHRpb24YCSABKAkSGAoQbGFzdF9rbm93bl9yYWNrcxgKIAMoCRIdChFzZWNvbmRfd2VudF9maXJzdBgLIAEoCEICGAESLgoOY2hhbGxlbmdlX3J1bGUYDCABKA4yFi5tYWNvbmRvLkNoYWxsZW5nZVJ1bGUSJgoKcGxheV9zdGF0ZRgNIAEoDjISLm1hY29uZG8uUGxheVN0YXRlEhQKDGZpbmFsX3Njb3JlcxgOIAMoBRIPCgd2YXJpYW50GA8gASgJEg4KBndpbm5lchgQIAEoBRIUCgxib2FyZF9sYXlvdXQYESABKAkSGwoTbGV0dGVyX2Rpc3RyaWJ1dGlvbhgSIAEoCRIUCgxzdGFydGluZ19jZ3AYEyABKAkixAUKCUdhbWVFdmVudBIUCghuaWNrbmFtZRgBIAEoCUICGAESDAoEbm90ZRgCIAEoCRIMCgRyYWNrGAMgASgJEiUKBHR5cGUYBCABKA4yFy5tYWNvbmRvLkdhbWVFdmVudC5UeXBlEhIKCmN1bXVsYXRpdmUYBSABKAUSCwoDcm93GAYgASgFEg4KBmNvbHVtbhgHIAEoBRIvCglkaXJlY3Rpb24YCCABKA4yHC5tYWNvbmRvLkdhbWVFdmVudC5EaXJlY3Rpb24SEAoIcG9zaXRpb24YCSABKAkSFAoMcGxheWVkX3RpbGVzGAogASgJEhEKCWV4Y2hhbmdlZBgLIAEoCRINCgVzY29yZRgMIAEoBRINCgVib251cxgNIAEoBRIXCg9lbmRfcmFja19wb2ludHMYDiABKAUSEgoKbG9zdF9zY29yZRgPIAEoBRIQCghpc19iaW5nbxgQIAEoCBIUCgx3b3Jkc19mb3JtZWQYESADKAkSGAoQbWlsbGlzX3JlbWFpbmluZxgSIAEoBRIUCgxwbGF5ZXJfaW5kZXgYEyABKA0SGwoTbnVtX3RpbGVzX2Zyb21fcmFjaxgUIAEoDSLVAQoEVHlwZRIXChNUSUxFX1BMQUNFTUVOVF9NT1ZFEAASGAoUUEhPTllfVElMRVNfUkVUVVJORUQQARIICgRQQVNTEAISEwoPQ0hBTExFTkdFX0JPTlVTEAMSDAoIRVhDSEFOR0UQBBIQCgxFTkRfUkFDS19QVFMQBRIQCgxUSU1FX1BFTkFMVFkQBhIUChBFTkRfUkFDS19QRU5BTFRZEAcSJAogVU5TVUNDRVNTRlVMX0NIQUxMRU5HRV9UVVJOX0xPU1MQCBINCglDSEFMTEVOR0UQCSIpCglEaXJlY3Rpb24SDgoKSE9SSVpPTlRBTBAAEgwKCFZFUlRJQ0FMEAEiQgoKUGxheWVySW5mbxIQCghuaWNrbmFtZRgBIAEoCRIRCglyZWFsX25hbWUYAiABKAkSDwoHdXNlcl9pZBgDIAEoCSKpBAoKQm90UmVxdWVzdBIqCgxnYW1lX2hpc3RvcnkYASABKAsyFC5tYWNvbmRvLkdhbWVIaXN0b3J5EjYKEmV2YWx1YXRpb25fcmVxdWVzdBgCIAEoCzIaLm1hY29uZG8uRXZhbHVhdGlvblJlcXVlc3QSLQoIYm90X3R5cGUYAyABKA4yGy5tYWNvbmRvLkJvdFJlcXVlc3QuQm90Q29kZRIYChBtaWxsaXNfcmVtYWluaW5nGAQgASgFIu0CCgdCb3RDb2RlEg0KCUhBU1RZX0JPVBAAEhoKFkxFVkVMMV9DT01NT05fV09SRF9CT1QQARIaChZMRVZFTDJfQ09NTU9OX1dPUkRfQk9UEAISGgoWTEVWRUwzX0NPTU1PTl9XT1JEX0JPVBADEhoKFkxFVkVMNF9DT01NT05fV09SRF9CT1QQBBIYChRMRVZFTDFfUFJPQkFCSUxJU1RJQxAFEhgKFExFVkVMMl9QUk9CQUJJTElTVElDEAYSGAoUTEVWRUwzX1BST0JBQklMSVNUSUMQBxIYChRMRVZFTDRfUFJPQkFCSUxJU1RJQxAIEhgKFExFVkVMNV9QUk9CQUJJTElTVElDEAkSEAoMTk9fTEVBVkVfQk9UEAoSDwoLU0lNTUlOR19CT1QQCxIaChZIQVNUWV9QTFVTX0VOREdBTUVfQk9UEAwSFQoRU0lNTUlOR19JTkZFUl9CT1QQDRILCgdVTktOT1dOEGQiIQoRRXZhbHVhdGlvblJlcXVlc3QSDAoEdXNlchgBIAEoCSI6CgpFdmFsdWF0aW9uEiwKCXBsYXlfZXZhbBgBIAMoCzIZLm1hY29uZG8uU2luZ2xlRXZhbHVhdGlvbiKfAQoQU2luZ2xlRXZhbHVhdGlvbhITCgtlcXVpdHlfbG9zcxgBIAEoARIUCgx3aW5fcGN0X2xvc3MYAiABKAESFAoMbWlzc2VkX2JpbmdvGAMgASgIEhoKEnBvc3NpYmxlX3N0YXJfcGxheRgEIAEoCBIYChBtaXNzZWRfc3Rhcl9wbGF5GAUgASgIEhQKDHRvcF9pc19iaW5nbxgGIAEoCCKCAQoLQm90UmVzcG9uc2USIgoEbW92ZRgBIAEoCzISLm1hY29uZG8uR2FtZUV2ZW50SAASDwoFZXJyb3IYAiABKAlIABIhCgRldmFsGAMgASgLMhMubWFjb25kby5FdmFsdWF0aW9uEg8KB2dhbWVfaWQYBCABKAlCCgoIcmVzcG9uc2UimgEKFlB1enpsZUNyZWF0aW9uUmVzcG9uc2USDwoHZ2FtZV9pZBgBIAEoCRITCgt0dXJuX251bWJlchgCIAEoBRIiCgZhbnN3ZXIYAyABKAsyEi5tYWNvbmRvLkdhbWVFdmVudBIgCgR0YWdzGAQgAygOMhIubWFjb25kby5QdXp6bGVUYWcSFAoMYnVja2V0X2luZGV4GAUgASgFIncKDFB1enpsZUJ1Y2tldBINCgVpbmRleBgBIAEoBRIMCgRzaXplGAIgASgFEiQKCGluY2x1ZGVzGAMgAygOMhIubWFjb25kby5QdXp6bGVUYWcSJAoIZXhjbHVkZXMYBCADKA4yEi5tYWNvbmRvLlB1enpsZVRhZyJBChdQdXp6bGVHZW5lcmF0aW9uUmVxdWVzdBImCgdidWNrZXRzGAEgAygLMhUubWFjb25kby5QdXp6bGVCdWNrZXQqQwoJUGxheVN0YXRlEgsKB1BMQVlJTkcQABIaChZXQUlUSU5HX0ZPUl9GSU5BTF9QQVNTEAESDQoJR0FNRV9PVkVSEAIqXAoNQ2hhbGxlbmdlUnVsZRIICgRWT0lEEAASCgoGU0lOR0xFEAESCgoGRE9VQkxFEAISDgoKRklWRV9QT0lOVBADEg0KCVRFTl9QT0lOVBAEEgoKBlRSSVBMRRAFKokBCglQdXp6bGVUYWcSCgoGRVFVSVRZEAASCQoFQklOR08QARIOCgpPTkxZX0JJTkdPEAISDwoLQkxBTktfQklOR08QAxINCglOT05fQklOR08QBBIOCgpQT1dFUl9USUxFEAUSFwoTQklOR09fTklORV9PUl9BQk9WRRAGEgwKCENFTF9PTkxZEAdCM1oxZ2l0aHViLmNvbS9kb21pbm8xNC9tYWNvbmRvL2dlbi9hcGkvcHJvdG8vbWFjb25kb2IGcHJvdG8z");

/**
 * GameHistory encodes a whole history of a game, and it should also encode
 * the initial board and tile configuration, etc. It can be considered
 * to be an instantiation of a GCG file.
 *
 * @generated from message macondo.GameHistory
 */
export type GameHistory = Message<"macondo.GameHistory"> & {
  /**
   * @generated from field: repeated macondo.GameEvent events = 1;
   */
  events: GameEvent[];

  /**
   * players are in order of who went first.
   *
   * @generated from field: repeated macondo.PlayerInfo players = 2;
   */
  players: PlayerInfo[];

  /**
   * @generated from field: int32 version = 3;
   */
  version: number;

  /**
   * @generated from field: string original_gcg = 4;
   */
  originalGcg: string;

  /**
   * @generated from field: string lexicon = 5;
   */
  lexicon: string;

  /**
   * @generated from field: string id_auth = 6;
   */
  idAuth: string;

  /**
   * @generated from field: string uid = 7;
   */
  uid: string;

  /**
   * @generated from field: string title = 8;
   */
  title: string;

  /**
   * @generated from field: string description = 9;
   */
  description: string;

  /**
   * last_known_racks should only be set in an incomplete / in-progress game.
   * if set, player racks should be set to these values.
   *
   * @generated from field: repeated string last_known_racks = 10;
   */
  lastKnownRacks: string[];

  /**
   * Add letter distribution (basically game name), board config, and more
   * in the future.
   *
   * @generated from field: bool second_went_first = 11 [deprecated = true];
   * @deprecated
   */
  secondWentFirst: boolean;

  /**
   * @generated from field: macondo.ChallengeRule challenge_rule = 12;
   */
  challengeRule: ChallengeRule;

  /**
   * @generated from field: macondo.PlayState play_state = 13;
   */
  playState: PlayState;

  /**
   * Final scores of the game; the order is in the order of the listed players!
   *
   * @generated from field: repeated int32 final_scores = 14;
   */
  finalScores: number[];

  /**
   * The variant is the game variant used. If blank, should
   * default to "classic".
   *
   * @generated from field: string variant = 15;
   */
  variant: string;

  /**
   * The index of the player who won. It's not always the person with the
   * highest score, because there can be timeouts, etc. If it's a tie,
   * it will be a -1.
   *
   * @generated from field: int32 winner = 16;
   */
  winner: number;

  /**
   * The board layout is just the name for the layout of the board.
   * It should have a sensible default, if blank.
   *
   * @generated from field: string board_layout = 17;
   */
  boardLayout: string;

  /**
   * The letter distribution is the name of the distribution of tiles used for
   * this game. If blank, should default to "english".
   *
   * @generated from field: string letter_distribution = 18;
   */
  letterDistribution: string;

  /**
   * If provided, the starting CGP is a crossword-game position string.
   *
   * @generated from field: string starting_cgp = 19;
   */
  startingCgp: string;
};

/**
 * Describes the message macondo.GameHistory.
 * Use `create(GameHistorySchema)` to create a new message.
 */
export const GameHistorySchema: GenMessage<GameHistory> = /*@__PURE__*/
  messageDesc(file_vendor_macondo_macondo, 0);

/**
 * This should be merged into Move.
 *
 * @generated from message macondo.GameEvent
 */
export type GameEvent = Message<"macondo.GameEvent"> & {
  /**
   * @generated from field: string nickname = 1 [deprecated = true];
   * @deprecated
   */
  nickname: string;

  /**
   * @generated from field: string note = 2;
   */
  note: string;

  /**
   * @generated from field: string rack = 3;
   */
  rack: string;

  /**
   * @generated from field: macondo.GameEvent.Type type = 4;
   */
  type: GameEvent_Type;

  /**
   * @generated from field: int32 cumulative = 5;
   */
  cumulative: number;

  /**
   * @generated from field: int32 row = 6;
   */
  row: number;

  /**
   * @generated from field: int32 column = 7;
   */
  column: number;

  /**
   * @generated from field: macondo.GameEvent.Direction direction = 8;
   */
  direction: GameEvent_Direction;

  /**
   * @generated from field: string position = 9;
   */
  position: string;

  /**
   * @generated from field: string played_tiles = 10;
   */
  playedTiles: string;

  /**
   * An event will not have all of these; it depends on the type of the event.
   *
   * @generated from field: string exchanged = 11;
   */
  exchanged: string;

  /**
   * @generated from field: int32 score = 12;
   */
  score: number;

  /**
   * @generated from field: int32 bonus = 13;
   */
  bonus: number;

  /**
   * @generated from field: int32 end_rack_points = 14;
   */
  endRackPoints: number;

  /**
   * @generated from field: int32 lost_score = 15;
   */
  lostScore: number;

  /**
   * @generated from field: bool is_bingo = 16;
   */
  isBingo: boolean;

  /**
   * words_formed is a list of all words made by this play, in user-visible
   * pretty form. The first word is the "main" word, anything after it are
   * cross-words.
   *
   * @generated from field: repeated string words_formed = 17;
   */
  wordsFormed: string[];

  /**
   * @generated from field: int32 millis_remaining = 18;
   */
  millisRemaining: number;

  /**
   * The player who played this move is encoded in player_index. This should
   * be the index in GameHistory.players.
   *
   * @generated from field: uint32 player_index = 19;
   */
  playerIndex: number;

  /**
   * num_tiles_from_rack lets us know how many tiles from the rack were either
   * played or exchanged. It is only populated for those two fields.
   *
   * @generated from field: uint32 num_tiles_from_rack = 20;
   */
  numTilesFromRack: number;
};

/**
 * Describes the message macondo.GameEvent.
 * Use `create(GameEventSchema)` to create a new message.
 */
export const GameEventSchema: GenMessage<GameEvent> = /*@__PURE__*/
  messageDesc(file_vendor_macondo_macondo, 1);

/**
 * @generated from enum macondo.GameEvent.Type
 */
export enum GameEvent_Type {
  /**
   * @generated from enum value: TILE_PLACEMENT_MOVE = 0;
   */
  TILE_PLACEMENT_MOVE = 0,

  /**
   * @generated from enum value: PHONY_TILES_RETURNED = 1;
   */
  PHONY_TILES_RETURNED = 1,

  /**
   * @generated from enum value: PASS = 2;
   */
  PASS = 2,

  /**
   * @generated from enum value: CHALLENGE_BONUS = 3;
   */
  CHALLENGE_BONUS = 3,

  /**
   * @generated from enum value: EXCHANGE = 4;
   */
  EXCHANGE = 4,

  /**
   * @generated from enum value: END_RACK_PTS = 5;
   */
  END_RACK_PTS = 5,

  /**
   * @generated from enum value: TIME_PENALTY = 6;
   */
  TIME_PENALTY = 6,

  /**
   * Only for international rules (or after 6 zeroes)
   *
   * @generated from enum value: END_RACK_PENALTY = 7;
   */
  END_RACK_PENALTY = 7,

  /**
   * Lose a turn for challenging a word incorrectly (only for double
   * challenge)
   *
   * @generated from enum value: UNSUCCESSFUL_CHALLENGE_TURN_LOSS = 8;
   */
  UNSUCCESSFUL_CHALLENGE_TURN_LOSS = 8,

  /**
   * Issue a challenge
   *
   * @generated from enum value: CHALLENGE = 9;
   */
  CHALLENGE = 9,
}

/**
 * Describes the enum macondo.GameEvent.Type.
 */
export const GameEvent_TypeSchema: GenEnum<GameEvent_Type> = /*@__PURE__*/
  enumDesc(file_vendor_macondo_macondo, 1, 0);

/**
 * @generated from enum macondo.GameEvent.Direction
 */
export enum GameEvent_Direction {
  /**
   * @generated from enum value: HORIZONTAL = 0;
   */
  HORIZONTAL = 0,

  /**
   * @generated from enum value: VERTICAL = 1;
   */
  VERTICAL = 1,
}

/**
 * Describes the enum macondo.GameEvent.Direction.
 */
export const GameEvent_DirectionSchema: GenEnum<GameEvent_Direction> = /*@__PURE__*/
  enumDesc(file_vendor_macondo_macondo, 1, 1);

/**
 * @generated from message macondo.PlayerInfo
 */
export type PlayerInfo = Message<"macondo.PlayerInfo"> & {
  /**
   * @generated from field: string nickname = 1;
   */
  nickname: string;

  /**
   * @generated from field: string real_name = 2;
   */
  realName: string;

  /**
   * user_id is an internal, unchangeable user ID, whereas the other two user
   * identifiers might possibly be mutable.
   *
   * @generated from field: string user_id = 3;
   */
  userId: string;
};

/**
 * Describes the message macondo.PlayerInfo.
 * Use `create(PlayerInfoSchema)` to create a new message.
 */
export const PlayerInfoSchema: GenMessage<PlayerInfo> = /*@__PURE__*/
  messageDesc(file_vendor_macondo_macondo, 2);

/**
 * @generated from message macondo.BotRequest
 */
export type BotRequest = Message<"macondo.BotRequest"> & {
  /**
   * @generated from field: macondo.GameHistory game_history = 1;
   */
  gameHistory?: GameHistory;

  /**
   * @generated from field: macondo.EvaluationRequest evaluation_request = 2;
   */
  evaluationRequest?: EvaluationRequest;

  /**
   * @generated from field: macondo.BotRequest.BotCode bot_type = 3;
   */
  botType: BotRequest_BotCode;

  /**
   * @generated from field: int32 millis_remaining = 4;
   */
  millisRemaining: number;
};

/**
 * Describes the message macondo.BotRequest.
 * Use `create(BotRequestSchema)` to create a new message.
 */
export const BotRequestSchema: GenMessage<BotRequest> = /*@__PURE__*/
  messageDesc(file_vendor_macondo_macondo, 3);

/**
 * @generated from enum macondo.BotRequest.BotCode
 */
export enum BotRequest_BotCode {
  /**
   * @generated from enum value: HASTY_BOT = 0;
   */
  HASTY_BOT = 0,

  /**
   * @generated from enum value: LEVEL1_COMMON_WORD_BOT = 1;
   */
  LEVEL1_COMMON_WORD_BOT = 1,

  /**
   * @generated from enum value: LEVEL2_COMMON_WORD_BOT = 2;
   */
  LEVEL2_COMMON_WORD_BOT = 2,

  /**
   * @generated from enum value: LEVEL3_COMMON_WORD_BOT = 3;
   */
  LEVEL3_COMMON_WORD_BOT = 3,

  /**
   * @generated from enum value: LEVEL4_COMMON_WORD_BOT = 4;
   */
  LEVEL4_COMMON_WORD_BOT = 4,

  /**
   * @generated from enum value: LEVEL1_PROBABILISTIC = 5;
   */
  LEVEL1_PROBABILISTIC = 5,

  /**
   * @generated from enum value: LEVEL2_PROBABILISTIC = 6;
   */
  LEVEL2_PROBABILISTIC = 6,

  /**
   * @generated from enum value: LEVEL3_PROBABILISTIC = 7;
   */
  LEVEL3_PROBABILISTIC = 7,

  /**
   * @generated from enum value: LEVEL4_PROBABILISTIC = 8;
   */
  LEVEL4_PROBABILISTIC = 8,

  /**
   * @generated from enum value: LEVEL5_PROBABILISTIC = 9;
   */
  LEVEL5_PROBABILISTIC = 9,

  /**
   * @generated from enum value: NO_LEAVE_BOT = 10;
   */
  NO_LEAVE_BOT = 10,

  /**
   * @generated from enum value: SIMMING_BOT = 11;
   */
  SIMMING_BOT = 11,

  /**
   * @generated from enum value: HASTY_PLUS_ENDGAME_BOT = 12;
   */
  HASTY_PLUS_ENDGAME_BOT = 12,

  /**
   * harder bots here? inference? ml, etc.
   *
   * @generated from enum value: SIMMING_INFER_BOT = 13;
   */
  SIMMING_INFER_BOT = 13,

  /**
   * This should have probably been number 0.
   *
   * @generated from enum value: UNKNOWN = 100;
   */
  UNKNOWN = 100,
}

/**
 * Describes the enum macondo.BotRequest.BotCode.
 */
export const BotRequest_BotCodeSchema: GenEnum<BotRequest_BotCode> = /*@__PURE__*/
  enumDesc(file_vendor_macondo_macondo, 3, 0);

/**
 * @generated from message macondo.EvaluationRequest
 */
export type EvaluationRequest = Message<"macondo.EvaluationRequest"> & {
  /**
   * Evaluate for this user
   *
   * Later: evaluation type (static/sim/etc)
   *
   * @generated from field: string user = 1;
   */
  user: string;
};

/**
 * Describes the message macondo.EvaluationRequest.
 * Use `create(EvaluationRequestSchema)` to create a new message.
 */
export const EvaluationRequestSchema: GenMessage<EvaluationRequest> = /*@__PURE__*/
  messageDesc(file_vendor_macondo_macondo, 4);

/**
 * @generated from message macondo.Evaluation
 */
export type Evaluation = Message<"macondo.Evaluation"> & {
  /**
   * @generated from field: repeated macondo.SingleEvaluation play_eval = 1;
   */
  playEval: SingleEvaluation[];
};

/**
 * Describes the message macondo.Evaluation.
 * Use `create(EvaluationSchema)` to create a new message.
 */
export const EvaluationSchema: GenMessage<Evaluation> = /*@__PURE__*/
  messageDesc(file_vendor_macondo_macondo, 5);

/**
 * @generated from message macondo.SingleEvaluation
 */
export type SingleEvaluation = Message<"macondo.SingleEvaluation"> & {
  /**
   * @generated from field: double equity_loss = 1;
   */
  equityLoss: number;

  /**
   * @generated from field: double win_pct_loss = 2;
   */
  winPctLoss: number;

  /**
   * @generated from field: bool missed_bingo = 3;
   */
  missedBingo: boolean;

  /**
   * @generated from field: bool possible_star_play = 4;
   */
  possibleStarPlay: boolean;

  /**
   * @generated from field: bool missed_star_play = 5;
   */
  missedStarPlay: boolean;

  /**
   * @generated from field: bool top_is_bingo = 6;
   */
  topIsBingo: boolean;
};

/**
 * Describes the message macondo.SingleEvaluation.
 * Use `create(SingleEvaluationSchema)` to create a new message.
 */
export const SingleEvaluationSchema: GenMessage<SingleEvaluation> = /*@__PURE__*/
  messageDesc(file_vendor_macondo_macondo, 6);

/**
 * @generated from message macondo.BotResponse
 */
export type BotResponse = Message<"macondo.BotResponse"> & {
  /**
   * @generated from oneof macondo.BotResponse.response
   */
  response: {
    /**
     * @generated from field: macondo.GameEvent move = 1;
     */
    value: GameEvent;
    case: "move";
  } | {
    /**
     * @generated from field: string error = 2;
     */
    value: string;
    case: "error";
  } | { case: undefined; value?: undefined };

  /**
   * @generated from field: macondo.Evaluation eval = 3;
   */
  eval?: Evaluation;

  /**
   * @generated from field: string game_id = 4;
   */
  gameId: string;
};

/**
 * Describes the message macondo.BotResponse.
 * Use `create(BotResponseSchema)` to create a new message.
 */
export const BotResponseSchema: GenMessage<BotResponse> = /*@__PURE__*/
  messageDesc(file_vendor_macondo_macondo, 7);

/**
 * @generated from message macondo.PuzzleCreationResponse
 */
export type PuzzleCreationResponse = Message<"macondo.PuzzleCreationResponse"> & {
  /**
   * @generated from field: string game_id = 1;
   */
  gameId: string;

  /**
   * @generated from field: int32 turn_number = 2;
   */
  turnNumber: number;

  /**
   * @generated from field: macondo.GameEvent answer = 3;
   */
  answer?: GameEvent;

  /**
   * @generated from field: repeated macondo.PuzzleTag tags = 4;
   */
  tags: PuzzleTag[];

  /**
   * @generated from field: int32 bucket_index = 5;
   */
  bucketIndex: number;
};

/**
 * Describes the message macondo.PuzzleCreationResponse.
 * Use `create(PuzzleCreationResponseSchema)` to create a new message.
 */
export const PuzzleCreationResponseSchema: GenMessage<PuzzleCreationResponse> = /*@__PURE__*/
  messageDesc(file_vendor_macondo_macondo, 8);

/**
 * @generated from message macondo.PuzzleBucket
 */
export type PuzzleBucket = Message<"macondo.PuzzleBucket"> & {
  /**
   * @generated from field: int32 index = 1;
   */
  index: number;

  /**
   * @generated from field: int32 size = 2;
   */
  size: number;

  /**
   * @generated from field: repeated macondo.PuzzleTag includes = 3;
   */
  includes: PuzzleTag[];

  /**
   * @generated from field: repeated macondo.PuzzleTag excludes = 4;
   */
  excludes: PuzzleTag[];
};

/**
 * Describes the message macondo.PuzzleBucket.
 * Use `create(PuzzleBucketSchema)` to create a new message.
 */
export const PuzzleBucketSchema: GenMessage<PuzzleBucket> = /*@__PURE__*/
  messageDesc(file_vendor_macondo_macondo, 9);

/**
 * @generated from message macondo.PuzzleGenerationRequest
 */
export type PuzzleGenerationRequest = Message<"macondo.PuzzleGenerationRequest"> & {
  /**
   * @generated from field: repeated macondo.PuzzleBucket buckets = 1;
   */
  buckets: PuzzleBucket[];
};

/**
 * Describes the message macondo.PuzzleGenerationRequest.
 * Use `create(PuzzleGenerationRequestSchema)` to create a new message.
 */
export const PuzzleGenerationRequestSchema: GenMessage<PuzzleGenerationRequest> = /*@__PURE__*/
  messageDesc(file_vendor_macondo_macondo, 10);

/**
 * @generated from enum macondo.PlayState
 */
export enum PlayState {
  /**
   * @generated from enum value: PLAYING = 0;
   */
  PLAYING = 0,

  /**
   * @generated from enum value: WAITING_FOR_FINAL_PASS = 1;
   */
  WAITING_FOR_FINAL_PASS = 1,

  /**
   * @generated from enum value: GAME_OVER = 2;
   */
  GAME_OVER = 2,
}

/**
 * Describes the enum macondo.PlayState.
 */
export const PlayStateSchema: GenEnum<PlayState> = /*@__PURE__*/
  enumDesc(file_vendor_macondo_macondo, 0);

/**
 * @generated from enum macondo.ChallengeRule
 */
export enum ChallengeRule {
  /**
   * @generated from enum value: VOID = 0;
   */
  VOID = 0,

  /**
   * @generated from enum value: SINGLE = 1;
   */
  SINGLE = 1,

  /**
   * @generated from enum value: DOUBLE = 2;
   */
  DOUBLE = 2,

  /**
   * @generated from enum value: FIVE_POINT = 3;
   */
  FIVE_POINT = 3,

  /**
   * @generated from enum value: TEN_POINT = 4;
   */
  TEN_POINT = 4,

  /**
   * @generated from enum value: TRIPLE = 5;
   */
  TRIPLE = 5,
}

/**
 * Describes the enum macondo.ChallengeRule.
 */
export const ChallengeRuleSchema: GenEnum<ChallengeRule> = /*@__PURE__*/
  enumDesc(file_vendor_macondo_macondo, 1);

/**
 * @generated from enum macondo.PuzzleTag
 */
export enum PuzzleTag {
  /**
   * @generated from enum value: EQUITY = 0;
   */
  EQUITY = 0,

  /**
   * @generated from enum value: BINGO = 1;
   */
  BINGO = 1,

  /**
   * @generated from enum value: ONLY_BINGO = 2;
   */
  ONLY_BINGO = 2,

  /**
   * @generated from enum value: BLANK_BINGO = 3;
   */
  BLANK_BINGO = 3,

  /**
   * @generated from enum value: NON_BINGO = 4;
   */
  NON_BINGO = 4,

  /**
   * @generated from enum value: POWER_TILE = 5;
   */
  POWER_TILE = 5,

  /**
   * @generated from enum value: BINGO_NINE_OR_ABOVE = 6;
   */
  BINGO_NINE_OR_ABOVE = 6,

  /**
   * @generated from enum value: CEL_ONLY = 7;
   */
  CEL_ONLY = 7,
}

/**
 * Describes the enum macondo.PuzzleTag.
 */
export const PuzzleTagSchema: GenEnum<PuzzleTag> = /*@__PURE__*/
  enumDesc(file_vendor_macondo_macondo, 2);

