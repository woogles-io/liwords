// ipc is used for inter-process communication between the different
// services.
// This package will define many types that the different services should use,
// and should be roughly split up into different files by function.

syntax = "proto3";
package ipc;

// Message types

// In order to make socket messages as small and simple as possible,
// we should include the message type with the socket message.
// Whenever we add a new client <-> server socket message type,
// add it to this list.
enum MessageType {
  SEEK_REQUEST = 0;
  MATCH_REQUEST = 1;
  SOUGHT_GAME_PROCESS_EVENT = 2;
  CLIENT_GAMEPLAY_EVENT = 3;
  SERVER_GAMEPLAY_EVENT = 4; // deprecate soon
  GAME_ENDED_EVENT = 5;
  GAME_HISTORY_REFRESHER = 6;
  ERROR_MESSAGE = 7;
  NEW_GAME_EVENT = 8;
  SERVER_CHALLENGE_RESULT_EVENT = 9;
  SEEK_REQUESTS = 10;
  ONGOING_GAME_EVENT = 12;
  TIMED_OUT = 13;
  ONGOING_GAMES = 14;
  READY_FOR_TOURNAMENT_GAME = 15;
  TOURNAMENT_ROUND_STARTED = 16;
  GAME_DELETION = 17;
  MATCH_REQUESTS = 18;
  DECLINE_SEEK_REQUEST = 19;
  CHAT_MESSAGE = 20;
  CHAT_MESSAGE_DELETED = 21;
  USER_PRESENCE = 22;
  USER_PRESENCES = 23;
  SERVER_MESSAGE = 24;
  READY_FOR_GAME = 25;
  LAG_MEASUREMENT = 26;
  TOURNAMENT_GAME_ENDED_EVENT = 27;
  TOURNAMENT_MESSAGE = 28; // used for TournamentDataResponse (metadata)
  REMATCH_STARTED = 29;
  TOURNAMENT_DIVISION_MESSAGE = 30;
  TOURNAMENT_DIVISION_DELETED_MESSAGE = 31;
  TOURNAMENT_FULL_DIVISIONS_MESSAGE = 32;
  TOURNAMENT_DIVISION_ROUND_CONTROLS_MESSAGE = 34;
  TOURNAMENT_DIVISION_PAIRINGS_MESSAGE = 35;
  TOURNAMENT_DIVISION_CONTROLS_MESSAGE = 36;
  TOURNAMENT_DIVISION_PLAYER_CHANGE_MESSAGE = 37;
  TOURNAMENT_FINISHED_MESSAGE = 38;
  TOURNAMENT_DIVISION_PAIRINGS_DELETED_MESSAGE = 39;
  PRESENCE_ENTRY = 40;
  ACTIVE_GAME_ENTRY = 41;
  GAME_META_EVENT = 42;
  PROFILE_UPDATE_EVENT = 43;

  // Add more events here. The total number of events should fit in a byte.
  // We should definitely not be using anywhere close to 255 events, and
  // in order to enforce that I'll be forcing the event type header to just be
  // a byte long.
  OMGWORDS_GAMEPLAY_EVENT = 44;
  OMGWORDS_GAMEDOCUMENT = 45;
  TOURNAMENT_CREATED = 46;
}

message RegisterRealmRequest {
  string path = 1;
  string user_id = 2;
}

message RegisterRealmResponse {
  // realm should be made obsolete. RegisterRealmResponse should always
  // return a list of realms.
  repeated string realms = 2;
}

// InitRealmInfo is a request for the API server to send back information
// about that realm back to the user. For example, for the lobby realm,
// we would like lists of active games, chats, etc; for game realms, we would
// like the game history.
message InitRealmInfo {
  string user_id = 2;
  repeated string realms = 3;
}

message LagMeasurement { int32 lag_ms = 1; }

message Pong { string ips = 1; }

message ServerMessage { string message = 1; }

// When we go to a new path in our SPA, we send a JoinPath. When we leave the
// path, we send an Unjoin realm. d
message JoinPath { string path = 1; }

message UnjoinRealm {}
