syntax = "proto3";
package omgwords_service;

import "google/protobuf/timestamp.proto";
import "proto/ipc/omgwords.proto";

// GameEventResponse doesn't need to have any extra data. The GameEvent API
// will still use sockets to broadcast game information.
message GameEventResponse {}

message TimePenaltyEvent { int32 points_lost = 1; }
message ChallengeBonusPointsEvent { int32 points_gained = 1; }
message CreateBroadcastGameRequest {
  // PlayerInfo for broadcast games do not need to be tied to a Woogles
  // UUID. These games are meant for sandbox/annotation/broadcast of
  // a typically IRL game. The order that the players are sent in
  // must be the order in which they play.
  repeated ipc.PlayerInfo players_info = 1;
  // The lexicon is a string such as NWL20, CSW21. It must be supported by
  // Woogles.
  string lexicon = 2;
  ipc.GameRules rules = 3;
  ipc.ChallengeRule challenge_rule = 4;
  // public will make this game public upon creation - i.e., findable
  // within the interface. Otherwise, a game ID is required.
  // (Not yet implemented)
  bool public = 5;
}

message CreateBroadcastGameResponse { string game_id = 1; }

message ImportGCGRequest {
  string gcg = 1;
  string lexicon = 2;
  ipc.GameRules rules = 3;
  ipc.ChallengeRule challenge_rule = 4;
}

message ImportGCGResponse { string game_id = 1; }

message BroadcastGamePrivacy { bool public = 1; }

message GetGamesForEditorRequest {
  string user_id = 1;
  uint32 limit = 2;
  uint32 offset = 3;
  bool unfinished = 4;
}

message GetRecentAnnotatedGamesRequest {
  uint32 limit = 1;
  uint32 offset = 2;
  bool unfinished = 3;
}

// Assume we can never have so many unfinished games that we'd need limits and
// offsets. Ideally we should only have one unfinished game per authed player at
// a time.
message GetMyUnfinishedGamesRequest {}

message BroadcastGamesResponse {
  message BroadcastGame {
    string game_id = 1;
    string creator_id = 2;
    bool private = 3;
    bool finished = 4;
    repeated ipc.PlayerInfo players_info = 5;
    string lexicon = 6;
    google.protobuf.Timestamp created_at = 7;
    string creator_username = 8;
  }
  repeated BroadcastGame games = 1;
}

message AnnotatedGameEvent {
  // event is the client gameplay event that represents a player's move.
  // A move can be a tile placement, a pass, an exchange, a challenge, or
  // a resign. Maybe other types in the future. This event is validated,
  // processed, and turned into one or more ipc.GameEvents, for storage
  // in a GameDocument.
  ipc.ClientGameplayEvent event = 1;
  // The user_id for this gameplay event.
  string user_id = 2;
  // The event_number is ignored unless the amendment flag is on.
  uint32 event_number = 3;
  // Amendment is true if we are amending a previous, already played move.
  // In that case, the event number is the index of the event that we
  // wish to edit. Note: not every ClientGameplayEvent maps 1-to-1 with
  // internal event indexes. In order to be sure you are editing the right
  // event, you should fetch the latest version of the GameDocument first (use
  // the GetGameDocument call).
  bool amendment = 4;
}

message GetGameDocumentRequest { string game_id = 1; }

message DeleteBroadcastGameRequest { string game_id = 1; }

message DeleteBroadcastGameResponse {}

message ReplaceDocumentRequest { ipc.GameDocument document = 1; }

message PatchDocumentRequest { ipc.GameDocument document = 1; }

message GetCGPRequest { string game_id = 1; }

message CGPResponse { string cgp = 1; }

message GetGameOwnerRequest { string game_id = 1; }

message GetGameOwnerResponse {
  string creator_id = 1;
  string creator_username = 2;
  bool found = 3;
}

// SetRacksEvent is the event used for sending player racks.
message SetRacksEvent {
  string game_id = 1;
  // racks are sent as byte arrays, in the same order as the players.
  // If you only have partial or unknown rack info, send a partial or
  // empty rack for that user.
  // Note: internally, every letter is represented by a single byte. The
  // letters A-Z map to 1-26, and the blank (?) maps to 0, for the English
  // letter distribution. For other letter distributions, the mapping orders
  // can be found in the letter distribution files in this repo.
  repeated bytes racks = 2;
  // The event_number is ignored unless the `amendment` flag is set.
  uint32 event_number = 3;
  // `amendment` should be true if we are amending a previous, already played
  // rack. In that case, the event number is the index of the event whose
  // rack we wish to edit.
  bool amendment = 4;
}
// GameEventService will handle our game event API. We can connect bots to
// this API, or use it for sandbox mode, or for live annotations, etc.
service GameEventService {
  // CreateBroadcastGame will create a game for Woogles broadcast
  rpc CreateBroadcastGame(CreateBroadcastGameRequest)
      returns (CreateBroadcastGameResponse);
  // DeleteBroadcastGame deletes a Woogles annotated game.
  rpc DeleteBroadcastGame(DeleteBroadcastGameRequest)
      returns (DeleteBroadcastGameResponse);
  // SendGameEvent is how one sends game events to the Woogles API.
  rpc SendGameEvent(AnnotatedGameEvent) returns (GameEventResponse);
  // SetRacks sets the rack for the players of the game.
  rpc SetRacks(SetRacksEvent) returns (GameEventResponse);
  rpc ReplaceGameDocument(ReplaceDocumentRequest) returns (GameEventResponse);
  // PatchGameDocument merges in the passed-in GameDocument with what's on the
  // server. The passed-in GameDocument should be a partial document
  rpc PatchGameDocument(PatchDocumentRequest) returns (GameEventResponse);
  rpc SetBroadcastGamePrivacy(BroadcastGamePrivacy) returns (GameEventResponse);

  rpc GetGamesForEditor(GetGamesForEditorRequest)
      returns (BroadcastGamesResponse);
  rpc GetMyUnfinishedGames(GetMyUnfinishedGamesRequest)
      returns (BroadcastGamesResponse);

  // GetGameDocument fetches the latest GameDocument for the passed-in ID.
  rpc GetGameDocument(GetGameDocumentRequest) returns (ipc.GameDocument);

  rpc GetRecentAnnotatedGames(GetRecentAnnotatedGamesRequest)
      returns (BroadcastGamesResponse);

  rpc GetCGP(GetCGPRequest) returns (CGPResponse);
  rpc ImportGCG(ImportGCGRequest) returns (ImportGCGResponse);
  
  // GetGameOwner returns the creator information for an annotated game
  rpc GetGameOwner(GetGameOwnerRequest) returns (GetGameOwnerResponse);
}
