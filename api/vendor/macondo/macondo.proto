syntax = "proto3";

package macondo;
option go_package = "github.com/domino14/macondo/gen/api/proto/macondo";
// GameHistory encodes a whole history of a game, and it should also encode
// the initial board and tile configuration, etc. It can be considered
// to be an instantiation of a GCG file.
message GameHistory {
  repeated GameEvent events = 1;
  // players are in order of who went first.
  repeated PlayerInfo players = 2;
  int32 version = 3;
  string original_gcg = 4;
  string lexicon = 5;
  string id_auth = 6;
  string uid = 7;
  string title = 8;
  string description = 9;
  // last_known_racks should only be set in an incomplete / in-progress game.
  // if set, player racks should be set to these values.
  repeated string last_known_racks = 10;
  // Add letter distribution (basically game name), board config, and more
  // in the future.
  bool second_went_first = 11 [ deprecated = true ];
  ChallengeRule challenge_rule = 12;
  PlayState play_state = 13;
  // Final scores of the game; the order is in the order of the listed players!
  repeated int32 final_scores = 14;
  // The variant is the game variant used. If blank, should
  // default to "classic".
  string variant = 15;
  // The index of the player who won. It's not always the person with the
  // highest score, because there can be timeouts, etc. If it's a tie,
  // it will be a -1.
  int32 winner = 16;
  // The board layout is just the name for the layout of the board.
  // It should have a sensible default, if blank.
  string board_layout = 17;
  // The letter distribution is the name of the distribution of tiles used for
  // this game. If blank, should default to "english".
  string letter_distribution = 18;
  // If provided, the starting CGP is a crossword-game position string.
  string starting_cgp = 19;
}

enum PlayState {
  PLAYING = 0;
  WAITING_FOR_FINAL_PASS = 1;
  GAME_OVER = 2;
}

enum ChallengeRule {
  VOID = 0;
  SINGLE = 1;
  DOUBLE = 2;
  FIVE_POINT = 3;
  TEN_POINT = 4;
  TRIPLE = 5;
}

// This should be merged into Move.
message GameEvent {
  enum Type {
    TILE_PLACEMENT_MOVE = 0;
    PHONY_TILES_RETURNED = 1;
    PASS = 2;
    CHALLENGE_BONUS = 3;
    EXCHANGE = 4;
    END_RACK_PTS = 5;
    TIME_PENALTY = 6;
    // Only for international rules (or after 6 zeroes)
    END_RACK_PENALTY = 7;
    // Lose a turn for challenging a word incorrectly (only for double
    // challenge)
    UNSUCCESSFUL_CHALLENGE_TURN_LOSS = 8;
    // Issue a challenge
    CHALLENGE = 9;
  }

  enum Direction {
    HORIZONTAL = 0;
    VERTICAL = 1;
  }
  string nickname = 1 [ deprecated = true ];
  string note = 2;
  string rack = 3;
  Type type = 4;
  int32 cumulative = 5;
  int32 row = 6;
  int32 column = 7;
  Direction direction = 8;
  string position = 9;
  string played_tiles = 10;
  // An event will not have all of these; it depends on the type of the event.
  string exchanged = 11;
  int32 score = 12;
  int32 bonus = 13;
  int32 end_rack_points = 14;
  int32 lost_score = 15;

  bool is_bingo = 16;
  // words_formed is a list of all words made by this play, in user-visible
  // pretty form. The first word is the "main" word, anything after it are
  // cross-words.
  repeated string words_formed = 17;
  int32 millis_remaining = 18;
  // The player who played this move is encoded in player_index. This should
  // be the index in GameHistory.players.
  uint32 player_index = 19;
  // num_tiles_from_rack lets us know how many tiles from the rack were either
  // played or exchanged. It is only populated for those two fields.
  uint32 num_tiles_from_rack = 20;
}

message PlayerInfo {
  string nickname = 1;
  string real_name = 2;
  // user_id is an internal, unchangeable user ID, whereas the other two user
  // identifiers might possibly be mutable.
  string user_id = 3;
}

// message PlayerState {
//   PlayerInfo info = 1;
//   int32 score = 2;
//   string rack_letters = 3;
// }

// Interface for bots. Bots should accept a BotRequest and return a BotResponse.

message BotRequest {
  GameHistory game_history = 1;
  EvaluationRequest evaluation_request = 2;

  enum BotCode {
    HASTY_BOT = 0;
    LEVEL1_COMMON_WORD_BOT = 1;
    LEVEL2_COMMON_WORD_BOT = 2;
    LEVEL3_COMMON_WORD_BOT = 3;
    LEVEL4_COMMON_WORD_BOT = 4;
    LEVEL1_PROBABILISTIC = 5;
    LEVEL2_PROBABILISTIC = 6;
    LEVEL3_PROBABILISTIC = 7;
    LEVEL4_PROBABILISTIC = 8;
    LEVEL5_PROBABILISTIC = 9;

    NO_LEAVE_BOT = 10;
    SIMMING_BOT = 11;
    HASTY_PLUS_ENDGAME_BOT = 12;
    SIMMING_INFER_BOT = 13;
    // harder bots here? inference? ml, etc.

    // This should have probably been number 0.
    UNKNOWN = 100;
  }

  BotCode bot_type = 3;
  int32 millis_remaining = 4;
}

message EvaluationRequest {
  // Evaluate for this user
  string user = 1;
  // Later: evaluation type (static/sim/etc)
}

message Evaluation { repeated SingleEvaluation play_eval = 1; }

message SingleEvaluation {
  double equity_loss = 1;
  double win_pct_loss = 2;
  bool missed_bingo = 3;
  bool possible_star_play = 4;
  bool missed_star_play = 5;
  bool top_is_bingo = 6;
}

message BotResponse {
  oneof response {
    GameEvent move = 1;
    string error = 2;
  }
  Evaluation eval = 3;
  string game_id = 4;
}

// Puzzles

enum PuzzleTag {
  EQUITY = 0;
  BINGO = 1;
  ONLY_BINGO = 2;
  BLANK_BINGO = 3;
  NON_BINGO = 4;
  POWER_TILE = 5;
  BINGO_NINE_OR_ABOVE = 6;
  CEL_ONLY = 7;
}

message PuzzleCreationResponse {
  string game_id = 1;
  int32 turn_number = 2;
  GameEvent answer = 3;
  repeated PuzzleTag tags = 4;
  int32 bucket_index = 5;
}

message PuzzleBucket {
  int32 index = 1;
  int32 size = 2;
  repeated PuzzleTag includes = 3;
  repeated PuzzleTag excludes = 4;
}

message PuzzleGenerationRequest { repeated PuzzleBucket buckets = 1; }